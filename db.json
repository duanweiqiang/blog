{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/top.png","path":"top.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/favicon.png","path":"medias/favicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo1.png","path":"medias/logo1.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1588078695635},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"c0c079546e46819462494da0d6e60052561da02a","modified":1588150501715},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1588078695635},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"9b8a30ed4b494f527533d9900dd11e95ac750eb5","modified":1588078695637},{"_id":"themes/hexo-theme-matery/README.md","hash":"fd0c41725c2b6d8f045b42aad51d107594329ee3","modified":1588078695636},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"f7dbd7823d04d9f3eac76a341802b6c147bfa5aa","modified":1593417906063},{"_id":"source/_data/friends.json","hash":"0b8895331b6a2e89659d99d7b8ca0cfc096e2c5d","modified":1588152343028},{"_id":"source/_posts/atPerson.md","hash":"292174b286215cd51532e47190c540ab781f6ca0","modified":1589785150552},{"_id":"source/_posts/git-use.md","hash":"cb66f8c7c2de688b1ce3de2e9701fdd3eed21a5f","modified":1589785102173},{"_id":"source/_posts/hello-world.md","hash":"9d3c674dc64592c415eb2104c8b7da8fe67ed5cc","modified":1588321112359},{"_id":"source/_posts/prvoceCode.md","hash":"37d041e92c97b5bdb121e63e03d88bbe9e05f99e","modified":1588244248950},{"_id":"source/_posts/Browser-debug.md","hash":"e45ecb99618a2ed39a4a9d17aa2a36d485a3353c","modified":1609171149806},{"_id":"source/_posts/moFang.md","hash":"5288eb47d601a8c90c49043d768b993e55e40e97","modified":1588248501780},{"_id":"source/_posts/ios-goBack-catch.md","hash":"37a74987e5c3ba09c7358f25d91d0698bca8346d","modified":1611576624055},{"_id":"source/_posts/react-dom.md","hash":"f6cb7d4daacd35d2330c8e754f4d72f82b005726","modified":1603122357769},{"_id":"source/_posts/react-performance.md","hash":"e526f0ecc409084cfec3af4cb5898a7d3543dca8","modified":1598290203278},{"_id":"source/_posts/swig.md","hash":"87dcc9220487592ae30fdf6c37bc79d86600fe41","modified":1588242768280},{"_id":"source/_posts/react-smooth-dnd.md","hash":"eb079b350cc7938d75536f0d9b8cecfc1f638945","modified":1595849108647},{"_id":"source/_posts/redux-dva.md","hash":"24f4e1d7cf7577503ae64cbc2228eb98978295d6","modified":1593419410285},{"_id":"source/_posts/web-储存.md","hash":"f49e3f4d9530cd6466749a688e5c7b21503263e5","modified":1600695523083},{"_id":"source/categories/index.md","hash":"003e6f329451f46d13c7d394b41f0e584865488a","modified":1588127868092},{"_id":"source/about/index.md","hash":"603810ed9d82ae8439a40485a2c5f6c6acc30ff5","modified":1588128254836},{"_id":"source/contact/index.md","hash":"5f296c73997bfe4c128fbdb15ba0f67b8e018017","modified":1588150996878},{"_id":"source/friends/index.md","hash":"6338b675f08625f39ea7a41d119a7ae8d8c07e6b","modified":1588129532404},{"_id":"source/tags/index.md","hash":"f393035fbed2c383a2ca7af212694a71168285fc","modified":1588127873187},{"_id":"source/_posts/webToken_oAuth.md","hash":"4f063719cff1439e0cbe46342ccde0a0c461a17b","modified":1605539468315},{"_id":"source/help/index.md","hash":"23a624c80e80066609f0e0cb1e87ae91325d964f","modified":1587721722492},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a957b05f70265a86a87d922e18488571809d2472","modified":1588078695639},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"54ccc01b097c5bf6820f0edfcece1a87b78ab32d","modified":1588078695638},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1588078695664},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1588078695664},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"f5d6459bed0f4ecb214f2dbff5b2207a80c44f66","modified":1588078695665},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"41849f9300b8dc47048333fcf4a897dd8a2a13ca","modified":1588078695663},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1588078695664},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"72fb5af3fc2f8955e2eb10926bbe4532a04ccd1b","modified":1588078695664},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"a0de92ad49e2e660be040dde13fa1acb65beee9e","modified":1588078695665},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1588078695666},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"d7c146bee351a66e2851d1f7e0cc8cb278d03ab0","modified":1588150501713},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1588078695666},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"22125624381b8d4dd50cb17ffe0631c838557364","modified":1588078695665},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1588078695666},{"_id":"themes/hexo-theme-matery/source/top.png","hash":"0bda07f80445638b12fc2648cfbcd14bb36d482c","modified":1588150446844},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1588078695640},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1588078695642},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1588078695643},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1588078695642},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"3c2a8271027f867cfecc4d82095b30da16b22857","modified":1588078695642},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"4b5476478ba12183b7c97a33d5545fc53be362a8","modified":1588078695644},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1588078695644},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1588078695645},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1588078695646},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1588078695647},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"8d263ebccccd0f9e69539f402955296de6f24a62","modified":1588078695648},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1588078695648},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"dc3f8d9faee91ede001407e7cac96590973bc87a","modified":1588078695649},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1588078695649},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"79c8e55cce3354f7e71143776d0f9c7bf566d5c0","modified":1588078695649},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"cb0cb452be1cd1857ba600f04025b506f3b6fc79","modified":1588078695650},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"78b70ff24b3039c871331ebec114b936c1756cc8","modified":1588078695650},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1588078695641},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1588078695650},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1588078695651},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"ff3ceb93a03af5d9d120710347570ecaafc00979","modified":1588078695651},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"d05926e79aa6dfc235193b9d8c6aa03118b0eade","modified":1588078695652},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1588078695652},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"2c454daf630a170f1dd7f2b42c3f3012f0c908e5","modified":1588078695652},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1588078695653},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1588078695653},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"b39db4e38cf230a83e83dbbfae5560519f59abfa","modified":1588078695654},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1588078695654},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1588078695654},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"0e4c0a6154aa34007849928ca88f05b6185b256e","modified":1588078695655},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1588078695655},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1588078695656},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1588078695656},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"c4c106c059f0eecfce92c1577f38e3abf1473dff","modified":1588078695657},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1588078695657},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1588078695657},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1588078695658},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1588078695658},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1588078695659},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"543d835c4c1c24fcac8f84ea094d8e82edeef526","modified":1588078695660},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1588078695660},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"5c8adfc97458d294ffdfa0d7c9798e91b2890026","modified":1588078695661},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"a0e002377af2a7f7e4da6d9a644de97adb035925","modified":1588078695662},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1588078695667},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"cf19e4def50fe139f22bb74ca931072e3e26ad42","modified":1588165359945},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1588078695668},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1588078695668},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1588078695669},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1588078695670},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"3f611174e31cc07f18f1b86283e6be92b9de4569","modified":1588150404722},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"0ba72f412e7f868787633392464f0bd2e3c9769a","modified":1588145121025},{"_id":"themes/hexo-theme-matery/source/medias/favicon.png","hash":"0bda07f80445638b12fc2648cfbcd14bb36d482c","modified":1588150446844},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1588078695887},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1588078695936},{"_id":"themes/hexo-theme-matery/source/medias/logo1.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1588078695936},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"f97519595a22f1b280334ad779fa0e72541d9739","modified":1588150344023},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1588078695670},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1588078695671},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1588078695672},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1588078695671},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1588078695715},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1588078695716},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1588078695716},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1588078695716},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1588078695717},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1588078695718},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1588078695713},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1588078695714},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1588078695713},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1588078695714},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1588078695734},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1588078695742},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1588078695744},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1588078695745},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1588078695745},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1588078695771},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1588078695784},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1588078695784},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1588078695799},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1588078695810},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1588078695785},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1588078695897},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1588078695917},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1588078695924},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1588078695926},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1588078695927},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1588078695929},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1588078695932},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1588078695930},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1588078695934},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1588078695935},{"_id":"themes/hexo-theme-matery/source/medias/reward/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1588142479010},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"87fb8ea6aa2c8216164acc32763c7bc2e097de93","modified":1588142299108},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1588078695672},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1588078695719},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1588078695743},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1588078695748},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1588078695816},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1588078695861},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1588078695905},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1588078695907},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1588078695908},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1588078695911},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1588078695913},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1588078695912},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1588078695915},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1588078695919},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1588078695920},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1588078695921},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1588078695922},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1588078695925},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1588078695931},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1588078695933},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1588078695936},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1a58d28857187932812ffd150f029e86ec7eaa3e","modified":1588142571951},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1588078695688},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1588078695691},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1588078695692},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1588078695692},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1588078695740},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1588078695755},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1588078695756},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1588078695751},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1588078695758},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1588078695753},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"30351cf15f5f2325275d7e0754afdef011f4b830","modified":1588078695778},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1588078695765},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1588078695759},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1588078695763},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1588078695763},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1588078695764},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1588078695786},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1588078695790},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1588078695791},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1588078695795},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1588078695794},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1588078695796},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1588078695798},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1588078695852},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1588078695868},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1588078695872},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1588078695874},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1588078695881},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1588078695885},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1588078695673},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1588078695688},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1588078695687},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1588078695711},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1588078695712},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1588078695783},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1588078695676},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1588078695686},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1588078695690},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1588078695878},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1588078695694},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1588078695708},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1588078695732},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1588078695705},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1588078695683},{"_id":"public/search.xml","hash":"20ac5ead8192804551f1ac169680795d60626f88","modified":1611592247849},{"_id":"public/categories/index.html","hash":"147defc53f27edb480be571192715d600add2cf2","modified":1611592247849},{"_id":"public/contact/index.html","hash":"debe32b8adf08ce04e10c23a31cc5b005b71d7e7","modified":1611592247849},{"_id":"public/categories/命令/index.html","hash":"d96de45ffb1886923d34505caed2fed853af05e9","modified":1611592247849},{"_id":"public/about/index.html","hash":"c01bf5d308fb5fdea9166e5f105c27e881b7b739","modified":1611592247849},{"_id":"public/friends/index.html","hash":"df5515a25d52983db6b45a4fd997c0fad97d31c4","modified":1611592247849},{"_id":"public/tags/index.html","hash":"a40468cd7cf72d3239e31d96823a7db9e265ac14","modified":1611592247849},{"_id":"public/help/index.html","hash":"addf0fd2fae28f62ac200a15ebb49bd646e54a0f","modified":1611592247849},{"_id":"public/2020/12/22/ios-goBack-catch/index.html","hash":"883221238041d0633fc90c2f89f457bbf3a3824e","modified":1611592247849},{"_id":"public/2020/11/13/Browser-debug/index.html","hash":"cabaeb40340f9e89635337e45a806d494f783122","modified":1611592247849},{"_id":"public/2020/10/17/webToken_oAuth/index.html","hash":"a7751c399d1b1be83049d1a14aa646798e5e6c12","modified":1611592247849},{"_id":"public/2020/09/17/react-dom/index.html","hash":"d26ae3f6ed258359c1aa2d71f9b7f4662df16e52","modified":1611592247849},{"_id":"public/2020/08/22/web-储存/index.html","hash":"d3e5e55eecef7d8adce9ed6d39f6f0b18735ad41","modified":1611592247849},{"_id":"public/2020/07/25/react-performance/index.html","hash":"78dac22f06fa52c33be19bc118510eb3667af56b","modified":1611592247849},{"_id":"public/2020/06/20/redux-dva/index.html","hash":"81f5220660f21c55976de83e384553e82c350402","modified":1611592247849},{"_id":"public/2020/05/15/react-smooth-dnd/index.html","hash":"5607f5ec9654d325fee73857c354acf0c3253df7","modified":1611592247849},{"_id":"public/2020/04/26/atPerson/index.html","hash":"289445f3f5bc40a275ec655e74d00ab631238894","modified":1611592247849},{"_id":"public/2020/03/22/swig/index.html","hash":"44b1866acc5e327d9b9cc7608038d5d949788b37","modified":1611592247849},{"_id":"public/2020/02/12/hello-world/index.html","hash":"3d4bb6265f03596deef5fef29b5ca3f11abd5078","modified":1611592247849},{"_id":"public/2020/02/12/git-use/index.html","hash":"095d7d8c9c81bf27ad9940e7409214935eb00d3c","modified":1611592247849},{"_id":"public/2020/01/13/moFang/index.html","hash":"c18aed0c001e7c29fba437f8b9c475549e19659e","modified":1611592247849},{"_id":"public/2019/03/14/prvoceCode/index.html","hash":"fb66df876e902c9d332592f0063cc7cca86abc29","modified":1611592247849},{"_id":"public/archives/index.html","hash":"638a4a5e4cdb3be5e110f77eb88386a4ac2d79bc","modified":1611592247849},{"_id":"public/archives/page/2/index.html","hash":"b8d96e637a2a254d0e826be0caa7b8b6b7d0eb84","modified":1611592247849},{"_id":"public/archives/2019/index.html","hash":"4eafa761a1200e0ea6bdd1ae17d3e6db5b683c1f","modified":1611592247849},{"_id":"public/archives/2019/03/index.html","hash":"3166293038d88966a6927b928dd45a67d219fdbc","modified":1611592247849},{"_id":"public/archives/2020/index.html","hash":"a3659fb4a66e736676caf819188cd0dbfc804a21","modified":1611592247849},{"_id":"public/archives/2020/page/2/index.html","hash":"db2d41b58341df29c0cf4c17d8fa0f228bd7fd83","modified":1611592247849},{"_id":"public/archives/2020/01/index.html","hash":"785a984b5c015f0a995819f76d15802bab189b06","modified":1611592247849},{"_id":"public/archives/2020/02/index.html","hash":"b3d67fdb4d1794c0ddde564679874651fa9b54f5","modified":1611592247849},{"_id":"public/archives/2020/03/index.html","hash":"9af909f4a2297b3178d13d02c1eda80ab76fab80","modified":1611592247849},{"_id":"public/archives/2020/04/index.html","hash":"f94c288440fcb667b91073fb664ce161184ab28b","modified":1611592247849},{"_id":"public/archives/2020/05/index.html","hash":"e0badfe0eb98355f4c9fd38c5822660e2126815b","modified":1611592247849},{"_id":"public/archives/2020/06/index.html","hash":"2a3cee87d7757efcd63b85efbb06c9aa7b46fc52","modified":1611592247849},{"_id":"public/archives/2020/07/index.html","hash":"04135a97e01713b0fd7053520f7558dcf73dc312","modified":1611592247849},{"_id":"public/archives/2020/08/index.html","hash":"33971838aa0f8702c9f1a6074f926ed8ba65ae5a","modified":1611592247849},{"_id":"public/archives/2020/09/index.html","hash":"8728d71cd9396d611edd917cdc2d8a7c6b29c1dc","modified":1611592247849},{"_id":"public/archives/2020/10/index.html","hash":"a7c06ea09281fc04c78cefb20890b8139927447c","modified":1611592247849},{"_id":"public/archives/2020/11/index.html","hash":"ce9b6e685e55467138d8711d641b282923eecd23","modified":1611592247849},{"_id":"public/archives/2020/12/index.html","hash":"66756edcb0c279ca1c8ccc3f3bc7494d428a038b","modified":1611592247849},{"_id":"public/categories/前端/index.html","hash":"06252b895bdb5762e3c85c9e59cd7b730da5f6a2","modified":1611592247849},{"_id":"public/categories/人文/index.html","hash":"8d64b0db3b0eefaec156c775b199769392a9d793","modified":1611592247849},{"_id":"public/categories/全站/index.html","hash":"75183c289c4f03d19d3a37a7d4c594f360da2540","modified":1611592247849},{"_id":"public/index.html","hash":"6a7a986f149417a822651966ca05c03b0d2b1045","modified":1611592247849},{"_id":"public/page/2/index.html","hash":"058024e2877ac8df72b75d3e3624e28139689e4b","modified":1611592247849},{"_id":"public/page/3/index.html","hash":"46e115272351a297fae20b64fb3f11759eac2275","modified":1611592247849},{"_id":"public/tags/git/index.html","hash":"a0a16fddc650810dfd97e0be5f858145b6db3c0c","modified":1611592247849},{"_id":"public/tags/hexo/index.html","hash":"b7c3cbb1f55342f367177aedc97cd089581b5a72","modified":1611592247849},{"_id":"public/tags/blog/index.html","hash":"5c218414b93ca6809e074bb0ecaca6b40ef3ef63","modified":1611592247849},{"_id":"public/tags/生活/index.html","hash":"4a3e0e2d5644dc7205e82cee117bd55679bce65f","modified":1611592247849},{"_id":"public/tags/常识/index.html","hash":"ff57fd0882c5c56e4fdf3d2c5427ac398bd76b55","modified":1611592247849},{"_id":"public/tags/debug/index.html","hash":"54734171228a961146881649f491fbcfc30a9a61","modified":1611592247849},{"_id":"public/tags/chrome/index.html","hash":"c66a8a130d46a13ccd29dc6586192f9d86c88f65","modified":1611592247849},{"_id":"public/tags/React/index.html","hash":"910d97ce5bd56d1178d01e764a0b415bd706c5cf","modified":1611592247849},{"_id":"public/tags/dom/index.html","hash":"f02052fe06246f71eb71f9bc5a91548cc10476ac","modified":1611592247849},{"_id":"public/tags/web/index.html","hash":"008a79e294a322778fb264f791e3e0060dd269e1","modified":1611592247849},{"_id":"public/tags/token/index.html","hash":"73d3cac569edf0e00fbcfa25afc16eedeeff298f","modified":1611592247849},{"_id":"public/tags/Safari/index.html","hash":"fd410eadb2dc89b9f6d50b0e27cf9f2cc76a1375","modified":1611592247849},{"_id":"public/tags/性能优化/index.html","hash":"fb5299c1689ab389542bc7f9adde4001b7a93fba","modified":1611592247849},{"_id":"public/tags/nodeJS/index.html","hash":"24effa619bbd97c4b887033093a9a842f00c64b9","modified":1611592247849},{"_id":"public/tags/express/index.html","hash":"21187c5625718c152201d81bceaf1df28f0cfa41","modified":1611592247849},{"_id":"public/tags/swig/index.html","hash":"54959c397f4c971aacdb1c3bd58bea47d1065045","modified":1611592247849},{"_id":"public/tags/拖动/index.html","hash":"c8e88b1dda02079d1344626fae9261446108eb11","modified":1611592247849},{"_id":"public/tags/drag/index.html","hash":"f49862e7a18efb49638626d230fb8c017949875d","modified":1611592247849},{"_id":"public/tags/储存/index.html","hash":"be05ef7c301a65bfa2724f68e0cf947831d54df2","modified":1611592247849},{"_id":"public/tags/数据隔离/index.html","hash":"a5849ea9ab2df384a9422cb9933255510e946eb8","modified":1611592247849},{"_id":"public/tags/Storage/index.html","hash":"dde4e5a475cf5b90ebc58faf42713f26c2e9e291","modified":1611592247849},{"_id":"public/tags/keyEvent/index.html","hash":"ad6032b12bb36738441587a101d879c8059eff31","modified":1611592247849},{"_id":"public/top.png","hash":"0bda07f80445638b12fc2648cfbcd14bb36d482c","modified":1611592247849},{"_id":"public/medias/avatar.jpg","hash":"0ba72f412e7f868787633392464f0bd2e3c9769a","modified":1611592247849},{"_id":"public/medias/favicon.png","hash":"0bda07f80445638b12fc2648cfbcd14bb36d482c","modified":1611592247849},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1611592247849},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1611592247849},{"_id":"public/medias/logo1.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1611592247849},{"_id":"public/medias/logo.png","hash":"f97519595a22f1b280334ad779fa0e72541d9739","modified":1611592247849},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1611592247849},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1611592247849},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1611592247849},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1611592247849},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1611592247849},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1611592247849},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1611592247849},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1611592247849},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1611592247849},{"_id":"public/medias/reward/wechat.png","hash":"87fb8ea6aa2c8216164acc32763c7bc2e097de93","modified":1611592247849},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1611592247849},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1611592247849},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1611592247849},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1611592247849},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1611592247849},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1611592247849},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1611592247849},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1611592247849},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1611592247849},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1611592247849},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1611592247849},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1611592247849},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1611592247849},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1611592247849},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1611592247849},{"_id":"public/css/prism.css","hash":"7525a8ef14db7e676922607e580e90dc68ad3e35","modified":1611592247849},{"_id":"public/js/prism.js","hash":"8c68f0a4ea552f74030fc95fb8e2fb1dd7b5868a","modified":1611592247849},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1611592247849},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1611592247849},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1611592247849},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1611592247849},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1611592247849},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1611592247849},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1611592247849},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1611592247849},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1611592247849},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1611592247849},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1611592247849},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1611592247849},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1611592247849},{"_id":"public/medias/reward/alipay.jpg","hash":"1a58d28857187932812ffd150f029e86ec7eaa3e","modified":1611592247849},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1611592247849},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1611592247849},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1611592247849},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1611592247849},{"_id":"public/css/my.css","hash":"10577fbc30f241b126d1b51b1f56136ecba86b19","modified":1611592247849},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1611592247849},{"_id":"public/js/search.js","hash":"499e11786efbb04815b54a1de317cc8606a37555","modified":1611592247849},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1611592247849},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1611592247849},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1611592247849},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1611592247849},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1611592247849},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1611592247849},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1611592247849},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1611592247849},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1611592247849},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1611592247849},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1611592247849},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1611592247849},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1611592247849},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1611592247849},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1611592247849},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1611592247849},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1611592247849},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1611592247849},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1611592247849},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1611592247849},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1611592247849},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1611592247849},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1611592247849},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1611592247849},{"_id":"public/libs/gitalk/gitalk.css","hash":"940ded3ea12c2fe1ab0820d2831ec405f3f1fe9f","modified":1611592247849},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1611592247849},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1611592247849},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1611592247849},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1611592247849},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1611592247849},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1611592247849},{"_id":"public/css/matery.css","hash":"cf19e4def50fe139f22bb74ca931072e3e26ad42","modified":1611592247849},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1611592247849},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1611592247849},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1611592247849},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1611592247849},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1611592247849},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1611592247849},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1611592247849},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1611592247849},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1611592247849},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1611592247849},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1611592247849},{"_id":"public/libs/materialize/materialize.min.css","hash":"30351cf15f5f2325275d7e0754afdef011f4b830","modified":1611592247849},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"8fefe38f28804f90116bdcb74a0875c9de9f3b7d","modified":1611592247849},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1611592247849},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1611592247849},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1611592247849},{"_id":"source/_posts/umi-ts-升级.md","hash":"7ba63c278335f41cac5915c30012def82eb22398","modified":1611592006649},{"_id":"public/2021/01/22/umi-ts-升级/index.html","hash":"973f56e5caf6ca0f9f5d909a4adb2f4c76dcd58b","modified":1611592247849},{"_id":"public/archives/2021/index.html","hash":"330fd93c78e698d6803df0ab79482dfec67eead5","modified":1611592247849},{"_id":"public/archives/2021/01/index.html","hash":"0cd4c9527d13237979fc2052af154cdc8a4bf834","modified":1611592247849},{"_id":"public/tags/umi/index.html","hash":"691f47b7ee701c750ee8438827d1f45cb0048b40","modified":1611592247849},{"_id":"public/tags/ts/index.html","hash":"4ae0cf1ea5ac60ab64c46f64e0ed6bcd8b47dcd4","modified":1611592247849}],"Category":[{"name":"命令","_id":"ckj8txcla0004hi60bcg679zq"},{"name":"前端","_id":"ckj8txclp000bhi60bcb52ifp"},{"name":"人文","_id":"ckj8txclz000jhi607wzk0ata"},{"name":"全站","_id":"ckj8txcq0001jhi604y7i2pnj"}],"Data":[{"_id":"friends","data":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}],"Page":[{"title":"categories","date":"2020-04-24T09:37:45.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-04-24 17:37:45\ntype: categories\nlayout: \"categories\"\n---\n","updated":"2020-04-29T02:37:48.092Z","path":"categories/index.html","comments":1,"_id":"ckj8txcl20001hi60a06wf2zw","content":"","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":""},{"title":"about","date":"2020-04-29T02:44:00.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2020-04-29 10:44:00\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2020-04-29T02:44:14.836Z","path":"about/index.html","comments":1,"_id":"ckj8txcl80003hi6019ca6wjd","content":"","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":""},{"title":"contact","date":"2020-04-29T02:43:49.000Z","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2020-04-29 10:43:49\nlayout: \"contact\"\n---\n","updated":"2020-04-29T09:03:16.878Z","path":"contact/index.html","comments":1,"_id":"ckj8txcli0007hi60ebe7e6kv","content":"","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":""},{"title":"friends","date":"2020-04-29T03:05:13.000Z","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2020-04-29 11:05:13\nlayout: \"friends\"\n---\n","updated":"2020-04-29T03:05:32.404Z","path":"friends/index.html","comments":1,"_id":"ckj8txclk0009hi60hq3q66ot","content":"","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":""},{"title":"tags","date":"2020-04-24T09:37:45.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-04-24 17:37:45\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2020-04-29T02:37:53.187Z","path":"tags/index.html","comments":1,"_id":"ckj8txclr000dhi602w51bic6","content":"","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":""},{"title":"help","date":"2020-04-24T09:48:42.000Z","_content":"","source":"help/index.md","raw":"---\ntitle: help\ndate: 2020-04-24 17:48:42\n---\n","updated":"2020-04-24T09:48:42.492Z","path":"help/index.html","comments":1,"layout":"page","_id":"ckj8txclt000ghi604gtacij4","content":"","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":""}],"Post":[{"title":"git 常用命令","date":"2020-02-12T10:50:00.000Z","img":"/medias/featureimages/3.jpg","top":false,"cover":false,"coverImg":"/medias/featureimages/3.jpg","toc":true,"mathjax":false,"summary":"ithub Page + Hexo 搭建个人博客的方式可以用来托管博客、项目官网等静态网页，具体的内容下面在文章内介绍。","_content":"\n","source":"_posts/git-use.md","raw":"---\ntitle: git 常用命令\ndate: 2020-02-12 18:50:00\ncategories: 命令\nimg: /medias/featureimages/3.jpg\ntop: false\ncover: false\ncoverImg: /medias/featureimages/3.jpg\ntoc: true\nmathjax: false\nsummary: ithub Page + Hexo 搭建个人博客的方式可以用来托管博客、项目官网等静态网页，具体的内容下面在文章内介绍。\ntags:\n- git\n---\n\n","slug":"git-use","published":1,"updated":"2020-05-18T06:58:22.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcko0000hi60aiu23bpp","content":"","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":""},{"title":"hexo 配置教程","date":"2020-02-12T10:50:00.000Z","img":"/medias/featureimages/1.jpg","top":false,"cover":false,"coverImg":"/medias/featureimages/1.jpg","toc":true,"mathjax":false,"summary":"Github Page + Hexo 搭建个人博客的方式可以用来托管博客、项目官网等静态网页，具体的内容下面在文章内介绍。","_content":"\n原博客出处：https://segmentfault.com/a/1190000017986794\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## 前言\n\n博客有第三方平台，也可以自建，比较早的有博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。\n\n这次我要说的就是 Github Page + Hexo 搭建个人博客的方式！Github Page 是 Github 提供的一种免费的静态网页托管服务（所以想想免费的空间不用也挺浪费的哈哈哈），可以用来托管博客、项目官网等静态网页。支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。\n\n## 准备环境\n\n准备 node 和 git 环境，\n首先，安装 NodeJS，因为 Hexo 是基于 Node.js 驱动的一款博客框架，相比起前面提到过的 Jekyll 框架更快更简洁，因为天*朝网络被墙的原因尝试过安装 Jekyll 失败而放弃了。\n然后，安装 git，一个分布式版本控制系统，用于项目的版本控制管理，作者是 Linux 之父。如果 Git 还不熟悉可以参考廖雪峰大神的 Git 教程。\n\n两个工具不同的平台安装方法有所不一样，可自行了解按步骤安装，这里不详述了。安装成功后打开git bash（Windowns）或者终端（Mac），下方中将统一称为命令行。\n在命令行中输入相应命令验证是否成功，如果成功会有相应的版本号。\n\n```\ngit version\nnode -v\nnpm -v\n```\n\n### 安装 Hexo\n\n如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 Hexo 的详细文档。\n在命令行输入执行以下命令：\n\n```\nnpm install -g hexo-cli\n```\n\n安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```\nhexo init myBlog//文件夹名，可自定义\ncd myBlog\nnpm install\n```\n新建完成后，指定文件夹的目录如下：\n\n```\n.\n├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 \n├── package.json\n├── scaffolds # 模版文件夹\n├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n|   ├── _drafts # 草稿文件\n|   └── _posts # 文章Markdowm文件 \n└── themes  # 主题文件夹\n```\n\n好了，如果上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 http://localhost:4000 回车就可以预览效果了。\n\n```\nhexo s\n或者 hexo server\n```\n至此，你本地的博客就已经搭建成功，接下来就是部署到 Github Page 了。\n\n## 注册 Github\n\n（自行baidu、google）\n\n## 新建仓库\n\n点击 Start project 或者下面的 new repository 创建一个新的仓库\n\n- 注意点来了，Github 仅能使用一个同名仓库的代码托管一个静态站点，这个网上很多教程没说到的。\n- 这里有个硬性要求：repository的名称必须要\"用户名.github.io\"\n\n## 配置 SSH key\n\n要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 做准备。\n\n打开命令行输入 cd ~/.ssh 如果没报错或者提示什么的说明就是以前生成过的，直接使用 cat ~/.ssh/id_rsa.pub 命令就是可以查看本机上的 SSH key 了。\n\n```\ncat ~/.ssh/id_rsa.pub\n```\n### 如果之前没有创建，则执行以下命令全局配置一下本地账户：\n\n```\ngit config --global user.name \"用户名\"\ngit config --global user.email \"邮箱地址\"\n```\n\n然后开始生成密钥 SSH key\n```\nssh-keygen -t rsa -C '上面的邮箱'\n```\n\n按照提示完成三次回车，即可生成 ssh key。通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的 SSH key\n\n-首次使用还需要确认并添加主机到本机SSH可信列表。若返回 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 内容，则证明添加成功。\n\n```\nssh -T git@github.com\n```\n到这还没完，还要登录 Github 上添加刚刚生成的SSH key(自行baidu、google)；\n\n## 部署到 Github\n\n此时，本地和Github的工作做得差不了，是时候把它们两个连接起来了。你也可以查看官网的部署教程。\n先不着急，部署之前还需要修改配置和安装部署插件。\n\n第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：\n\n```\ndeploy:\n  type: git\n  repo: \n    github: https://github.com/duanweiqiang/duanweiqiang.github.io.git\n  branch: master\n\n```\n\n第二：要安装一个部署插件 hexo-deployer-git。\n```\nnpm install hexo-deployer-git --save\n```\n\n最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：\n```\nhexo g -d//生成静态文件并部署到GitHub\n```\n稍等一会，在浏览器访问网址： https://你的用户名.github.io 就会看到你的博客啦！！\n\n## 写博客\n\n``` bash\n$ hexo new \"My New Post\"//博客名文件夹\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 使用 Generate 命令生成 static files\n\n``` bash\n$ hexo generate/hexo g\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 将本地命令推送到git仓库\n\n``` bash\n$ hexo clean\n$ hexo deploy/hexo g -d\n```\n部署前最好能先执行一下 hexo clean 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft \"文章标题\"，生成后会在 /source/_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。\n\n```\n$ hexo publish [layout] <filename>\n```\n## 静态图床\n文章里用的一些图片放哪里比较好呢？比对了几个免费的图床七牛、sm.ms和微博图床，最后我决定选用微博的，七牛的好像最近是测试域名不能用了，虽然有解决方案，但怕以后还会有其他问题，所以放弃啦，毕竟免费的东西才是最贵的，特别像云储存这种东西，感觉都是钱钱钱，哈哈哈，万一有一天不让用就比较麻烦了，另外sm.ms这个口碑也不错，好像是个人开发的，免费好几年了，有同样的担心就放弃了，最好抱了新浪的大腿，感觉新浪应该会靠谱一点吧，唯一的问题就是如果有一天新浪禁止外链的话就不行了，再看吧。\n\n可以去chrome网上应用商店下载一个叫微博图床的chrome插件，下图是插件的界面，操作简单方便，具体使用看说明就可以啦，比较简单，这样图床的问题就解决了。\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: hexo 配置教程\ndate: 2020-02-12 18:50:00\ncategories: 前端\nimg: /medias/featureimages/1.jpg\ntop: false\ncover: false\ncoverImg: /medias/featureimages/1.jpg\ntoc: true\nmathjax: false\nsummary: Github Page + Hexo 搭建个人博客的方式可以用来托管博客、项目官网等静态网页，具体的内容下面在文章内介绍。\ntags:\n- hexo\n- blog\n---\n\n原博客出处：https://segmentfault.com/a/1190000017986794\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## 前言\n\n博客有第三方平台，也可以自建，比较早的有博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。\n\n这次我要说的就是 Github Page + Hexo 搭建个人博客的方式！Github Page 是 Github 提供的一种免费的静态网页托管服务（所以想想免费的空间不用也挺浪费的哈哈哈），可以用来托管博客、项目官网等静态网页。支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。\n\n## 准备环境\n\n准备 node 和 git 环境，\n首先，安装 NodeJS，因为 Hexo 是基于 Node.js 驱动的一款博客框架，相比起前面提到过的 Jekyll 框架更快更简洁，因为天*朝网络被墙的原因尝试过安装 Jekyll 失败而放弃了。\n然后，安装 git，一个分布式版本控制系统，用于项目的版本控制管理，作者是 Linux 之父。如果 Git 还不熟悉可以参考廖雪峰大神的 Git 教程。\n\n两个工具不同的平台安装方法有所不一样，可自行了解按步骤安装，这里不详述了。安装成功后打开git bash（Windowns）或者终端（Mac），下方中将统一称为命令行。\n在命令行中输入相应命令验证是否成功，如果成功会有相应的版本号。\n\n```\ngit version\nnode -v\nnpm -v\n```\n\n### 安装 Hexo\n\n如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 Hexo 的详细文档。\n在命令行输入执行以下命令：\n\n```\nnpm install -g hexo-cli\n```\n\n安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\n\n```\nhexo init myBlog//文件夹名，可自定义\ncd myBlog\nnpm install\n```\n新建完成后，指定文件夹的目录如下：\n\n```\n.\n├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 \n├── package.json\n├── scaffolds # 模版文件夹\n├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n|   ├── _drafts # 草稿文件\n|   └── _posts # 文章Markdowm文件 \n└── themes  # 主题文件夹\n```\n\n好了，如果上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 http://localhost:4000 回车就可以预览效果了。\n\n```\nhexo s\n或者 hexo server\n```\n至此，你本地的博客就已经搭建成功，接下来就是部署到 Github Page 了。\n\n## 注册 Github\n\n（自行baidu、google）\n\n## 新建仓库\n\n点击 Start project 或者下面的 new repository 创建一个新的仓库\n\n- 注意点来了，Github 仅能使用一个同名仓库的代码托管一个静态站点，这个网上很多教程没说到的。\n- 这里有个硬性要求：repository的名称必须要\"用户名.github.io\"\n\n## 配置 SSH key\n\n要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 做准备。\n\n打开命令行输入 cd ~/.ssh 如果没报错或者提示什么的说明就是以前生成过的，直接使用 cat ~/.ssh/id_rsa.pub 命令就是可以查看本机上的 SSH key 了。\n\n```\ncat ~/.ssh/id_rsa.pub\n```\n### 如果之前没有创建，则执行以下命令全局配置一下本地账户：\n\n```\ngit config --global user.name \"用户名\"\ngit config --global user.email \"邮箱地址\"\n```\n\n然后开始生成密钥 SSH key\n```\nssh-keygen -t rsa -C '上面的邮箱'\n```\n\n按照提示完成三次回车，即可生成 ssh key。通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的 SSH key\n\n-首次使用还需要确认并添加主机到本机SSH可信列表。若返回 Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 内容，则证明添加成功。\n\n```\nssh -T git@github.com\n```\n到这还没完，还要登录 Github 上添加刚刚生成的SSH key(自行baidu、google)；\n\n## 部署到 Github\n\n此时，本地和Github的工作做得差不了，是时候把它们两个连接起来了。你也可以查看官网的部署教程。\n先不着急，部署之前还需要修改配置和安装部署插件。\n\n第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：\n\n```\ndeploy:\n  type: git\n  repo: \n    github: https://github.com/duanweiqiang/duanweiqiang.github.io.git\n  branch: master\n\n```\n\n第二：要安装一个部署插件 hexo-deployer-git。\n```\nnpm install hexo-deployer-git --save\n```\n\n最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：\n```\nhexo g -d//生成静态文件并部署到GitHub\n```\n稍等一会，在浏览器访问网址： https://你的用户名.github.io 就会看到你的博客啦！！\n\n## 写博客\n\n``` bash\n$ hexo new \"My New Post\"//博客名文件夹\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 使用 Generate 命令生成 static files\n\n``` bash\n$ hexo generate/hexo g\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 将本地命令推送到git仓库\n\n``` bash\n$ hexo clean\n$ hexo deploy/hexo g -d\n```\n部署前最好能先执行一下 hexo clean 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n\n另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft \"文章标题\"，生成后会在 /source/_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。\n\n```\n$ hexo publish [layout] <filename>\n```\n## 静态图床\n文章里用的一些图片放哪里比较好呢？比对了几个免费的图床七牛、sm.ms和微博图床，最后我决定选用微博的，七牛的好像最近是测试域名不能用了，虽然有解决方案，但怕以后还会有其他问题，所以放弃啦，毕竟免费的东西才是最贵的，特别像云储存这种东西，感觉都是钱钱钱，哈哈哈，万一有一天不让用就比较麻烦了，另外sm.ms这个口碑也不错，好像是个人开发的，免费好几年了，有同样的担心就放弃了，最好抱了新浪的大腿，感觉新浪应该会靠谱一点吧，唯一的问题就是如果有一天新浪禁止外链的话就不行了，再看吧。\n\n可以去chrome网上应用商店下载一个叫微博图床的chrome插件，下图是插件的界面，操作简单方便，具体使用看说明就可以啦，比较简单，这样图床的问题就解决了。\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"updated":"2020-05-01T08:18:32.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcl40002hi60dlls8rg3","content":"<p>原博客出处：<a href=\"https://segmentfault.com/a/1190000017986794\">https://segmentfault.com/a/1190000017986794</a><br>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>博客有第三方平台，也可以自建，比较早的有博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。</p>\n<p>这次我要说的就是 Github Page + Hexo 搭建个人博客的方式！Github Page 是 Github 提供的一种免费的静态网页托管服务（所以想想免费的空间不用也挺浪费的哈哈哈），可以用来托管博客、项目官网等静态网页。支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。</p>\n<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><p>准备 node 和 git 环境，<br>首先，安装 NodeJS，因为 Hexo 是基于 Node.js 驱动的一款博客框架，相比起前面提到过的 Jekyll 框架更快更简洁，因为天*朝网络被墙的原因尝试过安装 Jekyll 失败而放弃了。<br>然后，安装 git，一个分布式版本控制系统，用于项目的版本控制管理，作者是 Linux 之父。如果 Git 还不熟悉可以参考廖雪峰大神的 Git 教程。</p>\n<p>两个工具不同的平台安装方法有所不一样，可自行了解按步骤安装，这里不详述了。安装成功后打开git bash（Windowns）或者终端（Mac），下方中将统一称为命令行。<br>在命令行中输入相应命令验证是否成功，如果成功会有相应的版本号。</p>\n<pre><code>git version\nnode -v\nnpm -v</code></pre><h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 Hexo 的详细文档。<br>在命令行输入执行以下命令：</p>\n<pre><code>npm install -g hexo-cli</code></pre><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<pre><code>hexo init myBlog//文件夹名，可自定义\ncd myBlog\nnpm install</code></pre><p>新建完成后，指定文件夹的目录如下：</p>\n<pre><code>.\n├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 \n├── package.json\n├── scaffolds # 模版文件夹\n├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n|   ├── _drafts # 草稿文件\n|   └── _posts # 文章Markdowm文件 \n└── themes  # 主题文件夹</code></pre><p>好了，如果上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 <a href=\"http://localhost:4000\">http://localhost:4000</a> 回车就可以预览效果了。</p>\n<pre><code>hexo s\n或者 hexo server</code></pre><p>至此，你本地的博客就已经搭建成功，接下来就是部署到 Github Page 了。</p>\n<h2 id=\"注册-Github\"><a href=\"#注册-Github\" class=\"headerlink\" title=\"注册 Github\"></a>注册 Github</h2><p>（自行baidu、google）</p>\n<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><p>点击 Start project 或者下面的 new repository 创建一个新的仓库</p>\n<ul>\n<li>注意点来了，Github 仅能使用一个同名仓库的代码托管一个静态站点，这个网上很多教程没说到的。</li>\n<li>这里有个硬性要求：repository的名称必须要”用户名.github.io”</li>\n</ul>\n<h2 id=\"配置-SSH-key\"><a href=\"#配置-SSH-key\" class=\"headerlink\" title=\"配置 SSH key\"></a>配置 SSH key</h2><p>要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 做准备。</p>\n<p>打开命令行输入 cd ~/.ssh 如果没报错或者提示什么的说明就是以前生成过的，直接使用 cat ~/.ssh/id_rsa.pub 命令就是可以查看本机上的 SSH key 了。</p>\n<pre><code>cat ~/.ssh/id_rsa.pub</code></pre><h3 id=\"如果之前没有创建，则执行以下命令全局配置一下本地账户：\"><a href=\"#如果之前没有创建，则执行以下命令全局配置一下本地账户：\" class=\"headerlink\" title=\"如果之前没有创建，则执行以下命令全局配置一下本地账户：\"></a>如果之前没有创建，则执行以下命令全局配置一下本地账户：</h3><pre><code>git config --global user.name &quot;用户名&quot;\ngit config --global user.email &quot;邮箱地址&quot;</code></pre><p>然后开始生成密钥 SSH key</p>\n<pre><code>ssh-keygen -t rsa -C &#39;上面的邮箱&#39;</code></pre><p>按照提示完成三次回车，即可生成 ssh key。通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的 SSH key</p>\n<p>-首次使用还需要确认并添加主机到本机SSH可信列表。若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 内容，则证明添加成功。</p>\n<pre><code>ssh -T git@github.com</code></pre><p>到这还没完，还要登录 Github 上添加刚刚生成的SSH key(自行baidu、google)；</p>\n<h2 id=\"部署到-Github\"><a href=\"#部署到-Github\" class=\"headerlink\" title=\"部署到 Github\"></a>部署到 Github</h2><p>此时，本地和Github的工作做得差不了，是时候把它们两个连接起来了。你也可以查看官网的部署教程。<br>先不着急，部署之前还需要修改配置和安装部署插件。</p>\n<p>第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：</p>\n<pre><code>deploy:\n  type: git\n  repo: \n    github: https://github.com/duanweiqiang/duanweiqiang.github.io.git\n  branch: master\n</code></pre><p>第二：要安装一个部署插件 hexo-deployer-git。</p>\n<pre><code>npm install hexo-deployer-git --save</code></pre><p>最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p>\n<pre><code>hexo g -d//生成静态文件并部署到GitHub</code></pre><p>稍等一会，在浏览器访问网址： https://你的用户名.github.io 就会看到你的博客啦！！</p>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span>//博客名文件夹</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"使用-Generate-命令生成-static-files\"><a href=\"#使用-Generate-命令生成-static-files\" class=\"headerlink\" title=\"使用 Generate 命令生成 static files\"></a>使用 Generate 命令生成 static files</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo generate/hexo g</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"将本地命令推送到git仓库\"><a href=\"#将本地命令推送到git仓库\" class=\"headerlink\" title=\"将本地命令推送到git仓库\"></a>将本地命令推送到git仓库</h3><pre class=\" language-bash\"><code class=\"language-bash\">$ hexo clean\n$ hexo deploy/hexo g -d</code></pre>\n<p>部署前最好能先执行一下 hexo clean 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<p>另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft “文章标题”，生成后会在 /source/_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。</p>\n<pre><code>$ hexo publish [layout] &lt;filename&gt;</code></pre><h2 id=\"静态图床\"><a href=\"#静态图床\" class=\"headerlink\" title=\"静态图床\"></a>静态图床</h2><p>文章里用的一些图片放哪里比较好呢？比对了几个免费的图床七牛、sm.ms和微博图床，最后我决定选用微博的，七牛的好像最近是测试域名不能用了，虽然有解决方案，但怕以后还会有其他问题，所以放弃啦，毕竟免费的东西才是最贵的，特别像云储存这种东西，感觉都是钱钱钱，哈哈哈，万一有一天不让用就比较麻烦了，另外sm.ms这个口碑也不错，好像是个人开发的，免费好几年了，有同样的担心就放弃了，最好抱了新浪的大腿，感觉新浪应该会靠谱一点吧，唯一的问题就是如果有一天新浪禁止外链的话就不行了，再看吧。</p>\n<p>可以去chrome网上应用商店下载一个叫微博图床的chrome插件，下图是插件的界面，操作简单方便，具体使用看说明就可以啦，比较简单，这样图床的问题就解决了。</p>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<p>原博客出处：<a href=\"https://segmentfault.com/a/1190000017986794\">https://segmentfault.com/a/1190000017986794</a><br>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>博客有第三方平台，也可以自建，比较早的有博客园、CSDN，近几年新兴的也比较多诸如：WordPress、segmentFault、简书、掘金、知乎专栏、Github Page 等等。</p>\n<p>这次我要说的就是 Github Page + Hexo 搭建个人博客的方式！Github Page 是 Github 提供的一种免费的静态网页托管服务（所以想想免费的空间不用也挺浪费的哈哈哈），可以用来托管博客、项目官网等静态网页。支持 Jekyll、Hugo、Hexo 编译静态资源，这次我们的主角就是 Hexo 了，具体的内容下面在文章内介绍。</p>\n<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><p>准备 node 和 git 环境，<br>首先，安装 NodeJS，因为 Hexo 是基于 Node.js 驱动的一款博客框架，相比起前面提到过的 Jekyll 框架更快更简洁，因为天*朝网络被墙的原因尝试过安装 Jekyll 失败而放弃了。<br>然后，安装 git，一个分布式版本控制系统，用于项目的版本控制管理，作者是 Linux 之父。如果 Git 还不熟悉可以参考廖雪峰大神的 Git 教程。</p>\n<p>两个工具不同的平台安装方法有所不一样，可自行了解按步骤安装，这里不详述了。安装成功后打开git bash（Windowns）或者终端（Mac），下方中将统一称为命令行。<br>在命令行中输入相应命令验证是否成功，如果成功会有相应的版本号。</p>\n<pre><code>git version\nnode -v\nnpm -v</code></pre><h3 id=\"安装-Hexo\"><a href=\"#安装-Hexo\" class=\"headerlink\" title=\"安装 Hexo\"></a>安装 Hexo</h3><p>如果以上环境准备好了就可以使用 npm 开始安装 Hexo 了。也可查看 Hexo 的详细文档。<br>在命令行输入执行以下命令：</p>\n<pre><code>npm install -g hexo-cli</code></pre><p>安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<pre><code>hexo init myBlog//文件夹名，可自定义\ncd myBlog\nnpm install</code></pre><p>新建完成后，指定文件夹的目录如下：</p>\n<pre><code>.\n├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 \n├── package.json\n├── scaffolds # 模版文件夹\n├── source  # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹\n|   ├── _drafts # 草稿文件\n|   └── _posts # 文章Markdowm文件 \n└── themes  # 主题文件夹</code></pre><p>好了，如果上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 <a href=\"http://localhost:4000\">http://localhost:4000</a> 回车就可以预览效果了。</p>\n<pre><code>hexo s\n或者 hexo server</code></pre><p>至此，你本地的博客就已经搭建成功，接下来就是部署到 Github Page 了。</p>\n<h2 id=\"注册-Github\"><a href=\"#注册-Github\" class=\"headerlink\" title=\"注册 Github\"></a>注册 Github</h2><p>（自行baidu、google）</p>\n<h2 id=\"新建仓库\"><a href=\"#新建仓库\" class=\"headerlink\" title=\"新建仓库\"></a>新建仓库</h2><p>点击 Start project 或者下面的 new repository 创建一个新的仓库</p>\n<ul>\n<li>注意点来了，Github 仅能使用一个同名仓库的代码托管一个静态站点，这个网上很多教程没说到的。</li>\n<li>这里有个硬性要求：repository的名称必须要”用户名.github.io”</li>\n</ul>\n<h2 id=\"配置-SSH-key\"><a href=\"#配置-SSH-key\" class=\"headerlink\" title=\"配置 SSH key\"></a>配置 SSH key</h2><p>要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github 做准备。</p>\n<p>打开命令行输入 cd ~/.ssh 如果没报错或者提示什么的说明就是以前生成过的，直接使用 cat ~/.ssh/id_rsa.pub 命令就是可以查看本机上的 SSH key 了。</p>\n<pre><code>cat ~/.ssh/id_rsa.pub</code></pre><h3 id=\"如果之前没有创建，则执行以下命令全局配置一下本地账户：\"><a href=\"#如果之前没有创建，则执行以下命令全局配置一下本地账户：\" class=\"headerlink\" title=\"如果之前没有创建，则执行以下命令全局配置一下本地账户：\"></a>如果之前没有创建，则执行以下命令全局配置一下本地账户：</h3><pre><code>git config --global user.name &quot;用户名&quot;\ngit config --global user.email &quot;邮箱地址&quot;</code></pre><p>然后开始生成密钥 SSH key</p>\n<pre><code>ssh-keygen -t rsa -C &#39;上面的邮箱&#39;</code></pre><p>按照提示完成三次回车，即可生成 ssh key。通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的 SSH key</p>\n<p>-首次使用还需要确认并添加主机到本机SSH可信列表。若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 内容，则证明添加成功。</p>\n<pre><code>ssh -T git@github.com</code></pre><p>到这还没完，还要登录 Github 上添加刚刚生成的SSH key(自行baidu、google)；</p>\n<h2 id=\"部署到-Github\"><a href=\"#部署到-Github\" class=\"headerlink\" title=\"部署到 Github\"></a>部署到 Github</h2><p>此时，本地和Github的工作做得差不了，是时候把它们两个连接起来了。你也可以查看官网的部署教程。<br>先不着急，部署之前还需要修改配置和安装部署插件。</p>\n<p>第一：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置（也可同时部署到多个仓库，后面再说）：</p>\n<pre><code>deploy:\n  type: git\n  repo: \n    github: https://github.com/duanweiqiang/duanweiqiang.github.io.git\n  branch: master\n</code></pre><p>第二：要安装一个部署插件 hexo-deployer-git。</p>\n<pre><code>npm install hexo-deployer-git --save</code></pre><p>最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：</p>\n<pre><code>hexo g -d//生成静态文件并部署到GitHub</code></pre><p>稍等一会，在浏览器访问网址： https://你的用户名.github.io 就会看到你的博客啦！！</p>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><pre><code class=\"bash\">$ hexo new &quot;My New Post&quot;//博客名文件夹</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"使用-Generate-命令生成-static-files\"><a href=\"#使用-Generate-命令生成-static-files\" class=\"headerlink\" title=\"使用 Generate 命令生成 static files\"></a>使用 Generate 命令生成 static files</h3><pre><code class=\"bash\">$ hexo generate/hexo g</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"将本地命令推送到git仓库\"><a href=\"#将本地命令推送到git仓库\" class=\"headerlink\" title=\"将本地命令推送到git仓库\"></a>将本地命令推送到git仓库</h3><pre><code class=\"bash\">$ hexo clean\n$ hexo deploy/hexo g -d</code></pre>\n<p>部署前最好能先执行一下 hexo clean 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</p>\n<p>另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft “文章标题”，生成后会在 /source/_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。</p>\n<pre><code>$ hexo publish [layout] &lt;filename&gt;</code></pre><h2 id=\"静态图床\"><a href=\"#静态图床\" class=\"headerlink\" title=\"静态图床\"></a>静态图床</h2><p>文章里用的一些图片放哪里比较好呢？比对了几个免费的图床七牛、sm.ms和微博图床，最后我决定选用微博的，七牛的好像最近是测试域名不能用了，虽然有解决方案，但怕以后还会有其他问题，所以放弃啦，毕竟免费的东西才是最贵的，特别像云储存这种东西，感觉都是钱钱钱，哈哈哈，万一有一天不让用就比较麻烦了，另外sm.ms这个口碑也不错，好像是个人开发的，免费好几年了，有同样的担心就放弃了，最好抱了新浪的大腿，感觉新浪应该会靠谱一点吧，唯一的问题就是如果有一天新浪禁止外链的话就不行了，再看吧。</p>\n<p>可以去chrome网上应用商店下载一个叫微博图床的chrome插件，下图是插件的界面，操作简单方便，具体使用看说明就可以啦，比较简单，这样图床的问题就解决了。</p>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"车牌编号规则","date":"2019-03-14T09:57:22.000Z","img":"/medias/featureimages/2.jpg","top":false,"cover":false,"coverImg":"/medias/featureimages/2.jpg","toc":true,"mathjax":false,"summary":"车牌又叫车辆登记牌，也是一辆车唯一的类似身份证的存在，用来辨识和区分管理车辆。本文涉及车牌种类和车牌涂色彩汇总。","_content":"\n## 中国车牌号码规则\n\n### 一、车牌号码规则\n\n#### 1.1 民用车牌规则\n### 普通车牌（蓝牌、黄牌）\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n省份简称|发证机关代码|号码|号码|号码|号码|号码|\n\n- 黑底白字是外资企业的车\n\n省份简称：\n京 津 晋 冀 蒙 辽 吉 黑 沪 苏 浙 皖 闽 赣 鲁 豫 鄂 湘 粤 桂 琼 渝 川 贵 云 藏 陕 甘 青 宁 新\n\n发证机关代码：\n\nABCDEFGH JKLMN PQRSTUVWXY \n\n- 说明：无 I, O , Z 三个字母。其中O和Z属于特殊车牌类型，见其它类型说明。\n\n车牌号码：\n\n数字：0123456789\n\n字母：ABCDEFGH JKLNM PQRSTUVWXY\n\n说明：无 I, O 字母；\n\n\n### 新能源车牌\n车牌号码长度：8 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|第8位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: |\n省份|发证机关|号码|号码|号码|号码|号码|号码|\n\n新能源车牌现阶段号码长度为8位，按照现行新能源车牌号码规则：\n\n第3位：1-9DF\n\n第4位：1-9A-Z，无I、O字母；\n\n第5-7位：0-9\n\n第8位：1-9DF\n\n严格校验新能源车牌号码的约束规则：\n\n当第3位为D/F时，第4位可字母和数字，第5-8位必须纯数字；\n\n当第8位为D/F时，第3-7位必须纯数字；\n\n### 1.2 民用特殊车牌规则\n**港澳车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n粤|Z|号码|号码|号码|号码|[港澳]\n\n第1、2位分别是“粤Z”，第7位为“港澳”。\n\n**教练车 - 学**\n教练车号牌的第7位固定为“学”字，其它号码与普通民用车牌一致；\n\n**拖挂车 - 挂**\n拖挂车的车厢，其号牌的第7位固定为“挂”字，其它号码与普通民用车牌一致；\n\n**其它可能出现的字符：领试超练**\n其号牌的第7位固定为“领试超练”某个字，其它号码与普通民用车牌一致；\n\n**民航内部车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n民|航|号码|号码|号码|号码|号码\n\n**使馆车牌**\n车牌号码长度：7 位\n\n- 新式使馆车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n[1-3]|数字|数字|号码|号码|号码|使|\n\n- 旧式使馆车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n使|[1-3]|数字|数字|号码|号码|号码|\n\n这个类型的车牌于2017年5月左右取消，更换成新式使馆车牌。参见新闻链接:http://society.cnr.cn/js/20170214/t20170214_523597660.html\n\n### 1.3 警队车牌规则\n警队车牌包括四种车牌：\n\n地方武警车牌；\n\n武警总队车牌；\n\n普通警察车牌；\n\nO字警察车牌；\n\n**地方武警车牌**\n车牌号码长度：8 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|第8位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: |\nW|J|省份简称|号码|号码|号码|号码|号码\n\n- 其中号码字段，保持与普通车牌号码一致。\n\n参考资料：武警部队于6月1日正式启用新式车辆牌证\n\n例如：\n\n- WJ京12345 \n- WJ粤12345\n\n**武警总队车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\nW|J|号码|号码|号码|号码|号码|\n\n- 其中号码字段，保持与普通车牌号码一致。\n\n例如：\n\n- WJ1234J\n- WJ95001\n\n**普通警察车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n省份|发证机关|号码|号码|号码|号码|警|\n\n- 其中第7位固定为“警”字，其它位置与普通车牌号码一致；\n\n**O字车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n省份|O|号码|号码|号码|号码|号码|\n\n- 其中第1位固定为字母“O”，其它位置与普通车牌号码一致。\n\n注：此类似车牌已基本在全国范围内取消，但部分地区仍有使用情况。\n\n### 1.4 军队车牌规则\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n军区军种代码|单位代码|号码|号码|号码|号码|号码|\n\n军区代码：\n\nQVKHBSLJNGCEZ\n\n代表各大军区、总部、军种：\n\nQ 战区首字母（新式）\n\nVKHBSLJNGCEZ 旧式军区车牌前缀。后期根据军队车牌情况可能只保存“Q”字母。\n\n单位代码：\n\n与普通民用车牌发证机关代码的字母一致，未做严格限制。\n\n## 二、统计表\n![IMG_3445.JPG](http://ww1.sinaimg.cn/large/987eaf20ly1ge50m1n52rj21390o1gsf.jpg)","source":"_posts/prvoceCode.md","raw":"---\ntitle: 车牌编号规则\ndate: 2019-03-14 17:57:22\nimg: /medias/featureimages/2.jpg\ntop: false\ncover: false\ncoverImg: /medias/featureimages/2.jpg\ntoc: true\nmathjax: false\nsummary: 车牌又叫车辆登记牌，也是一辆车唯一的类似身份证的存在，用来辨识和区分管理车辆。本文涉及车牌种类和车牌涂色彩汇总。\ncategories: 人文\ntags:\n- 生活\n- 常识\n---\n\n## 中国车牌号码规则\n\n### 一、车牌号码规则\n\n#### 1.1 民用车牌规则\n### 普通车牌（蓝牌、黄牌）\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n省份简称|发证机关代码|号码|号码|号码|号码|号码|\n\n- 黑底白字是外资企业的车\n\n省份简称：\n京 津 晋 冀 蒙 辽 吉 黑 沪 苏 浙 皖 闽 赣 鲁 豫 鄂 湘 粤 桂 琼 渝 川 贵 云 藏 陕 甘 青 宁 新\n\n发证机关代码：\n\nABCDEFGH JKLMN PQRSTUVWXY \n\n- 说明：无 I, O , Z 三个字母。其中O和Z属于特殊车牌类型，见其它类型说明。\n\n车牌号码：\n\n数字：0123456789\n\n字母：ABCDEFGH JKLNM PQRSTUVWXY\n\n说明：无 I, O 字母；\n\n\n### 新能源车牌\n车牌号码长度：8 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|第8位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: |\n省份|发证机关|号码|号码|号码|号码|号码|号码|\n\n新能源车牌现阶段号码长度为8位，按照现行新能源车牌号码规则：\n\n第3位：1-9DF\n\n第4位：1-9A-Z，无I、O字母；\n\n第5-7位：0-9\n\n第8位：1-9DF\n\n严格校验新能源车牌号码的约束规则：\n\n当第3位为D/F时，第4位可字母和数字，第5-8位必须纯数字；\n\n当第8位为D/F时，第3-7位必须纯数字；\n\n### 1.2 民用特殊车牌规则\n**港澳车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n粤|Z|号码|号码|号码|号码|[港澳]\n\n第1、2位分别是“粤Z”，第7位为“港澳”。\n\n**教练车 - 学**\n教练车号牌的第7位固定为“学”字，其它号码与普通民用车牌一致；\n\n**拖挂车 - 挂**\n拖挂车的车厢，其号牌的第7位固定为“挂”字，其它号码与普通民用车牌一致；\n\n**其它可能出现的字符：领试超练**\n其号牌的第7位固定为“领试超练”某个字，其它号码与普通民用车牌一致；\n\n**民航内部车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n民|航|号码|号码|号码|号码|号码\n\n**使馆车牌**\n车牌号码长度：7 位\n\n- 新式使馆车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n[1-3]|数字|数字|号码|号码|号码|使|\n\n- 旧式使馆车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n使|[1-3]|数字|数字|号码|号码|号码|\n\n这个类型的车牌于2017年5月左右取消，更换成新式使馆车牌。参见新闻链接:http://society.cnr.cn/js/20170214/t20170214_523597660.html\n\n### 1.3 警队车牌规则\n警队车牌包括四种车牌：\n\n地方武警车牌；\n\n武警总队车牌；\n\n普通警察车牌；\n\nO字警察车牌；\n\n**地方武警车牌**\n车牌号码长度：8 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|第8位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: |\nW|J|省份简称|号码|号码|号码|号码|号码\n\n- 其中号码字段，保持与普通车牌号码一致。\n\n参考资料：武警部队于6月1日正式启用新式车辆牌证\n\n例如：\n\n- WJ京12345 \n- WJ粤12345\n\n**武警总队车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\nW|J|号码|号码|号码|号码|号码|\n\n- 其中号码字段，保持与普通车牌号码一致。\n\n例如：\n\n- WJ1234J\n- WJ95001\n\n**普通警察车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n省份|发证机关|号码|号码|号码|号码|警|\n\n- 其中第7位固定为“警”字，其它位置与普通车牌号码一致；\n\n**O字车牌**\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n省份|O|号码|号码|号码|号码|号码|\n\n- 其中第1位固定为字母“O”，其它位置与普通车牌号码一致。\n\n注：此类似车牌已基本在全国范围内取消，但部分地区仍有使用情况。\n\n### 1.4 军队车牌规则\n车牌号码长度：7 位\n\n车牌号码格式：\n\n第1位|第2位|第3位|第4位|第5位|第6位|第7位|\n:-: | :-: | :-: | :-: | :-: | :-: | :-: |\n军区军种代码|单位代码|号码|号码|号码|号码|号码|\n\n军区代码：\n\nQVKHBSLJNGCEZ\n\n代表各大军区、总部、军种：\n\nQ 战区首字母（新式）\n\nVKHBSLJNGCEZ 旧式军区车牌前缀。后期根据军队车牌情况可能只保存“Q”字母。\n\n单位代码：\n\n与普通民用车牌发证机关代码的字母一致，未做严格限制。\n\n## 二、统计表\n![IMG_3445.JPG](http://ww1.sinaimg.cn/large/987eaf20ly1ge50m1n52rj21390o1gsf.jpg)","slug":"prvoceCode","published":1,"updated":"2020-04-30T10:57:28.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txclh0006hi600x61ecms","content":"<h2 id=\"中国车牌号码规则\"><a href=\"#中国车牌号码规则\" class=\"headerlink\" title=\"中国车牌号码规则\"></a>中国车牌号码规则</h2><h3 id=\"一、车牌号码规则\"><a href=\"#一、车牌号码规则\" class=\"headerlink\" title=\"一、车牌号码规则\"></a>一、车牌号码规则</h3><h4 id=\"1-1-民用车牌规则\"><a href=\"#1-1-民用车牌规则\" class=\"headerlink\" title=\"1.1 民用车牌规则\"></a>1.1 民用车牌规则</h4><h3 id=\"普通车牌（蓝牌、黄牌）\"><a href=\"#普通车牌（蓝牌、黄牌）\" class=\"headerlink\" title=\"普通车牌（蓝牌、黄牌）\"></a>普通车牌（蓝牌、黄牌）</h3><p>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">省份简称</td>\n<td align=\"center\">发证机关代码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<ul>\n<li>黑底白字是外资企业的车</li>\n</ul>\n<p>省份简称：<br>京 津 晋 冀 蒙 辽 吉 黑 沪 苏 浙 皖 闽 赣 鲁 豫 鄂 湘 粤 桂 琼 渝 川 贵 云 藏 陕 甘 青 宁 新</p>\n<p>发证机关代码：</p>\n<p>ABCDEFGH JKLMN PQRSTUVWXY </p>\n<ul>\n<li>说明：无 I, O , Z 三个字母。其中O和Z属于特殊车牌类型，见其它类型说明。</li>\n</ul>\n<p>车牌号码：</p>\n<p>数字：0123456789</p>\n<p>字母：ABCDEFGH JKLNM PQRSTUVWXY</p>\n<p>说明：无 I, O 字母；</p>\n<h3 id=\"新能源车牌\"><a href=\"#新能源车牌\" class=\"headerlink\" title=\"新能源车牌\"></a>新能源车牌</h3><p>车牌号码长度：8 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n<th align=\"center\">第8位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">省份</td>\n<td align=\"center\">发证机关</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<p>新能源车牌现阶段号码长度为8位，按照现行新能源车牌号码规则：</p>\n<p>第3位：1-9DF</p>\n<p>第4位：1-9A-Z，无I、O字母；</p>\n<p>第5-7位：0-9</p>\n<p>第8位：1-9DF</p>\n<p>严格校验新能源车牌号码的约束规则：</p>\n<p>当第3位为D/F时，第4位可字母和数字，第5-8位必须纯数字；</p>\n<p>当第8位为D/F时，第3-7位必须纯数字；</p>\n<h3 id=\"1-2-民用特殊车牌规则\"><a href=\"#1-2-民用特殊车牌规则\" class=\"headerlink\" title=\"1.2 民用特殊车牌规则\"></a>1.2 民用特殊车牌规则</h3><p><strong>港澳车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">粤</td>\n<td align=\"center\">Z</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">[港澳]</td>\n</tr>\n</tbody></table>\n<p>第1、2位分别是“粤Z”，第7位为“港澳”。</p>\n<p><strong>教练车 - 学</strong><br>教练车号牌的第7位固定为“学”字，其它号码与普通民用车牌一致；</p>\n<p><strong>拖挂车 - 挂</strong><br>拖挂车的车厢，其号牌的第7位固定为“挂”字，其它号码与普通民用车牌一致；</p>\n<p><strong>其它可能出现的字符：领试超练</strong><br>其号牌的第7位固定为“领试超练”某个字，其它号码与普通民用车牌一致；</p>\n<p><strong>民航内部车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">民</td>\n<td align=\"center\">航</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<p><strong>使馆车牌</strong><br>车牌号码长度：7 位</p>\n<ul>\n<li>新式使馆车牌号码格式：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[1-3]</td>\n<td align=\"center\">数字</td>\n<td align=\"center\">数字</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">使</td>\n</tr>\n</tbody></table>\n<ul>\n<li>旧式使馆车牌号码格式：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">使</td>\n<td align=\"center\">[1-3]</td>\n<td align=\"center\">数字</td>\n<td align=\"center\">数字</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<p>这个类型的车牌于2017年5月左右取消，更换成新式使馆车牌。参见新闻链接:<a href=\"http://society.cnr.cn/js/20170214/t20170214_523597660.html\">http://society.cnr.cn/js/20170214/t20170214_523597660.html</a></p>\n<h3 id=\"1-3-警队车牌规则\"><a href=\"#1-3-警队车牌规则\" class=\"headerlink\" title=\"1.3 警队车牌规则\"></a>1.3 警队车牌规则</h3><p>警队车牌包括四种车牌：</p>\n<p>地方武警车牌；</p>\n<p>武警总队车牌；</p>\n<p>普通警察车牌；</p>\n<p>O字警察车牌；</p>\n<p><strong>地方武警车牌</strong><br>车牌号码长度：8 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n<th align=\"center\">第8位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">W</td>\n<td align=\"center\">J</td>\n<td align=\"center\">省份简称</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其中号码字段，保持与普通车牌号码一致。</li>\n</ul>\n<p>参考资料：武警部队于6月1日正式启用新式车辆牌证</p>\n<p>例如：</p>\n<ul>\n<li>WJ京12345 </li>\n<li>WJ粤12345</li>\n</ul>\n<p><strong>武警总队车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">W</td>\n<td align=\"center\">J</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其中号码字段，保持与普通车牌号码一致。</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li>WJ1234J</li>\n<li>WJ95001</li>\n</ul>\n<p><strong>普通警察车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">省份</td>\n<td align=\"center\">发证机关</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">警</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其中第7位固定为“警”字，其它位置与普通车牌号码一致；</li>\n</ul>\n<p><strong>O字车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">省份</td>\n<td align=\"center\">O</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其中第1位固定为字母“O”，其它位置与普通车牌号码一致。</li>\n</ul>\n<p>注：此类似车牌已基本在全国范围内取消，但部分地区仍有使用情况。</p>\n<h3 id=\"1-4-军队车牌规则\"><a href=\"#1-4-军队车牌规则\" class=\"headerlink\" title=\"1.4 军队车牌规则\"></a>1.4 军队车牌规则</h3><p>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">军区军种代码</td>\n<td align=\"center\">单位代码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<p>军区代码：</p>\n<p>QVKHBSLJNGCEZ</p>\n<p>代表各大军区、总部、军种：</p>\n<p>Q 战区首字母（新式）</p>\n<p>VKHBSLJNGCEZ 旧式军区车牌前缀。后期根据军队车牌情况可能只保存“Q”字母。</p>\n<p>单位代码：</p>\n<p>与普通民用车牌发证机关代码的字母一致，未做严格限制。</p>\n<h2 id=\"二、统计表\"><a href=\"#二、统计表\" class=\"headerlink\" title=\"二、统计表\"></a>二、统计表</h2><p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1ge50m1n52rj21390o1gsf.jpg\" alt=\"IMG_3445.JPG\"></p>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h2 id=\"中国车牌号码规则\"><a href=\"#中国车牌号码规则\" class=\"headerlink\" title=\"中国车牌号码规则\"></a>中国车牌号码规则</h2><h3 id=\"一、车牌号码规则\"><a href=\"#一、车牌号码规则\" class=\"headerlink\" title=\"一、车牌号码规则\"></a>一、车牌号码规则</h3><h4 id=\"1-1-民用车牌规则\"><a href=\"#1-1-民用车牌规则\" class=\"headerlink\" title=\"1.1 民用车牌规则\"></a>1.1 民用车牌规则</h4><h3 id=\"普通车牌（蓝牌、黄牌）\"><a href=\"#普通车牌（蓝牌、黄牌）\" class=\"headerlink\" title=\"普通车牌（蓝牌、黄牌）\"></a>普通车牌（蓝牌、黄牌）</h3><p>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">省份简称</td>\n<td align=\"center\">发证机关代码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<ul>\n<li>黑底白字是外资企业的车</li>\n</ul>\n<p>省份简称：<br>京 津 晋 冀 蒙 辽 吉 黑 沪 苏 浙 皖 闽 赣 鲁 豫 鄂 湘 粤 桂 琼 渝 川 贵 云 藏 陕 甘 青 宁 新</p>\n<p>发证机关代码：</p>\n<p>ABCDEFGH JKLMN PQRSTUVWXY </p>\n<ul>\n<li>说明：无 I, O , Z 三个字母。其中O和Z属于特殊车牌类型，见其它类型说明。</li>\n</ul>\n<p>车牌号码：</p>\n<p>数字：0123456789</p>\n<p>字母：ABCDEFGH JKLNM PQRSTUVWXY</p>\n<p>说明：无 I, O 字母；</p>\n<h3 id=\"新能源车牌\"><a href=\"#新能源车牌\" class=\"headerlink\" title=\"新能源车牌\"></a>新能源车牌</h3><p>车牌号码长度：8 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n<th align=\"center\">第8位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">省份</td>\n<td align=\"center\">发证机关</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<p>新能源车牌现阶段号码长度为8位，按照现行新能源车牌号码规则：</p>\n<p>第3位：1-9DF</p>\n<p>第4位：1-9A-Z，无I、O字母；</p>\n<p>第5-7位：0-9</p>\n<p>第8位：1-9DF</p>\n<p>严格校验新能源车牌号码的约束规则：</p>\n<p>当第3位为D/F时，第4位可字母和数字，第5-8位必须纯数字；</p>\n<p>当第8位为D/F时，第3-7位必须纯数字；</p>\n<h3 id=\"1-2-民用特殊车牌规则\"><a href=\"#1-2-民用特殊车牌规则\" class=\"headerlink\" title=\"1.2 民用特殊车牌规则\"></a>1.2 民用特殊车牌规则</h3><p><strong>港澳车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">粤</td>\n<td align=\"center\">Z</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">[港澳]</td>\n</tr>\n</tbody></table>\n<p>第1、2位分别是“粤Z”，第7位为“港澳”。</p>\n<p><strong>教练车 - 学</strong><br>教练车号牌的第7位固定为“学”字，其它号码与普通民用车牌一致；</p>\n<p><strong>拖挂车 - 挂</strong><br>拖挂车的车厢，其号牌的第7位固定为“挂”字，其它号码与普通民用车牌一致；</p>\n<p><strong>其它可能出现的字符：领试超练</strong><br>其号牌的第7位固定为“领试超练”某个字，其它号码与普通民用车牌一致；</p>\n<p><strong>民航内部车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">民</td>\n<td align=\"center\">航</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<p><strong>使馆车牌</strong><br>车牌号码长度：7 位</p>\n<ul>\n<li>新式使馆车牌号码格式：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[1-3]</td>\n<td align=\"center\">数字</td>\n<td align=\"center\">数字</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">使</td>\n</tr>\n</tbody></table>\n<ul>\n<li>旧式使馆车牌号码格式：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">使</td>\n<td align=\"center\">[1-3]</td>\n<td align=\"center\">数字</td>\n<td align=\"center\">数字</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<p>这个类型的车牌于2017年5月左右取消，更换成新式使馆车牌。参见新闻链接:<a href=\"http://society.cnr.cn/js/20170214/t20170214_523597660.html\">http://society.cnr.cn/js/20170214/t20170214_523597660.html</a></p>\n<h3 id=\"1-3-警队车牌规则\"><a href=\"#1-3-警队车牌规则\" class=\"headerlink\" title=\"1.3 警队车牌规则\"></a>1.3 警队车牌规则</h3><p>警队车牌包括四种车牌：</p>\n<p>地方武警车牌；</p>\n<p>武警总队车牌；</p>\n<p>普通警察车牌；</p>\n<p>O字警察车牌；</p>\n<p><strong>地方武警车牌</strong><br>车牌号码长度：8 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n<th align=\"center\">第8位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">W</td>\n<td align=\"center\">J</td>\n<td align=\"center\">省份简称</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其中号码字段，保持与普通车牌号码一致。</li>\n</ul>\n<p>参考资料：武警部队于6月1日正式启用新式车辆牌证</p>\n<p>例如：</p>\n<ul>\n<li>WJ京12345 </li>\n<li>WJ粤12345</li>\n</ul>\n<p><strong>武警总队车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">W</td>\n<td align=\"center\">J</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其中号码字段，保持与普通车牌号码一致。</li>\n</ul>\n<p>例如：</p>\n<ul>\n<li>WJ1234J</li>\n<li>WJ95001</li>\n</ul>\n<p><strong>普通警察车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">省份</td>\n<td align=\"center\">发证机关</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">警</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其中第7位固定为“警”字，其它位置与普通车牌号码一致；</li>\n</ul>\n<p><strong>O字车牌</strong><br>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">省份</td>\n<td align=\"center\">O</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<ul>\n<li>其中第1位固定为字母“O”，其它位置与普通车牌号码一致。</li>\n</ul>\n<p>注：此类似车牌已基本在全国范围内取消，但部分地区仍有使用情况。</p>\n<h3 id=\"1-4-军队车牌规则\"><a href=\"#1-4-军队车牌规则\" class=\"headerlink\" title=\"1.4 军队车牌规则\"></a>1.4 军队车牌规则</h3><p>车牌号码长度：7 位</p>\n<p>车牌号码格式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">第1位</th>\n<th align=\"center\">第2位</th>\n<th align=\"center\">第3位</th>\n<th align=\"center\">第4位</th>\n<th align=\"center\">第5位</th>\n<th align=\"center\">第6位</th>\n<th align=\"center\">第7位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">军区军种代码</td>\n<td align=\"center\">单位代码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n<td align=\"center\">号码</td>\n</tr>\n</tbody></table>\n<p>军区代码：</p>\n<p>QVKHBSLJNGCEZ</p>\n<p>代表各大军区、总部、军种：</p>\n<p>Q 战区首字母（新式）</p>\n<p>VKHBSLJNGCEZ 旧式军区车牌前缀。后期根据军队车牌情况可能只保存“Q”字母。</p>\n<p>单位代码：</p>\n<p>与普通民用车牌发证机关代码的字母一致，未做严格限制。</p>\n<h2 id=\"二、统计表\"><a href=\"#二、统计表\" class=\"headerlink\" title=\"二、统计表\"></a>二、统计表</h2><p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1ge50m1n52rj21390o1gsf.jpg\" alt=\"IMG_3445.JPG\"></p>\n"},{"title":"你不知道浏览器debug方法","date":"2020-11-13T03:12:57.000Z","img":"/medias/featureimages/6.jpg","top":false,"cover":true,"coverImg":"/medias/featureimages6.jpg","toc":false,"mathjax":false,"summary":"因为工作中，经常涉及到前端后台数据交互，js测试，性能优化，前端js操作dom，ajax接口调试等都会比较麻烦，所以会前端调试非常重要，尤其对于工程优化方面能给我们一个简单直接的分析工具。","_content":"\n### 引言\n\n写本篇博客的由来是上次舜阳的性能调试引申出来的，本人顺带挖掘了一下除了常用的sorce debugger和console，我们的Chrome浏览器都还能帮我们在平时工作中提供那些好用的调试模式呢。如下图chrome调试模式有好多的内容，下面就一一列举一下。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/b798ddc332d26ebd.jpg)\n\n#### elements\n\n1.用来查看，修改页面上的元素；（包括DOM标签，以及css样式的查看，修改，还有相关盒模型的图形信息等）（我们常用的略过）\n2.查看dom上绑定的事件。\n3.拷贝都没节点。\n4.查看样式所在的文件路径。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/99cef2dabe985735.jpg)\n\n    ———handler是处理函数, 右键可以看到这个函数定义的位置, 一般 js 库绑定事件会包一层, 所以这里很难找到对应handler\n\n    ———isAtribute 表明事件是否通过 html 属性(类似onClick)形式绑定的\n\n    ———useCapture 是 addEventListener 的第三个参数, 说明事件是以 冒泡 还是 捕获 顺序执行\n#### console\n\n1.用来吐出代码中console的日志有（log、gruop、error等方法，具体可自行查找）\n2.除了1我们还可以在里面执行一些测试代码和方法。\n3.也可以吐出一些引用，查找方法对应的执行前后循序和位置。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/980bc3e8e3887079.jpg)\n\n#### Sources\n这个页面内我们可以找到当前浏览器页面中的js源文件，方便我们查看和调试。在正式发布的网站中我们看到的都是压缩过的代码，但是在调试的是后这里是本地的资源文件。\n\n我们可以点击下面的{}大括号按钮将代码转成可读格式，下图是两个不同的代码，由于线上的umi打包后太大了我就先截取了一个本地的图。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/0ecb959850f40374.jpg)\n\n![](https://ftp.bmp.ovh/imgs/2020/11/ae6885aabe64e56d.jpg)\n\n- Sinppets:\n\n可以执行代码片段：\n当我们想知道代码中的某个方法怎么是用或者是需要测试一个新的函数是否在这里可以调用时，会打开控制台有针对性的写一些调试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码.\n\n所以推荐使用Sources下面的左侧的Sinppets代码片段按钮这时候点击创建一个新的片段文件，写完测试代码后把鼠标放在新建文件上run，再结合控制台查看相关信息\n\n新建了一个名叫：a.js的片段代码，在你的项目环境页面内，该片段可执行项目内的方法；\n\n![](https://ftp.bmp.ovh/imgs/2020/11/59f7c6ef5e2f6e82.jpg)\n\n- Content scripts:\nChrome 的一种扩展程序，它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关文件调试，我们的项目里目前引入里jquery的相关方法。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/0044dc512a86138a.jpg)\n\n#### Network\n\n可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看等。\n1.可勾选单独的xhr，js，css等。\n2.可以在preview中查看json格式化的接口返回。\n\n这里重点提一下，在邮件copy中有一系列的选下，这里可以把这个请求的所有信息都copy出来，便于我们给后获发送。（主要用curl）\n![](https://ftp.bmp.ovh/imgs/2020/11/07d6f18ff7553c44.jpg)\n\n#### Performance\n\n时间表可以记录和运行分析应用程序所有的活动，为了使的记录页面的交互，打开时间轴面板，然后按开始录制录制按钮（），或者通过键入键盘快捷键Cmd的 +E（Mac）或按Ctrl +E（Windows / Linux版）。这个记录按钮会从灰色变成红色，而Timeline将开始从你的页面获取时间线（timeline）。在你的应用中完成一些操作，记录到一些数据之后，再一次点击按钮来停止记录。这个分析会有点慢。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/8a4a398265e0e37d.jpg)\n\n第一个框里是概述，这里可以大致看到页面的性能和执行效率。\n\n第二个框里是event，即是事件监控。这是CPU的堆栈跟踪的可视化，绿色表示媒体时间，红色表示负载事件，蓝色表示DOM事件。\n\n第三个框里表示存储。\n\n第四个框里是详细信息，这里会显示事件的详细信息。\n\n上图可见脚本15.68s，渲染时间2.7s，绘制时间0.46s说明我们脚本占用的比较大的资源。通过这个可以分析如果系统反应慢主要症状点在那个过程，通过如下分析可以相应的给出一些策略。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/00049d68d16f1bda.jpg)\n\n在call tree中可以看到整个过程各个环节函数和方法调用情况\n\n![](https://ftp.bmp.ovh/imgs/2020/11/d9ab72aa46ff6e0a.jpg)\n\n#### Memory\n会列出所有的资源占用空间。\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/b20d67d4-91bd-449f-99c2-23ee9fef8601.jpg)\n\n#### Security\n可以告诉你这个网站的安全性，查看有效的证书等。\n\n#### Application\n会列出所有的资源，以及HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除 不做过多介绍\n[![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/6a0eef45-e921-4543-8d13-09c8749a5aae.jpg)](https://imgbed.cn)","source":"_posts/Browser-debug.md","raw":"---\ntitle: 你不知道浏览器debug方法\ndate: 2020-11-13 11:12:57\nimg: /medias/featureimages/6.jpg\ntop: false\ncover: true\ncoverImg: /medias/featureimages6.jpg\ntoc: false\nmathjax: false\nsummary: 因为工作中，经常涉及到前端后台数据交互，js测试，性能优化，前端js操作dom，ajax接口调试等都会比较麻烦，所以会前端调试非常重要，尤其对于工程优化方面能给我们一个简单直接的分析工具。\ncategories: 前端\ntags:\n- debug\n- chrome\n---\n\n### 引言\n\n写本篇博客的由来是上次舜阳的性能调试引申出来的，本人顺带挖掘了一下除了常用的sorce debugger和console，我们的Chrome浏览器都还能帮我们在平时工作中提供那些好用的调试模式呢。如下图chrome调试模式有好多的内容，下面就一一列举一下。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/b798ddc332d26ebd.jpg)\n\n#### elements\n\n1.用来查看，修改页面上的元素；（包括DOM标签，以及css样式的查看，修改，还有相关盒模型的图形信息等）（我们常用的略过）\n2.查看dom上绑定的事件。\n3.拷贝都没节点。\n4.查看样式所在的文件路径。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/99cef2dabe985735.jpg)\n\n    ———handler是处理函数, 右键可以看到这个函数定义的位置, 一般 js 库绑定事件会包一层, 所以这里很难找到对应handler\n\n    ———isAtribute 表明事件是否通过 html 属性(类似onClick)形式绑定的\n\n    ———useCapture 是 addEventListener 的第三个参数, 说明事件是以 冒泡 还是 捕获 顺序执行\n#### console\n\n1.用来吐出代码中console的日志有（log、gruop、error等方法，具体可自行查找）\n2.除了1我们还可以在里面执行一些测试代码和方法。\n3.也可以吐出一些引用，查找方法对应的执行前后循序和位置。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/980bc3e8e3887079.jpg)\n\n#### Sources\n这个页面内我们可以找到当前浏览器页面中的js源文件，方便我们查看和调试。在正式发布的网站中我们看到的都是压缩过的代码，但是在调试的是后这里是本地的资源文件。\n\n我们可以点击下面的{}大括号按钮将代码转成可读格式，下图是两个不同的代码，由于线上的umi打包后太大了我就先截取了一个本地的图。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/0ecb959850f40374.jpg)\n\n![](https://ftp.bmp.ovh/imgs/2020/11/ae6885aabe64e56d.jpg)\n\n- Sinppets:\n\n可以执行代码片段：\n当我们想知道代码中的某个方法怎么是用或者是需要测试一个新的函数是否在这里可以调用时，会打开控制台有针对性的写一些调试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码.\n\n所以推荐使用Sources下面的左侧的Sinppets代码片段按钮这时候点击创建一个新的片段文件，写完测试代码后把鼠标放在新建文件上run，再结合控制台查看相关信息\n\n新建了一个名叫：a.js的片段代码，在你的项目环境页面内，该片段可执行项目内的方法；\n\n![](https://ftp.bmp.ovh/imgs/2020/11/59f7c6ef5e2f6e82.jpg)\n\n- Content scripts:\nChrome 的一种扩展程序，它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关文件调试，我们的项目里目前引入里jquery的相关方法。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/0044dc512a86138a.jpg)\n\n#### Network\n\n可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看等。\n1.可勾选单独的xhr，js，css等。\n2.可以在preview中查看json格式化的接口返回。\n\n这里重点提一下，在邮件copy中有一系列的选下，这里可以把这个请求的所有信息都copy出来，便于我们给后获发送。（主要用curl）\n![](https://ftp.bmp.ovh/imgs/2020/11/07d6f18ff7553c44.jpg)\n\n#### Performance\n\n时间表可以记录和运行分析应用程序所有的活动，为了使的记录页面的交互，打开时间轴面板，然后按开始录制录制按钮（），或者通过键入键盘快捷键Cmd的 +E（Mac）或按Ctrl +E（Windows / Linux版）。这个记录按钮会从灰色变成红色，而Timeline将开始从你的页面获取时间线（timeline）。在你的应用中完成一些操作，记录到一些数据之后，再一次点击按钮来停止记录。这个分析会有点慢。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/8a4a398265e0e37d.jpg)\n\n第一个框里是概述，这里可以大致看到页面的性能和执行效率。\n\n第二个框里是event，即是事件监控。这是CPU的堆栈跟踪的可视化，绿色表示媒体时间，红色表示负载事件，蓝色表示DOM事件。\n\n第三个框里表示存储。\n\n第四个框里是详细信息，这里会显示事件的详细信息。\n\n上图可见脚本15.68s，渲染时间2.7s，绘制时间0.46s说明我们脚本占用的比较大的资源。通过这个可以分析如果系统反应慢主要症状点在那个过程，通过如下分析可以相应的给出一些策略。\n\n![](https://ftp.bmp.ovh/imgs/2020/11/00049d68d16f1bda.jpg)\n\n在call tree中可以看到整个过程各个环节函数和方法调用情况\n\n![](https://ftp.bmp.ovh/imgs/2020/11/d9ab72aa46ff6e0a.jpg)\n\n#### Memory\n会列出所有的资源占用空间。\n\n![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/b20d67d4-91bd-449f-99c2-23ee9fef8601.jpg)\n\n#### Security\n可以告诉你这个网站的安全性，查看有效的证书等。\n\n#### Application\n会列出所有的资源，以及HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除 不做过多介绍\n[![](https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/6a0eef45-e921-4543-8d13-09c8749a5aae.jpg)](https://imgbed.cn)","slug":"Browser-debug","published":1,"updated":"2020-12-28T15:59:09.806Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txclj0008hi606tj66zdo","content":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>写本篇博客的由来是上次舜阳的性能调试引申出来的，本人顺带挖掘了一下除了常用的sorce debugger和console，我们的Chrome浏览器都还能帮我们在平时工作中提供那些好用的调试模式呢。如下图chrome调试模式有好多的内容，下面就一一列举一下。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/b798ddc332d26ebd.jpg\" alt=\"\"></p>\n<h4 id=\"elements\"><a href=\"#elements\" class=\"headerlink\" title=\"elements\"></a>elements</h4><p>1.用来查看，修改页面上的元素；（包括DOM标签，以及css样式的查看，修改，还有相关盒模型的图形信息等）（我们常用的略过）<br>2.查看dom上绑定的事件。<br>3.拷贝都没节点。<br>4.查看样式所在的文件路径。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/99cef2dabe985735.jpg\" alt=\"\"></p>\n<pre><code>———handler是处理函数, 右键可以看到这个函数定义的位置, 一般 js 库绑定事件会包一层, 所以这里很难找到对应handler\n\n———isAtribute 表明事件是否通过 html 属性(类似onClick)形式绑定的\n\n———useCapture 是 addEventListener 的第三个参数, 说明事件是以 冒泡 还是 捕获 顺序执行</code></pre><h4 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h4><p>1.用来吐出代码中console的日志有（log、gruop、error等方法，具体可自行查找）<br>2.除了1我们还可以在里面执行一些测试代码和方法。<br>3.也可以吐出一些引用，查找方法对应的执行前后循序和位置。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/980bc3e8e3887079.jpg\" alt=\"\"></p>\n<h4 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h4><p>这个页面内我们可以找到当前浏览器页面中的js源文件，方便我们查看和调试。在正式发布的网站中我们看到的都是压缩过的代码，但是在调试的是后这里是本地的资源文件。</p>\n<p>我们可以点击下面的{}大括号按钮将代码转成可读格式，下图是两个不同的代码，由于线上的umi打包后太大了我就先截取了一个本地的图。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/0ecb959850f40374.jpg\" alt=\"\"></p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/ae6885aabe64e56d.jpg\" alt=\"\"></p>\n<ul>\n<li>Sinppets:</li>\n</ul>\n<p>可以执行代码片段：<br>当我们想知道代码中的某个方法怎么是用或者是需要测试一个新的函数是否在这里可以调用时，会打开控制台有针对性的写一些调试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码.</p>\n<p>所以推荐使用Sources下面的左侧的Sinppets代码片段按钮这时候点击创建一个新的片段文件，写完测试代码后把鼠标放在新建文件上run，再结合控制台查看相关信息</p>\n<p>新建了一个名叫：a.js的片段代码，在你的项目环境页面内，该片段可执行项目内的方法；</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/59f7c6ef5e2f6e82.jpg\" alt=\"\"></p>\n<ul>\n<li>Content scripts:<br>Chrome 的一种扩展程序，它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关文件调试，我们的项目里目前引入里jquery的相关方法。</li>\n</ul>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/0044dc512a86138a.jpg\" alt=\"\"></p>\n<h4 id=\"Network\"><a href=\"#Network\" class=\"headerlink\" title=\"Network\"></a>Network</h4><p>可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看等。<br>1.可勾选单独的xhr，js，css等。<br>2.可以在preview中查看json格式化的接口返回。</p>\n<p>这里重点提一下，在邮件copy中有一系列的选下，这里可以把这个请求的所有信息都copy出来，便于我们给后获发送。（主要用curl）<br><img src=\"https://ftp.bmp.ovh/imgs/2020/11/07d6f18ff7553c44.jpg\" alt=\"\"></p>\n<h4 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h4><p>时间表可以记录和运行分析应用程序所有的活动，为了使的记录页面的交互，打开时间轴面板，然后按开始录制录制按钮（），或者通过键入键盘快捷键Cmd的 +E（Mac）或按Ctrl +E（Windows / Linux版）。这个记录按钮会从灰色变成红色，而Timeline将开始从你的页面获取时间线（timeline）。在你的应用中完成一些操作，记录到一些数据之后，再一次点击按钮来停止记录。这个分析会有点慢。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/8a4a398265e0e37d.jpg\" alt=\"\"></p>\n<p>第一个框里是概述，这里可以大致看到页面的性能和执行效率。</p>\n<p>第二个框里是event，即是事件监控。这是CPU的堆栈跟踪的可视化，绿色表示媒体时间，红色表示负载事件，蓝色表示DOM事件。</p>\n<p>第三个框里表示存储。</p>\n<p>第四个框里是详细信息，这里会显示事件的详细信息。</p>\n<p>上图可见脚本15.68s，渲染时间2.7s，绘制时间0.46s说明我们脚本占用的比较大的资源。通过这个可以分析如果系统反应慢主要症状点在那个过程，通过如下分析可以相应的给出一些策略。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/00049d68d16f1bda.jpg\" alt=\"\"></p>\n<p>在call tree中可以看到整个过程各个环节函数和方法调用情况</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/d9ab72aa46ff6e0a.jpg\" alt=\"\"></p>\n<h4 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h4><p>会列出所有的资源占用空间。</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/b20d67d4-91bd-449f-99c2-23ee9fef8601.jpg\" alt=\"\"></p>\n<h4 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h4><p>可以告诉你这个网站的安全性，查看有效的证书等。</p>\n<h4 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h4><p>会列出所有的资源，以及HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除 不做过多介绍<br><a href=\"https://imgbed.cn\"><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/6a0eef45-e921-4543-8d13-09c8749a5aae.jpg\" alt=\"\"></a></p>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>写本篇博客的由来是上次舜阳的性能调试引申出来的，本人顺带挖掘了一下除了常用的sorce debugger和console，我们的Chrome浏览器都还能帮我们在平时工作中提供那些好用的调试模式呢。如下图chrome调试模式有好多的内容，下面就一一列举一下。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/b798ddc332d26ebd.jpg\" alt=\"\"></p>\n<h4 id=\"elements\"><a href=\"#elements\" class=\"headerlink\" title=\"elements\"></a>elements</h4><p>1.用来查看，修改页面上的元素；（包括DOM标签，以及css样式的查看，修改，还有相关盒模型的图形信息等）（我们常用的略过）<br>2.查看dom上绑定的事件。<br>3.拷贝都没节点。<br>4.查看样式所在的文件路径。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/99cef2dabe985735.jpg\" alt=\"\"></p>\n<pre><code>———handler是处理函数, 右键可以看到这个函数定义的位置, 一般 js 库绑定事件会包一层, 所以这里很难找到对应handler\n\n———isAtribute 表明事件是否通过 html 属性(类似onClick)形式绑定的\n\n———useCapture 是 addEventListener 的第三个参数, 说明事件是以 冒泡 还是 捕获 顺序执行</code></pre><h4 id=\"console\"><a href=\"#console\" class=\"headerlink\" title=\"console\"></a>console</h4><p>1.用来吐出代码中console的日志有（log、gruop、error等方法，具体可自行查找）<br>2.除了1我们还可以在里面执行一些测试代码和方法。<br>3.也可以吐出一些引用，查找方法对应的执行前后循序和位置。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/980bc3e8e3887079.jpg\" alt=\"\"></p>\n<h4 id=\"Sources\"><a href=\"#Sources\" class=\"headerlink\" title=\"Sources\"></a>Sources</h4><p>这个页面内我们可以找到当前浏览器页面中的js源文件，方便我们查看和调试。在正式发布的网站中我们看到的都是压缩过的代码，但是在调试的是后这里是本地的资源文件。</p>\n<p>我们可以点击下面的{}大括号按钮将代码转成可读格式，下图是两个不同的代码，由于线上的umi打包后太大了我就先截取了一个本地的图。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/0ecb959850f40374.jpg\" alt=\"\"></p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/ae6885aabe64e56d.jpg\" alt=\"\"></p>\n<ul>\n<li>Sinppets:</li>\n</ul>\n<p>可以执行代码片段：<br>当我们想知道代码中的某个方法怎么是用或者是需要测试一个新的函数是否在这里可以调用时，会打开控制台有针对性的写一些调试代码，或者想测试一下刚刚写的方法是否会出现期待的样子，但是控制台一打回车本想换行但是却执行刚写的半截代码.</p>\n<p>所以推荐使用Sources下面的左侧的Sinppets代码片段按钮这时候点击创建一个新的片段文件，写完测试代码后把鼠标放在新建文件上run，再结合控制台查看相关信息</p>\n<p>新建了一个名叫：a.js的片段代码，在你的项目环境页面内，该片段可执行项目内的方法；</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/59f7c6ef5e2f6e82.jpg\" alt=\"\"></p>\n<ul>\n<li>Content scripts:<br>Chrome 的一种扩展程序，它是按照扩展的ID来组织的，这些文件也是嵌入在页面中的资源，这类文件可以读写和操作我们的资源，需要调试这些扩展文件，则可以在这个目录下打开相关文件调试，我们的项目里目前引入里jquery的相关方法。</li>\n</ul>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/0044dc512a86138a.jpg\" alt=\"\"></p>\n<h4 id=\"Network\"><a href=\"#Network\" class=\"headerlink\" title=\"Network\"></a>Network</h4><p>可以看到所有的资源请求，包括网络请求，图片资源，html,css，js文件等请求，可以根据需求筛选请求项，一般多用于网络请求的查看和分析，分析后端接口是否正确传输，获取的数据是否准确，请求头，请求参数的查看等。<br>1.可勾选单独的xhr，js，css等。<br>2.可以在preview中查看json格式化的接口返回。</p>\n<p>这里重点提一下，在邮件copy中有一系列的选下，这里可以把这个请求的所有信息都copy出来，便于我们给后获发送。（主要用curl）<br><img src=\"https://ftp.bmp.ovh/imgs/2020/11/07d6f18ff7553c44.jpg\" alt=\"\"></p>\n<h4 id=\"Performance\"><a href=\"#Performance\" class=\"headerlink\" title=\"Performance\"></a>Performance</h4><p>时间表可以记录和运行分析应用程序所有的活动，为了使的记录页面的交互，打开时间轴面板，然后按开始录制录制按钮（），或者通过键入键盘快捷键Cmd的 +E（Mac）或按Ctrl +E（Windows / Linux版）。这个记录按钮会从灰色变成红色，而Timeline将开始从你的页面获取时间线（timeline）。在你的应用中完成一些操作，记录到一些数据之后，再一次点击按钮来停止记录。这个分析会有点慢。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/8a4a398265e0e37d.jpg\" alt=\"\"></p>\n<p>第一个框里是概述，这里可以大致看到页面的性能和执行效率。</p>\n<p>第二个框里是event，即是事件监控。这是CPU的堆栈跟踪的可视化，绿色表示媒体时间，红色表示负载事件，蓝色表示DOM事件。</p>\n<p>第三个框里表示存储。</p>\n<p>第四个框里是详细信息，这里会显示事件的详细信息。</p>\n<p>上图可见脚本15.68s，渲染时间2.7s，绘制时间0.46s说明我们脚本占用的比较大的资源。通过这个可以分析如果系统反应慢主要症状点在那个过程，通过如下分析可以相应的给出一些策略。</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/00049d68d16f1bda.jpg\" alt=\"\"></p>\n<p>在call tree中可以看到整个过程各个环节函数和方法调用情况</p>\n<p><img src=\"https://ftp.bmp.ovh/imgs/2020/11/d9ab72aa46ff6e0a.jpg\" alt=\"\"></p>\n<h4 id=\"Memory\"><a href=\"#Memory\" class=\"headerlink\" title=\"Memory\"></a>Memory</h4><p>会列出所有的资源占用空间。</p>\n<p><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/b20d67d4-91bd-449f-99c2-23ee9fef8601.jpg\" alt=\"\"></p>\n<h4 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h4><p>可以告诉你这个网站的安全性，查看有效的证书等。</p>\n<h4 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h4><p>会列出所有的资源，以及HTML5的Database和LocalStore等，你可以对存储的内容编辑和删除 不做过多介绍<br><a href=\"https://imgbed.cn\"><img src=\"https://vkceyugu.cdn.bspapp.com/VKCEYUGU-imgbed/6a0eef45-e921-4543-8d13-09c8749a5aae.jpg\" alt=\"\"></a></p>\n"},{"title":"魔方还原方法","date":"2020-01-13T14:32:19.000Z","img":"http://ww1.sinaimg.cn/large/987eaf20ly1geatin58vpj20dw08owg3.jpg","top":false,"cover":false,"coverImg":"http://ww1.sinaimg.cn/large/987eaf20ly1geatin58vpj20dw08owg3.jpg","toc":true,"mathjax":false,"summary":"本文主要介绍了三阶魔方的还原方法，作者调研了好多中方法，本文中的是最简单易学的方法，但不是最快速的。","_content":"\n## 魔方还原\n\n三阶魔方还原的原则是，分层还原发，即先还原第一层，再第二层第三层的原则。\n下面我们详细介绍各层的还原方法\n\n### 第一层还原\n\n- 第一层还原是最简单的，网上的方法也是有很多种，不用方法自己也可以实现，我们这里就不做讲解\n- 这里给大家推介几个链接，有必要就自行查考\n\n    1.https://baijiahao.baidu.com/s?id=1586020045673476817&wfr=spider&for=pc\n    2.https://www.bilibili.com/video/av45061142\n\n### 第二层还原\n\n- 第二层的原则是倒T字型方法\n\n![示例.png](http://ww1.sinaimg.cn/large/987eaf20ly1geavh81reuj208a08h74p.jpg)\n\n> ***先逼逼一下口诀里的规则：***\nU：代表 up 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U'：代表up 逆时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;U2：代表up 顺时针转 180度\nR：代表 right 顺时针转 90度&nbsp;&nbsp;R'：代表 right 逆时针转 90度\nL：代表 left 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;L'：代表 left 逆时针转 90度\nF：代表 face 顺时针转 90度&nbsp;&nbsp;&nbsp;F'：代表 face 逆时针转 90度\n\n通过以下两种就可以实现第二层\n\n#### (1)情况一\n\n>口诀：U -> R -> U’ -> R’ -> U’ -> F’ -> U -> F\n\n![第二层还原 1.png](http://ww1.sinaimg.cn/large/987eaf20ly1geavamcwvyj208o08jaaf.jpg)\n\n#### (2)情况二\n\n>口诀：U’  F’  U  F  U  R  U’  R’\n\n![第二层还原 2.png](http://ww1.sinaimg.cn/large/987eaf20ly1geav9buapsj208a08h3yx.jpg)\n\n#### 第二层成品\n\n![第二层成品 3.png](http://ww1.sinaimg.cn/large/987eaf20ly1geavqtrpo6j206y081aae.jpg)\n\n### 第三层还原\n\n第三层一共分4个步骤来还原\n\n#### 第一步\n\n>该步骤是实现顶部出现“+”格子，其他色块不考虑\n>口诀：F -> U -> R -> U’ -> R’ -> F’\n\n![十字.jpg](http://ww1.sinaimg.cn/large/987eaf20ly1gebkyytazvj20zy0ceafg.jpg)\n#### 第二步\n\n>该步骤是实现顶部面同色，其他侧面色块不考虑\n>口诀：R’ -> U’ -> R -> U’ -> R’ -> U2 -> R\n>该步骤需要注意的是，但使用上面步骤出现顶部面是“小鱼”的情况后，再以下图中的方位继续进行上面的公式直到顶部面为同样的色\n\n![顶部面.png](http://ww1.sinaimg.cn/large/987eaf20ly1geaw0pin1gj21140cuwlc.jpg)\n\n#### 第三步\n\n>该步骤是实现魔方的顶角互换，其他侧面色块不考虑\n>口诀：R -> U2 -> R’ -> U’ -> R -> U2 -> L’ -> U -> R’ -> U’ -> L\n\n![顶角互换.png](http://ww1.sinaimg.cn/large/987eaf20ly1geaw5q1g09j206y07iq3a.jpg)\n\n\n#### 第四步\n\n>该步骤是实现魔方的棱互换，其他侧面色块不考虑\n>本不走下图有点问题。face面有变化\n>口诀：F2 -> U -> L -> R’ -> F2 -> L’ -> R -> U -> F2\n\n![棱互换.png](http://ww1.sinaimg.cn/large/987eaf20ly1gebl80p7k0j206z07ldga.jpg)\n\n- 综合上步就可以实现魔方还原了。小伙伴们还不快试一下💪💪💪。","source":"_posts/moFang.md","raw":"---\ntitle: 魔方还原方法\ndate: 2020-01-13 22:32:19\nimg: http://ww1.sinaimg.cn/large/987eaf20ly1geatin58vpj20dw08owg3.jpg\ntop: false\ncover: false\ncoverImg: http://ww1.sinaimg.cn/large/987eaf20ly1geatin58vpj20dw08owg3.jpg\ntoc: true\nmathjax: false\nsummary: 本文主要介绍了三阶魔方的还原方法，作者调研了好多中方法，本文中的是最简单易学的方法，但不是最快速的。\ncategories: 人文\ntags:\n- 常识\n# password: c9dc1fb0c089d73368d1bfcd544239c8f3c5bee04cf16f2cbc3eaf1463214250\n# 3345\n---\n\n## 魔方还原\n\n三阶魔方还原的原则是，分层还原发，即先还原第一层，再第二层第三层的原则。\n下面我们详细介绍各层的还原方法\n\n### 第一层还原\n\n- 第一层还原是最简单的，网上的方法也是有很多种，不用方法自己也可以实现，我们这里就不做讲解\n- 这里给大家推介几个链接，有必要就自行查考\n\n    1.https://baijiahao.baidu.com/s?id=1586020045673476817&wfr=spider&for=pc\n    2.https://www.bilibili.com/video/av45061142\n\n### 第二层还原\n\n- 第二层的原则是倒T字型方法\n\n![示例.png](http://ww1.sinaimg.cn/large/987eaf20ly1geavh81reuj208a08h74p.jpg)\n\n> ***先逼逼一下口诀里的规则：***\nU：代表 up 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U'：代表up 逆时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;U2：代表up 顺时针转 180度\nR：代表 right 顺时针转 90度&nbsp;&nbsp;R'：代表 right 逆时针转 90度\nL：代表 left 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;L'：代表 left 逆时针转 90度\nF：代表 face 顺时针转 90度&nbsp;&nbsp;&nbsp;F'：代表 face 逆时针转 90度\n\n通过以下两种就可以实现第二层\n\n#### (1)情况一\n\n>口诀：U -> R -> U’ -> R’ -> U’ -> F’ -> U -> F\n\n![第二层还原 1.png](http://ww1.sinaimg.cn/large/987eaf20ly1geavamcwvyj208o08jaaf.jpg)\n\n#### (2)情况二\n\n>口诀：U’  F’  U  F  U  R  U’  R’\n\n![第二层还原 2.png](http://ww1.sinaimg.cn/large/987eaf20ly1geav9buapsj208a08h3yx.jpg)\n\n#### 第二层成品\n\n![第二层成品 3.png](http://ww1.sinaimg.cn/large/987eaf20ly1geavqtrpo6j206y081aae.jpg)\n\n### 第三层还原\n\n第三层一共分4个步骤来还原\n\n#### 第一步\n\n>该步骤是实现顶部出现“+”格子，其他色块不考虑\n>口诀：F -> U -> R -> U’ -> R’ -> F’\n\n![十字.jpg](http://ww1.sinaimg.cn/large/987eaf20ly1gebkyytazvj20zy0ceafg.jpg)\n#### 第二步\n\n>该步骤是实现顶部面同色，其他侧面色块不考虑\n>口诀：R’ -> U’ -> R -> U’ -> R’ -> U2 -> R\n>该步骤需要注意的是，但使用上面步骤出现顶部面是“小鱼”的情况后，再以下图中的方位继续进行上面的公式直到顶部面为同样的色\n\n![顶部面.png](http://ww1.sinaimg.cn/large/987eaf20ly1geaw0pin1gj21140cuwlc.jpg)\n\n#### 第三步\n\n>该步骤是实现魔方的顶角互换，其他侧面色块不考虑\n>口诀：R -> U2 -> R’ -> U’ -> R -> U2 -> L’ -> U -> R’ -> U’ -> L\n\n![顶角互换.png](http://ww1.sinaimg.cn/large/987eaf20ly1geaw5q1g09j206y07iq3a.jpg)\n\n\n#### 第四步\n\n>该步骤是实现魔方的棱互换，其他侧面色块不考虑\n>本不走下图有点问题。face面有变化\n>口诀：F2 -> U -> L -> R’ -> F2 -> L’ -> R -> U -> F2\n\n![棱互换.png](http://ww1.sinaimg.cn/large/987eaf20ly1gebl80p7k0j206z07ldga.jpg)\n\n- 综合上步就可以实现魔方还原了。小伙伴们还不快试一下💪💪💪。","slug":"moFang","published":1,"updated":"2020-04-30T12:08:21.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txclm000ahi606dsx6fd4","content":"<h2 id=\"魔方还原\"><a href=\"#魔方还原\" class=\"headerlink\" title=\"魔方还原\"></a>魔方还原</h2><p>三阶魔方还原的原则是，分层还原发，即先还原第一层，再第二层第三层的原则。<br>下面我们详细介绍各层的还原方法</p>\n<h3 id=\"第一层还原\"><a href=\"#第一层还原\" class=\"headerlink\" title=\"第一层还原\"></a>第一层还原</h3><ul>\n<li><p>第一层还原是最简单的，网上的方法也是有很多种，不用方法自己也可以实现，我们这里就不做讲解</p>\n</li>\n<li><p>这里给大家推介几个链接，有必要就自行查考</p>\n<p>  1.<a href=\"https://baijiahao.baidu.com/s?id=1586020045673476817&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1586020045673476817&amp;wfr=spider&amp;for=pc</a><br>  2.<a href=\"https://www.bilibili.com/video/av45061142\">https://www.bilibili.com/video/av45061142</a></p>\n</li>\n</ul>\n<h3 id=\"第二层还原\"><a href=\"#第二层还原\" class=\"headerlink\" title=\"第二层还原\"></a>第二层还原</h3><ul>\n<li>第二层的原则是倒T字型方法</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geavh81reuj208a08h74p.jpg\" alt=\"示例.png\"></p>\n<blockquote>\n<p><strong><em>先逼逼一下口诀里的规则：</em></strong><br>U：代表 up 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U’：代表up 逆时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;U2：代表up 顺时针转 180度<br>R：代表 right 顺时针转 90度&nbsp;&nbsp;R’：代表 right 逆时针转 90度<br>L：代表 left 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;L’：代表 left 逆时针转 90度<br>F：代表 face 顺时针转 90度&nbsp;&nbsp;&nbsp;F’：代表 face 逆时针转 90度</p>\n</blockquote>\n<p>通过以下两种就可以实现第二层</p>\n<h4 id=\"1-情况一\"><a href=\"#1-情况一\" class=\"headerlink\" title=\"(1)情况一\"></a>(1)情况一</h4><blockquote>\n<p>口诀：U -&gt; R -&gt; U’ -&gt; R’ -&gt; U’ -&gt; F’ -&gt; U -&gt; F</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geavamcwvyj208o08jaaf.jpg\" alt=\"第二层还原 1.png\"></p>\n<h4 id=\"2-情况二\"><a href=\"#2-情况二\" class=\"headerlink\" title=\"(2)情况二\"></a>(2)情况二</h4><blockquote>\n<p>口诀：U’  F’  U  F  U  R  U’  R’</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geav9buapsj208a08h3yx.jpg\" alt=\"第二层还原 2.png\"></p>\n<h4 id=\"第二层成品\"><a href=\"#第二层成品\" class=\"headerlink\" title=\"第二层成品\"></a>第二层成品</h4><p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geavqtrpo6j206y081aae.jpg\" alt=\"第二层成品 3.png\"></p>\n<h3 id=\"第三层还原\"><a href=\"#第三层还原\" class=\"headerlink\" title=\"第三层还原\"></a>第三层还原</h3><p>第三层一共分4个步骤来还原</p>\n<h4 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h4><blockquote>\n<p>该步骤是实现顶部出现“+”格子，其他色块不考虑<br>口诀：F -&gt; U -&gt; R -&gt; U’ -&gt; R’ -&gt; F’</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1gebkyytazvj20zy0ceafg.jpg\" alt=\"十字.jpg\"></p>\n<h4 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h4><blockquote>\n<p>该步骤是实现顶部面同色，其他侧面色块不考虑<br>口诀：R’ -&gt; U’ -&gt; R -&gt; U’ -&gt; R’ -&gt; U2 -&gt; R<br>该步骤需要注意的是，但使用上面步骤出现顶部面是“小鱼”的情况后，再以下图中的方位继续进行上面的公式直到顶部面为同样的色</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geaw0pin1gj21140cuwlc.jpg\" alt=\"顶部面.png\"></p>\n<h4 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h4><blockquote>\n<p>该步骤是实现魔方的顶角互换，其他侧面色块不考虑<br>口诀：R -&gt; U2 -&gt; R’ -&gt; U’ -&gt; R -&gt; U2 -&gt; L’ -&gt; U -&gt; R’ -&gt; U’ -&gt; L</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geaw5q1g09j206y07iq3a.jpg\" alt=\"顶角互换.png\"></p>\n<h4 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h4><blockquote>\n<p>该步骤是实现魔方的棱互换，其他侧面色块不考虑<br>本不走下图有点问题。face面有变化<br>口诀：F2 -&gt; U -&gt; L -&gt; R’ -&gt; F2 -&gt; L’ -&gt; R -&gt; U -&gt; F2</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1gebl80p7k0j206z07ldga.jpg\" alt=\"棱互换.png\"></p>\n<ul>\n<li>综合上步就可以实现魔方还原了。小伙伴们还不快试一下💪💪💪。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h2 id=\"魔方还原\"><a href=\"#魔方还原\" class=\"headerlink\" title=\"魔方还原\"></a>魔方还原</h2><p>三阶魔方还原的原则是，分层还原发，即先还原第一层，再第二层第三层的原则。<br>下面我们详细介绍各层的还原方法</p>\n<h3 id=\"第一层还原\"><a href=\"#第一层还原\" class=\"headerlink\" title=\"第一层还原\"></a>第一层还原</h3><ul>\n<li><p>第一层还原是最简单的，网上的方法也是有很多种，不用方法自己也可以实现，我们这里就不做讲解</p>\n</li>\n<li><p>这里给大家推介几个链接，有必要就自行查考</p>\n<p>  1.<a href=\"https://baijiahao.baidu.com/s?id=1586020045673476817&amp;wfr=spider&amp;for=pc\">https://baijiahao.baidu.com/s?id=1586020045673476817&amp;wfr=spider&amp;for=pc</a><br>  2.<a href=\"https://www.bilibili.com/video/av45061142\">https://www.bilibili.com/video/av45061142</a></p>\n</li>\n</ul>\n<h3 id=\"第二层还原\"><a href=\"#第二层还原\" class=\"headerlink\" title=\"第二层还原\"></a>第二层还原</h3><ul>\n<li>第二层的原则是倒T字型方法</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geavh81reuj208a08h74p.jpg\" alt=\"示例.png\"></p>\n<blockquote>\n<p><strong><em>先逼逼一下口诀里的规则：</em></strong><br>U：代表 up 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;U’：代表up 逆时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;U2：代表up 顺时针转 180度<br>R：代表 right 顺时针转 90度&nbsp;&nbsp;R’：代表 right 逆时针转 90度<br>L：代表 left 顺时针转 90度&nbsp;&nbsp;&nbsp;&nbsp;L’：代表 left 逆时针转 90度<br>F：代表 face 顺时针转 90度&nbsp;&nbsp;&nbsp;F’：代表 face 逆时针转 90度</p>\n</blockquote>\n<p>通过以下两种就可以实现第二层</p>\n<h4 id=\"1-情况一\"><a href=\"#1-情况一\" class=\"headerlink\" title=\"(1)情况一\"></a>(1)情况一</h4><blockquote>\n<p>口诀：U -&gt; R -&gt; U’ -&gt; R’ -&gt; U’ -&gt; F’ -&gt; U -&gt; F</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geavamcwvyj208o08jaaf.jpg\" alt=\"第二层还原 1.png\"></p>\n<h4 id=\"2-情况二\"><a href=\"#2-情况二\" class=\"headerlink\" title=\"(2)情况二\"></a>(2)情况二</h4><blockquote>\n<p>口诀：U’  F’  U  F  U  R  U’  R’</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geav9buapsj208a08h3yx.jpg\" alt=\"第二层还原 2.png\"></p>\n<h4 id=\"第二层成品\"><a href=\"#第二层成品\" class=\"headerlink\" title=\"第二层成品\"></a>第二层成品</h4><p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geavqtrpo6j206y081aae.jpg\" alt=\"第二层成品 3.png\"></p>\n<h3 id=\"第三层还原\"><a href=\"#第三层还原\" class=\"headerlink\" title=\"第三层还原\"></a>第三层还原</h3><p>第三层一共分4个步骤来还原</p>\n<h4 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h4><blockquote>\n<p>该步骤是实现顶部出现“+”格子，其他色块不考虑<br>口诀：F -&gt; U -&gt; R -&gt; U’ -&gt; R’ -&gt; F’</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1gebkyytazvj20zy0ceafg.jpg\" alt=\"十字.jpg\"></p>\n<h4 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a>第二步</h4><blockquote>\n<p>该步骤是实现顶部面同色，其他侧面色块不考虑<br>口诀：R’ -&gt; U’ -&gt; R -&gt; U’ -&gt; R’ -&gt; U2 -&gt; R<br>该步骤需要注意的是，但使用上面步骤出现顶部面是“小鱼”的情况后，再以下图中的方位继续进行上面的公式直到顶部面为同样的色</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geaw0pin1gj21140cuwlc.jpg\" alt=\"顶部面.png\"></p>\n<h4 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h4><blockquote>\n<p>该步骤是实现魔方的顶角互换，其他侧面色块不考虑<br>口诀：R -&gt; U2 -&gt; R’ -&gt; U’ -&gt; R -&gt; U2 -&gt; L’ -&gt; U -&gt; R’ -&gt; U’ -&gt; L</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1geaw5q1g09j206y07iq3a.jpg\" alt=\"顶角互换.png\"></p>\n<h4 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h4><blockquote>\n<p>该步骤是实现魔方的棱互换，其他侧面色块不考虑<br>本不走下图有点问题。face面有变化<br>口诀：F2 -&gt; U -&gt; L -&gt; R’ -&gt; F2 -&gt; L’ -&gt; R -&gt; U -&gt; F2</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/987eaf20ly1gebl80p7k0j206z07ldga.jpg\" alt=\"棱互换.png\"></p>\n<ul>\n<li>综合上步就可以实现魔方还原了。小伙伴们还不快试一下💪💪💪。</li>\n</ul>\n"},{"title":"react虚拟DOM解析","date":"2020-09-17T13:12:57.000Z","img":"/medias/featureimages/4.jpg","top":false,"cover":true,"coverImg":"/medias/featureimages4.jpg","toc":true,"mathjax":false,"summary":"虚拟DOM是React的一大亮点，具有batching(批处理)和高效的Diff算法。这让我们可以无需担心性能问题而”毫无顾忌”的随时“刷新”整个页面。","_content":"\n### 一、浏览器怎么解析出DOM\n\n#### 浏览器请求阶段\n\n浏览器向服务器发起http请求，经过TCP/IP三次握手确认链接后，服务器将需要的代码发回给浏览器，这里我们只说返回的是html文件，其他的不多赘述。\n\n#### 解析dom树阶段\n\n浏览器首先将收到的html代码，通过html解析器解析构建为一颗DOM树。数据结构中有许多的树。\n\n#### 根据css渲染DOM树阶段\n\n浏览器按从上到下，从左到右的顺序，读取DOM树的文档节点，顺序存放到一条树状结构上。而每一个DIV就是节点，这棵树就是文档流。当我们我们读取到的节点是属于另一个节点下的子节点，那么我们放到树上的位置就是该节点盒子的内部。\n如果子节点下还有子节点，在树状结构中继续套盒子内部。根据它在DOM树上的结构，可以嵌套的层级没有限制的哦。\n文档流排完之后，根据div上的class或者id等取对应的css资源（也是从http请求中获取到的）source中找到对应的css样式属性，将对应的属性绑定到盒子上，就完成过了文档树。\n\n#### 浏览器渲染阶段\n布局完成之后，我们在页面上其实是看不到任何内容的\n浏览器只是计算出了每一个节点对象应该被放到页面的哪个位置上，但并没有可视化。\n因此最后一步就是将所有内容绘制出来，完成整个页面的渲染。\n\n### 二、虚拟dom树原理\n\n虚拟DOM自然就是跟DOM有很大关系的了。我们在使用原生JS开发或者使用Jquery开发，经常就会操作DOM，但是我们使用的时候发现，每次我们改变DOM的时候，页面再次渲染，会消耗很多性能，有些时候会占到70%左右的渲染性能。如果我们尽可能减少dom树的操作或者在上文中提到的减少dom流中的改变，这样就会有效的提高浏览器的渲染速度。这样就有了虚拟dom的理论。\n\n实际在React中，会把DOM转换成JavaScript对象，然后再把JavaScript对象转化成DOM，这样我们对于DOM的操作，实际上是在操作这个JavaScript对象。\n\n虚拟的DOM的核心思想是：对复杂的文档DOM结构，提供一种方便的工具，进行最小化地DOM操作。\n\n#### 构建虚拟DOM\n\n例子：\n\n```javascript\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n\n    let element = React.createElement(\"h1\", {\n        id: \"test\",\n        className: \"testClass\"\n    }, \"test\");\n\n    ReactDOM.render(element, document.getElementById('root'));\n```\n\n分析一下上面的代码：\n`React.createElement()` 方法传入了3个参数: 第1个参数对应的是标签(tag)名称，第2个参数是属性(id,class,attr...)，第三个参数是内容(text)，然后返回某个值。\n`ReactDOM.render()`方法接收了两个参数，第一个参数是刚刚提到的某个值，第二个参数是获取到的root元素，对应的是index.html中的`<div id=\"root\"></div>`\n\n在上面的代码中加入console.log(element)，打印出element的值，如下：\n![示例.png](https://img-blog.csdnimg.cn/20191130135734265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70)\n\n上面的console吐出的是一段dom数据，此时React.createElement()方法创建了虚拟DOM。\n\n#### 模拟实现React.createElement()\n\n有上图可以这个对象有多个属性，目前来说对我们比较重要的是props和type属性，所以先实现对于这两个属性的操作。\n`React.createElement()` 接收3个参数，现在要把这3个参数合并到type和props中。\n`React.createElement()` 接收3个以上参数，说明该元素里面有多个子元素（这些子元素仍然是React.createElement()），那么把第二个参数后面的所有参数转换成数组放入children中\n\n```javascript\nfunction ReactElement(type, props) {\n    const element = { type, props };\n    return element;\n}\n\nfunction createElement(type, config = {}, children) {\n    let propName;\n    const props = {};  // 定义props\n    for(propName in config) {\n        props[propName] = config[propName];  // 复制config的属性到props中\n    }\n\n    // 处理children\n    const childrenLength = arguments.length - 2;\n    if(childrenLength === 1) {\n        props.children = children;\n    } else {\n        // 有多个子元素的情况\n        props.children = Array.from(arguments).slice(2);\n    }\n\n    return ReactElement(type, props);\n}\n```\ntest code :\n\n```javascript\nconst element = createElement(\"h1\", {\n    id: \"test\",\n    className: \"testClass\"\n  }, createElement(\"span\", null, \"span1\"), createElement(\"span\", null, \"span2\"));\n\nconsole.log(JSON.stringify(element))\n```\nconsole结果(实际是一个javascript的对象):\n\n![示例.png](https://img-blog.csdnimg.cn/2019113014240124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70)\n\n\n#### React Diff算法\n\n1. 两个相同的组件产生相似的DOM结构，而不同的组件产生不同的DOM结构。\n\n2. 对于同一级别的一组子节点，可以通过唯一的ID来区分它们。\n\n算法上的优化是 React 整个界面 Render 的基础，保证了整体界面渲染的性能。\n\n\n\n为了在树之间进行比较，我们首先要能够比较两个节点，在 React 中即比较两个虚拟 DOM 节点，当两个节点不同时，应该如何处理。这分为两种情况：\n\n- （1）节点类型不同 \n- （2）节点类型相同，但是属性不同。\n\n节点类型不同：直接删除原节点， 插入新节点。\n\nReact 的 DOM Diff 算法实际上只会对树进行逐层比较，两棵树只会对同一层次的节点进行比较如下所述。\n\n当我们调用 setState 时，state 内部状态发生变动，再次调用 render 方法就会生成一个新的虚拟 DOM 树，这样我们就能使用 diff 方法计算出新老虚拟 DOM 发送变化的部分，最后使用 patch 方法，将变动渲染到视图中。\n\n\n它是比较新旧VDOM的更改，然后将更改的部分更新到视图。 对应于代码，它是一个diff函数，返回一个补丁。\n\n### 总结\n\n\n1.虚拟DOM基本上不会引发页面布局和重绘操作。\n\n2.在频繁修改虚拟DOM之后（以及在setState之后），一次比较并修改需要在真实DOM中修改的部分，最后在真实DOM中排版和重绘以减少布局和重绘的损失。\n\n3.虚拟DOM有效地减少了大量（真实DOM节点）的重绘和排版，最终的差异与真实DOM进行了比较，并且只渲染一修改的那一小部分（与2相同）\n\n使用虚拟DOM的损耗计算：\n\n`总损耗 = 虚拟DOM增删改 + （与Diff算法效率有关）真实DOM差异增删改 + （较少的节点）排版与重绘`\n\n直接使用真实DOM的损耗计算：\n\n`总损耗 = 真实DOM完全增删改 + （可能较多的节点）排版与重绘`\n\n简而言之，为了减少因频繁进行大面积重绘而导致的性能问题，不同的框架不一定需要虚拟DOM。 关键是要查看框架是否经常触发大面积DOM操作。","source":"_posts/react-dom.md","raw":"---\ntitle: react虚拟DOM解析\ndate: 2020-09-17 21:12:57\nimg: /medias/featureimages/4.jpg\ntop: false\ncover: true\ncoverImg: /medias/featureimages4.jpg\ntoc: true\nmathjax: false\nsummary: 虚拟DOM是React的一大亮点，具有batching(批处理)和高效的Diff算法。这让我们可以无需担心性能问题而”毫无顾忌”的随时“刷新”整个页面。\ncategories: 前端\ntags:\n- React\n- dom\n---\n\n### 一、浏览器怎么解析出DOM\n\n#### 浏览器请求阶段\n\n浏览器向服务器发起http请求，经过TCP/IP三次握手确认链接后，服务器将需要的代码发回给浏览器，这里我们只说返回的是html文件，其他的不多赘述。\n\n#### 解析dom树阶段\n\n浏览器首先将收到的html代码，通过html解析器解析构建为一颗DOM树。数据结构中有许多的树。\n\n#### 根据css渲染DOM树阶段\n\n浏览器按从上到下，从左到右的顺序，读取DOM树的文档节点，顺序存放到一条树状结构上。而每一个DIV就是节点，这棵树就是文档流。当我们我们读取到的节点是属于另一个节点下的子节点，那么我们放到树上的位置就是该节点盒子的内部。\n如果子节点下还有子节点，在树状结构中继续套盒子内部。根据它在DOM树上的结构，可以嵌套的层级没有限制的哦。\n文档流排完之后，根据div上的class或者id等取对应的css资源（也是从http请求中获取到的）source中找到对应的css样式属性，将对应的属性绑定到盒子上，就完成过了文档树。\n\n#### 浏览器渲染阶段\n布局完成之后，我们在页面上其实是看不到任何内容的\n浏览器只是计算出了每一个节点对象应该被放到页面的哪个位置上，但并没有可视化。\n因此最后一步就是将所有内容绘制出来，完成整个页面的渲染。\n\n### 二、虚拟dom树原理\n\n虚拟DOM自然就是跟DOM有很大关系的了。我们在使用原生JS开发或者使用Jquery开发，经常就会操作DOM，但是我们使用的时候发现，每次我们改变DOM的时候，页面再次渲染，会消耗很多性能，有些时候会占到70%左右的渲染性能。如果我们尽可能减少dom树的操作或者在上文中提到的减少dom流中的改变，这样就会有效的提高浏览器的渲染速度。这样就有了虚拟dom的理论。\n\n实际在React中，会把DOM转换成JavaScript对象，然后再把JavaScript对象转化成DOM，这样我们对于DOM的操作，实际上是在操作这个JavaScript对象。\n\n虚拟的DOM的核心思想是：对复杂的文档DOM结构，提供一种方便的工具，进行最小化地DOM操作。\n\n#### 构建虚拟DOM\n\n例子：\n\n```javascript\n    import React from 'react';\n    import ReactDOM from 'react-dom';\n\n    let element = React.createElement(\"h1\", {\n        id: \"test\",\n        className: \"testClass\"\n    }, \"test\");\n\n    ReactDOM.render(element, document.getElementById('root'));\n```\n\n分析一下上面的代码：\n`React.createElement()` 方法传入了3个参数: 第1个参数对应的是标签(tag)名称，第2个参数是属性(id,class,attr...)，第三个参数是内容(text)，然后返回某个值。\n`ReactDOM.render()`方法接收了两个参数，第一个参数是刚刚提到的某个值，第二个参数是获取到的root元素，对应的是index.html中的`<div id=\"root\"></div>`\n\n在上面的代码中加入console.log(element)，打印出element的值，如下：\n![示例.png](https://img-blog.csdnimg.cn/20191130135734265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70)\n\n上面的console吐出的是一段dom数据，此时React.createElement()方法创建了虚拟DOM。\n\n#### 模拟实现React.createElement()\n\n有上图可以这个对象有多个属性，目前来说对我们比较重要的是props和type属性，所以先实现对于这两个属性的操作。\n`React.createElement()` 接收3个参数，现在要把这3个参数合并到type和props中。\n`React.createElement()` 接收3个以上参数，说明该元素里面有多个子元素（这些子元素仍然是React.createElement()），那么把第二个参数后面的所有参数转换成数组放入children中\n\n```javascript\nfunction ReactElement(type, props) {\n    const element = { type, props };\n    return element;\n}\n\nfunction createElement(type, config = {}, children) {\n    let propName;\n    const props = {};  // 定义props\n    for(propName in config) {\n        props[propName] = config[propName];  // 复制config的属性到props中\n    }\n\n    // 处理children\n    const childrenLength = arguments.length - 2;\n    if(childrenLength === 1) {\n        props.children = children;\n    } else {\n        // 有多个子元素的情况\n        props.children = Array.from(arguments).slice(2);\n    }\n\n    return ReactElement(type, props);\n}\n```\ntest code :\n\n```javascript\nconst element = createElement(\"h1\", {\n    id: \"test\",\n    className: \"testClass\"\n  }, createElement(\"span\", null, \"span1\"), createElement(\"span\", null, \"span2\"));\n\nconsole.log(JSON.stringify(element))\n```\nconsole结果(实际是一个javascript的对象):\n\n![示例.png](https://img-blog.csdnimg.cn/2019113014240124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70)\n\n\n#### React Diff算法\n\n1. 两个相同的组件产生相似的DOM结构，而不同的组件产生不同的DOM结构。\n\n2. 对于同一级别的一组子节点，可以通过唯一的ID来区分它们。\n\n算法上的优化是 React 整个界面 Render 的基础，保证了整体界面渲染的性能。\n\n\n\n为了在树之间进行比较，我们首先要能够比较两个节点，在 React 中即比较两个虚拟 DOM 节点，当两个节点不同时，应该如何处理。这分为两种情况：\n\n- （1）节点类型不同 \n- （2）节点类型相同，但是属性不同。\n\n节点类型不同：直接删除原节点， 插入新节点。\n\nReact 的 DOM Diff 算法实际上只会对树进行逐层比较，两棵树只会对同一层次的节点进行比较如下所述。\n\n当我们调用 setState 时，state 内部状态发生变动，再次调用 render 方法就会生成一个新的虚拟 DOM 树，这样我们就能使用 diff 方法计算出新老虚拟 DOM 发送变化的部分，最后使用 patch 方法，将变动渲染到视图中。\n\n\n它是比较新旧VDOM的更改，然后将更改的部分更新到视图。 对应于代码，它是一个diff函数，返回一个补丁。\n\n### 总结\n\n\n1.虚拟DOM基本上不会引发页面布局和重绘操作。\n\n2.在频繁修改虚拟DOM之后（以及在setState之后），一次比较并修改需要在真实DOM中修改的部分，最后在真实DOM中排版和重绘以减少布局和重绘的损失。\n\n3.虚拟DOM有效地减少了大量（真实DOM节点）的重绘和排版，最终的差异与真实DOM进行了比较，并且只渲染一修改的那一小部分（与2相同）\n\n使用虚拟DOM的损耗计算：\n\n`总损耗 = 虚拟DOM增删改 + （与Diff算法效率有关）真实DOM差异增删改 + （较少的节点）排版与重绘`\n\n直接使用真实DOM的损耗计算：\n\n`总损耗 = 真实DOM完全增删改 + （可能较多的节点）排版与重绘`\n\n简而言之，为了减少因频繁进行大面积重绘而导致的性能问题，不同的框架不一定需要虚拟DOM。 关键是要查看框架是否经常触发大面积DOM操作。","slug":"react-dom","published":1,"updated":"2020-10-19T15:45:57.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcls000fhi607ef27n3j","content":"<h3 id=\"一、浏览器怎么解析出DOM\"><a href=\"#一、浏览器怎么解析出DOM\" class=\"headerlink\" title=\"一、浏览器怎么解析出DOM\"></a>一、浏览器怎么解析出DOM</h3><h4 id=\"浏览器请求阶段\"><a href=\"#浏览器请求阶段\" class=\"headerlink\" title=\"浏览器请求阶段\"></a>浏览器请求阶段</h4><p>浏览器向服务器发起http请求，经过TCP/IP三次握手确认链接后，服务器将需要的代码发回给浏览器，这里我们只说返回的是html文件，其他的不多赘述。</p>\n<h4 id=\"解析dom树阶段\"><a href=\"#解析dom树阶段\" class=\"headerlink\" title=\"解析dom树阶段\"></a>解析dom树阶段</h4><p>浏览器首先将收到的html代码，通过html解析器解析构建为一颗DOM树。数据结构中有许多的树。</p>\n<h4 id=\"根据css渲染DOM树阶段\"><a href=\"#根据css渲染DOM树阶段\" class=\"headerlink\" title=\"根据css渲染DOM树阶段\"></a>根据css渲染DOM树阶段</h4><p>浏览器按从上到下，从左到右的顺序，读取DOM树的文档节点，顺序存放到一条树状结构上。而每一个DIV就是节点，这棵树就是文档流。当我们我们读取到的节点是属于另一个节点下的子节点，那么我们放到树上的位置就是该节点盒子的内部。<br>如果子节点下还有子节点，在树状结构中继续套盒子内部。根据它在DOM树上的结构，可以嵌套的层级没有限制的哦。<br>文档流排完之后，根据div上的class或者id等取对应的css资源（也是从http请求中获取到的）source中找到对应的css样式属性，将对应的属性绑定到盒子上，就完成过了文档树。</p>\n<h4 id=\"浏览器渲染阶段\"><a href=\"#浏览器渲染阶段\" class=\"headerlink\" title=\"浏览器渲染阶段\"></a>浏览器渲染阶段</h4><p>布局完成之后，我们在页面上其实是看不到任何内容的<br>浏览器只是计算出了每一个节点对象应该被放到页面的哪个位置上，但并没有可视化。<br>因此最后一步就是将所有内容绘制出来，完成整个页面的渲染。</p>\n<h3 id=\"二、虚拟dom树原理\"><a href=\"#二、虚拟dom树原理\" class=\"headerlink\" title=\"二、虚拟dom树原理\"></a>二、虚拟dom树原理</h3><p>虚拟DOM自然就是跟DOM有很大关系的了。我们在使用原生JS开发或者使用Jquery开发，经常就会操作DOM，但是我们使用的时候发现，每次我们改变DOM的时候，页面再次渲染，会消耗很多性能，有些时候会占到70%左右的渲染性能。如果我们尽可能减少dom树的操作或者在上文中提到的减少dom流中的改变，这样就会有效的提高浏览器的渲染速度。这样就有了虚拟dom的理论。</p>\n<p>实际在React中，会把DOM转换成JavaScript对象，然后再把JavaScript对象转化成DOM，这样我们对于DOM的操作，实际上是在操作这个JavaScript对象。</p>\n<p>虚拟的DOM的核心思想是：对复杂的文档DOM结构，提供一种方便的工具，进行最小化地DOM操作。</p>\n<h4 id=\"构建虚拟DOM\"><a href=\"#构建虚拟DOM\" class=\"headerlink\" title=\"构建虚拟DOM\"></a>构建虚拟DOM</h4><p>例子：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> element <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>\n        className<span class=\"token punctuation\">:</span> <span class=\"token string\">\"testClass\"</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    ReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>分析一下上面的代码：<br><code>React.createElement()</code> 方法传入了3个参数: 第1个参数对应的是标签(tag)名称，第2个参数是属性(id,class,attr…)，第三个参数是内容(text)，然后返回某个值。<br><code>ReactDOM.render()</code>方法接收了两个参数，第一个参数是刚刚提到的某个值，第二个参数是获取到的root元素，对应的是index.html中的<code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code></p>\n<p>在上面的代码中加入console.log(element)，打印出element的值，如下：<br><img src=\"https://img-blog.csdnimg.cn/20191130135734265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70\" alt=\"示例.png\"></p>\n<p>上面的console吐出的是一段dom数据，此时React.createElement()方法创建了虚拟DOM。</p>\n<h4 id=\"模拟实现React-createElement\"><a href=\"#模拟实现React-createElement\" class=\"headerlink\" title=\"模拟实现React.createElement()\"></a>模拟实现React.createElement()</h4><p>有上图可以这个对象有多个属性，目前来说对我们比较重要的是props和type属性，所以先实现对于这两个属性的操作。<br><code>React.createElement()</code> 接收3个参数，现在要把这3个参数合并到type和props中。<br><code>React.createElement()</code> 接收3个以上参数，说明该元素里面有多个子元素（这些子元素仍然是React.createElement()），那么把第二个参数后面的所有参数转换成数组放入children中</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ReactElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> element<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> config <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> children<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> propName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> props <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 定义props</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>propName <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">// 复制config的属性到props中</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 处理children</span>\n    <span class=\"token keyword\">const</span> childrenLength <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>childrenLength <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\" spellcheck=\"true\">// 有多个子元素的情况</span>\n        props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ReactElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>test code :</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">,</span>\n    className<span class=\"token punctuation\">:</span> <span class=\"token string\">\"testClass\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"span1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"span2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>console结果(实际是一个javascript的对象):</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019113014240124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70\" alt=\"示例.png\"></p>\n<h4 id=\"React-Diff算法\"><a href=\"#React-Diff算法\" class=\"headerlink\" title=\"React Diff算法\"></a>React Diff算法</h4><ol>\n<li><p>两个相同的组件产生相似的DOM结构，而不同的组件产生不同的DOM结构。</p>\n</li>\n<li><p>对于同一级别的一组子节点，可以通过唯一的ID来区分它们。</p>\n</li>\n</ol>\n<p>算法上的优化是 React 整个界面 Render 的基础，保证了整体界面渲染的性能。</p>\n<p>为了在树之间进行比较，我们首先要能够比较两个节点，在 React 中即比较两个虚拟 DOM 节点，当两个节点不同时，应该如何处理。这分为两种情况：</p>\n<ul>\n<li>（1）节点类型不同 </li>\n<li>（2）节点类型相同，但是属性不同。</li>\n</ul>\n<p>节点类型不同：直接删除原节点， 插入新节点。</p>\n<p>React 的 DOM Diff 算法实际上只会对树进行逐层比较，两棵树只会对同一层次的节点进行比较如下所述。</p>\n<p>当我们调用 setState 时，state 内部状态发生变动，再次调用 render 方法就会生成一个新的虚拟 DOM 树，这样我们就能使用 diff 方法计算出新老虚拟 DOM 发送变化的部分，最后使用 patch 方法，将变动渲染到视图中。</p>\n<p>它是比较新旧VDOM的更改，然后将更改的部分更新到视图。 对应于代码，它是一个diff函数，返回一个补丁。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.虚拟DOM基本上不会引发页面布局和重绘操作。</p>\n<p>2.在频繁修改虚拟DOM之后（以及在setState之后），一次比较并修改需要在真实DOM中修改的部分，最后在真实DOM中排版和重绘以减少布局和重绘的损失。</p>\n<p>3.虚拟DOM有效地减少了大量（真实DOM节点）的重绘和排版，最终的差异与真实DOM进行了比较，并且只渲染一修改的那一小部分（与2相同）</p>\n<p>使用虚拟DOM的损耗计算：</p>\n<p><code>总损耗 = 虚拟DOM增删改 + （与Diff算法效率有关）真实DOM差异增删改 + （较少的节点）排版与重绘</code></p>\n<p>直接使用真实DOM的损耗计算：</p>\n<p><code>总损耗 = 真实DOM完全增删改 + （可能较多的节点）排版与重绘</code></p>\n<p>简而言之，为了减少因频繁进行大面积重绘而导致的性能问题，不同的框架不一定需要虚拟DOM。 关键是要查看框架是否经常触发大面积DOM操作。</p>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h3 id=\"一、浏览器怎么解析出DOM\"><a href=\"#一、浏览器怎么解析出DOM\" class=\"headerlink\" title=\"一、浏览器怎么解析出DOM\"></a>一、浏览器怎么解析出DOM</h3><h4 id=\"浏览器请求阶段\"><a href=\"#浏览器请求阶段\" class=\"headerlink\" title=\"浏览器请求阶段\"></a>浏览器请求阶段</h4><p>浏览器向服务器发起http请求，经过TCP/IP三次握手确认链接后，服务器将需要的代码发回给浏览器，这里我们只说返回的是html文件，其他的不多赘述。</p>\n<h4 id=\"解析dom树阶段\"><a href=\"#解析dom树阶段\" class=\"headerlink\" title=\"解析dom树阶段\"></a>解析dom树阶段</h4><p>浏览器首先将收到的html代码，通过html解析器解析构建为一颗DOM树。数据结构中有许多的树。</p>\n<h4 id=\"根据css渲染DOM树阶段\"><a href=\"#根据css渲染DOM树阶段\" class=\"headerlink\" title=\"根据css渲染DOM树阶段\"></a>根据css渲染DOM树阶段</h4><p>浏览器按从上到下，从左到右的顺序，读取DOM树的文档节点，顺序存放到一条树状结构上。而每一个DIV就是节点，这棵树就是文档流。当我们我们读取到的节点是属于另一个节点下的子节点，那么我们放到树上的位置就是该节点盒子的内部。<br>如果子节点下还有子节点，在树状结构中继续套盒子内部。根据它在DOM树上的结构，可以嵌套的层级没有限制的哦。<br>文档流排完之后，根据div上的class或者id等取对应的css资源（也是从http请求中获取到的）source中找到对应的css样式属性，将对应的属性绑定到盒子上，就完成过了文档树。</p>\n<h4 id=\"浏览器渲染阶段\"><a href=\"#浏览器渲染阶段\" class=\"headerlink\" title=\"浏览器渲染阶段\"></a>浏览器渲染阶段</h4><p>布局完成之后，我们在页面上其实是看不到任何内容的<br>浏览器只是计算出了每一个节点对象应该被放到页面的哪个位置上，但并没有可视化。<br>因此最后一步就是将所有内容绘制出来，完成整个页面的渲染。</p>\n<h3 id=\"二、虚拟dom树原理\"><a href=\"#二、虚拟dom树原理\" class=\"headerlink\" title=\"二、虚拟dom树原理\"></a>二、虚拟dom树原理</h3><p>虚拟DOM自然就是跟DOM有很大关系的了。我们在使用原生JS开发或者使用Jquery开发，经常就会操作DOM，但是我们使用的时候发现，每次我们改变DOM的时候，页面再次渲染，会消耗很多性能，有些时候会占到70%左右的渲染性能。如果我们尽可能减少dom树的操作或者在上文中提到的减少dom流中的改变，这样就会有效的提高浏览器的渲染速度。这样就有了虚拟dom的理论。</p>\n<p>实际在React中，会把DOM转换成JavaScript对象，然后再把JavaScript对象转化成DOM，这样我们对于DOM的操作，实际上是在操作这个JavaScript对象。</p>\n<p>虚拟的DOM的核心思想是：对复杂的文档DOM结构，提供一种方便的工具，进行最小化地DOM操作。</p>\n<h4 id=\"构建虚拟DOM\"><a href=\"#构建虚拟DOM\" class=\"headerlink\" title=\"构建虚拟DOM\"></a>构建虚拟DOM</h4><p>例子：</p>\n<pre><code class=\"javascript\">    import React from &#39;react&#39;;\n    import ReactDOM from &#39;react-dom&#39;;\n\n    let element = React.createElement(&quot;h1&quot;, {\n        id: &quot;test&quot;,\n        className: &quot;testClass&quot;\n    }, &quot;test&quot;);\n\n    ReactDOM.render(element, document.getElementById(&#39;root&#39;));</code></pre>\n<p>分析一下上面的代码：<br><code>React.createElement()</code> 方法传入了3个参数: 第1个参数对应的是标签(tag)名称，第2个参数是属性(id,class,attr…)，第三个参数是内容(text)，然后返回某个值。<br><code>ReactDOM.render()</code>方法接收了两个参数，第一个参数是刚刚提到的某个值，第二个参数是获取到的root元素，对应的是index.html中的<code>&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</code></p>\n<p>在上面的代码中加入console.log(element)，打印出element的值，如下：<br><img src=\"https://img-blog.csdnimg.cn/20191130135734265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70\" alt=\"示例.png\"></p>\n<p>上面的console吐出的是一段dom数据，此时React.createElement()方法创建了虚拟DOM。</p>\n<h4 id=\"模拟实现React-createElement\"><a href=\"#模拟实现React-createElement\" class=\"headerlink\" title=\"模拟实现React.createElement()\"></a>模拟实现React.createElement()</h4><p>有上图可以这个对象有多个属性，目前来说对我们比较重要的是props和type属性，所以先实现对于这两个属性的操作。<br><code>React.createElement()</code> 接收3个参数，现在要把这3个参数合并到type和props中。<br><code>React.createElement()</code> 接收3个以上参数，说明该元素里面有多个子元素（这些子元素仍然是React.createElement()），那么把第二个参数后面的所有参数转换成数组放入children中</p>\n<pre><code class=\"javascript\">function ReactElement(type, props) {\n    const element = { type, props };\n    return element;\n}\n\nfunction createElement(type, config = {}, children) {\n    let propName;\n    const props = {};  // 定义props\n    for(propName in config) {\n        props[propName] = config[propName];  // 复制config的属性到props中\n    }\n\n    // 处理children\n    const childrenLength = arguments.length - 2;\n    if(childrenLength === 1) {\n        props.children = children;\n    } else {\n        // 有多个子元素的情况\n        props.children = Array.from(arguments).slice(2);\n    }\n\n    return ReactElement(type, props);\n}</code></pre>\n<p>test code :</p>\n<pre><code class=\"javascript\">const element = createElement(&quot;h1&quot;, {\n    id: &quot;test&quot;,\n    className: &quot;testClass&quot;\n  }, createElement(&quot;span&quot;, null, &quot;span1&quot;), createElement(&quot;span&quot;, null, &quot;span2&quot;));\n\nconsole.log(JSON.stringify(element))</code></pre>\n<p>console结果(实际是一个javascript的对象):</p>\n<p><img src=\"https://img-blog.csdnimg.cn/2019113014240124.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MjA2NTc2,size_16,color_FFFFFF,t_70\" alt=\"示例.png\"></p>\n<h4 id=\"React-Diff算法\"><a href=\"#React-Diff算法\" class=\"headerlink\" title=\"React Diff算法\"></a>React Diff算法</h4><ol>\n<li><p>两个相同的组件产生相似的DOM结构，而不同的组件产生不同的DOM结构。</p>\n</li>\n<li><p>对于同一级别的一组子节点，可以通过唯一的ID来区分它们。</p>\n</li>\n</ol>\n<p>算法上的优化是 React 整个界面 Render 的基础，保证了整体界面渲染的性能。</p>\n<p>为了在树之间进行比较，我们首先要能够比较两个节点，在 React 中即比较两个虚拟 DOM 节点，当两个节点不同时，应该如何处理。这分为两种情况：</p>\n<ul>\n<li>（1）节点类型不同 </li>\n<li>（2）节点类型相同，但是属性不同。</li>\n</ul>\n<p>节点类型不同：直接删除原节点， 插入新节点。</p>\n<p>React 的 DOM Diff 算法实际上只会对树进行逐层比较，两棵树只会对同一层次的节点进行比较如下所述。</p>\n<p>当我们调用 setState 时，state 内部状态发生变动，再次调用 render 方法就会生成一个新的虚拟 DOM 树，这样我们就能使用 diff 方法计算出新老虚拟 DOM 发送变化的部分，最后使用 patch 方法，将变动渲染到视图中。</p>\n<p>它是比较新旧VDOM的更改，然后将更改的部分更新到视图。 对应于代码，它是一个diff函数，返回一个补丁。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>1.虚拟DOM基本上不会引发页面布局和重绘操作。</p>\n<p>2.在频繁修改虚拟DOM之后（以及在setState之后），一次比较并修改需要在真实DOM中修改的部分，最后在真实DOM中排版和重绘以减少布局和重绘的损失。</p>\n<p>3.虚拟DOM有效地减少了大量（真实DOM节点）的重绘和排版，最终的差异与真实DOM进行了比较，并且只渲染一修改的那一小部分（与2相同）</p>\n<p>使用虚拟DOM的损耗计算：</p>\n<p><code>总损耗 = 虚拟DOM增删改 + （与Diff算法效率有关）真实DOM差异增删改 + （较少的节点）排版与重绘</code></p>\n<p>直接使用真实DOM的损耗计算：</p>\n<p><code>总损耗 = 真实DOM完全增删改 + （可能较多的节点）排版与重绘</code></p>\n<p>简而言之，为了减少因频繁进行大面积重绘而导致的性能问题，不同的框架不一定需要虚拟DOM。 关键是要查看框架是否经常触发大面积DOM操作。</p>\n"},{"title":"浏览器token验证","date":"2020-10-17T03:12:57.000Z","img":"/medias/featureimages/5.jpg","top":false,"cover":true,"coverImg":"/medias/featureimages5.jpg","toc":true,"mathjax":false,"summary":"很多的网站、APP都弱化了甚至没有搭建属于自己的账号体系，而是使用其它社会化的第三方登陆的方式，比如在登陆某个网站的时候选择通过github或者微信、微博等方式登陆，这样不仅免去了用户注册账号的麻烦，还可以获取用户的好友关系来增强自身的社交功能。","_content":"\n### OAuth认证流程\n\n#### 第三方登陆\n\n举个板栗：如果要通过第三方网站（例如github）登录没有自己的帐户系统的平台，最传统的方法是直接在平台的着陆页上输入github帐户密码， 可以通过用户帐户和密码用户数据从github获得它，但是这样做有很多缺陷：\n\n\n- 该平台需要以明文格式保存用户的github帐户和密码，这是不安全的；\n- 该平台拥有在github中获取用户的所有权限信息；\n- 只有修改密码后，用户才能取消授权平台的权限，但是这将导致用户授权的所有其他第三方应用程序无效，不知这一个应用；\n- 如果第三方应用被破解，就会有用户密码泄露的风险，和所有使用github登录的网站的数据泄漏；\n\n为了解决上述问题，有OAuth。\n\n#### 原理\n\nOAuth在“客户端”和“服务器”之间建立了一个授权层。 “客户端”不可以直接请求登陆“服务器”，而只能通过登录授权层来进行登陆客户端，通过服务端获取用户信息。 “客户端”登录授权层所使用的密码与用户的登陆密码不同。 登录时，用户可以指定授权层的token的授权范围和有效期。\n\n授权层允许“客户端”登陆之后，“服务端”根据token的权限范围和有效期，向“客户端”返回用户的信息（userInfo）。\n\n例如现在有一个平台为平台A，平台A的登陆方式只有通过gitHub账号第三方登录机制登录。流程图大致如下：\n\n\n![授权登陆.png](https://img-blog.csdnimg.cn/20201018165245119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n1.用户点击Sign in with gitHub\n 需要跳转到授权页面， 授权页面的URL中包含的主要参数是如下：\n \n- client_id: 在gitHub中申请应用ID；\n- redirect_uri: 授权成功之后要跳转到的地址；\n\n2.该页面会自动跳转到由redirect_uri在初始参数中定义的URL，并将code参数自动添加到URL的末尾\n\n- gitHub验证：https://github.com/login/oauth/authorize?client_id=myclient_id&scope=user:email\n\n3.平台A通过上一步获取的code参数换取Token，平台A请求如下接口获取Token\n\n`https://github.com/login/oauth/access_token`，需要包含以下参数：\n\n- client_id: 在gitHub申请的应用ID；\n- client_secret: 在gitHub申请时提供的APP Secret；\n- grant_type: 需要填写authorization_code；\n- code: 上一步获得的code；\n- redirect_uri: 回调地址，需要与注册应用里的回调地址以及第一步的redirect_uri参数一致；\n\n4.通过第三步的请求，接口返回Token和相关授权数据\n\n```javascript\n{\n\t\"access_token\": \"ACCESS_TOKEN\",\t\t// Token的值\n\t\"expires_in\": 1000,\t\t// 过期时间\n\t\"uid\": \"1234567\", \t\t// 当前授权用户的UID\n}\n```\n5.使用在第四步中获取到的access_token，就可以去获取用户的资源了。\n\n调用 `https://api.github.com/user?access_token=access_token` 这个API，就可以获取到用户的基本信息。 \n\n用户的基本信息内容如下：\n```\n{\n    \"login\": \"Diamondtest\",\n    \"id\": 28478049,\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/28478049?v=3\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/Diamondtest\",\n    \"html_url\": \"https://github.com/Diamondtest\",\n    \"followers_url\": \"https://api.github.com/users/Diamondtest/followers\",\n    \"following_url\": \"https://api.github.com/users/Diamondtest/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/Diamondtest/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/Diamondtest/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/Diamondtest/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/Diamondtest/orgs\",\n    \"repos_url\": \"https://api.github.com/users/Diamondtest/repos\",\n    \"events_url\": \"https://api.github.com/users/Diamondtest/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/Diamondtest/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"name\": null,\n    \"company\": null,\n    \"blog\": \"\",\n    \"location\": null,\n    \"email\": null,\n    \"hireable\": null,\n    \"bio\": null,\n    \"public_repos\": 0,\n    \"public_gists\": 0,\n    \"followers\": 0,\n    \"following\": 0,\n    \"created_at\": \"2017-05-06T08:08:09Z\",\n    \"updated_at\": \"2017-05-06T08:16:22Z\"\n}\n```\n\n获取到用户信息，平台A进行登陆成功处理，授权登陆流程到此结束😊；\n\n\n通过以上的步骤，在平台A和gitHub之间建立了独立的权限层。 该权限由用户授予，并且可以由用户取消。 它不同于第三方应用程序之间的独立性，并且不会相互干扰。 解决了以明文存储帐户密码的问题。\n\n### Access Token\n\nAccess Token是用于访问被保护资源的一种凭证，它是一个加密的字符串。\n\n一般Access Token的有效时间都比较短，需要频繁的使用登陆抄错。\n如果要解决用户的频繁登陆问题，就需要用到Refresh Token了操作了。\n那么我们是不是直接多次获取Access Token也是可以的呢？答案是不方便的，主要是因为获取Access Token的时候需要使用到一个code，而这个code是需要用户进行授权操作的，威力避免频繁点击授权操作，就有了Refresh Token，用户不用再次进行操作了。\n\n### Refresh Token\n\n在OAuth机制中，Refresh Token并不是必须设置的，但是不设置Refresh Token，则会增加用户登录的次数，交互不是很友好哈。\n\nRefresh token的作用是刷新Access token，保证使用的token保持最新的有效token。Refresh Token是保存在客户端的服务器上的，当前的Access Token失效或者过期时，Refresh Token就会去获取一个新的Token，Refresh Token也是一个对客户端加密的字符串。\n\n一个有效的token返回结果如下：\n\n```\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n    Cache-Control: no-store\n    Pragma: no-cache\n    \n    {\n    \"access_token\":\"MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3\",\n    \"token_type\":\"bearer\",\n    \"expires_in\":3600,\n    \"refresh_token\":\"IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk\",\n    \"scope\":\"create\"\n    }\n```\n获取流程原理大致如下：\n\n![Refresh.png](https://img-blog.csdnimg.cn/20201018181410884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center)\n\n1.客户端通过认证服务器请求认证；\n\n2.认证服务器校验客户端认证是否有效，如果有效，返回一个Access Token和一个Refresh Token；\n\n3.客户端通过Access Token去请求服务器的资源；\n\n4.如果Access Token有效，服务器返回给客户端资源，如果Access Token失效，服务器返回给客户端Token失效的信息，然后客户端会通过Refresh Token再次请求获取新的Access Token；\n\n - Refresh Token本身也是有过期时间的，一般会比Access Token的过期时间长很多，如果想要将Refresh Token设置为永久有效，则可以通过配置参数实现。比如可以设置prompt=consent。","source":"_posts/webToken_oAuth.md","raw":"---\ntitle: 浏览器token验证\ndate: 2020-10-17 11:12:57\nimg: /medias/featureimages/5.jpg\ntop: false\ncover: true\ncoverImg: /medias/featureimages5.jpg\ntoc: true\nmathjax: false\nsummary: 很多的网站、APP都弱化了甚至没有搭建属于自己的账号体系，而是使用其它社会化的第三方登陆的方式，比如在登陆某个网站的时候选择通过github或者微信、微博等方式登陆，这样不仅免去了用户注册账号的麻烦，还可以获取用户的好友关系来增强自身的社交功能。\ncategories: 前端\ntags:\n- web\n- token\n---\n\n### OAuth认证流程\n\n#### 第三方登陆\n\n举个板栗：如果要通过第三方网站（例如github）登录没有自己的帐户系统的平台，最传统的方法是直接在平台的着陆页上输入github帐户密码， 可以通过用户帐户和密码用户数据从github获得它，但是这样做有很多缺陷：\n\n\n- 该平台需要以明文格式保存用户的github帐户和密码，这是不安全的；\n- 该平台拥有在github中获取用户的所有权限信息；\n- 只有修改密码后，用户才能取消授权平台的权限，但是这将导致用户授权的所有其他第三方应用程序无效，不知这一个应用；\n- 如果第三方应用被破解，就会有用户密码泄露的风险，和所有使用github登录的网站的数据泄漏；\n\n为了解决上述问题，有OAuth。\n\n#### 原理\n\nOAuth在“客户端”和“服务器”之间建立了一个授权层。 “客户端”不可以直接请求登陆“服务器”，而只能通过登录授权层来进行登陆客户端，通过服务端获取用户信息。 “客户端”登录授权层所使用的密码与用户的登陆密码不同。 登录时，用户可以指定授权层的token的授权范围和有效期。\n\n授权层允许“客户端”登陆之后，“服务端”根据token的权限范围和有效期，向“客户端”返回用户的信息（userInfo）。\n\n例如现在有一个平台为平台A，平台A的登陆方式只有通过gitHub账号第三方登录机制登录。流程图大致如下：\n\n\n![授权登陆.png](https://img-blog.csdnimg.cn/20201018165245119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center)\n\n\n\n\n1.用户点击Sign in with gitHub\n 需要跳转到授权页面， 授权页面的URL中包含的主要参数是如下：\n \n- client_id: 在gitHub中申请应用ID；\n- redirect_uri: 授权成功之后要跳转到的地址；\n\n2.该页面会自动跳转到由redirect_uri在初始参数中定义的URL，并将code参数自动添加到URL的末尾\n\n- gitHub验证：https://github.com/login/oauth/authorize?client_id=myclient_id&scope=user:email\n\n3.平台A通过上一步获取的code参数换取Token，平台A请求如下接口获取Token\n\n`https://github.com/login/oauth/access_token`，需要包含以下参数：\n\n- client_id: 在gitHub申请的应用ID；\n- client_secret: 在gitHub申请时提供的APP Secret；\n- grant_type: 需要填写authorization_code；\n- code: 上一步获得的code；\n- redirect_uri: 回调地址，需要与注册应用里的回调地址以及第一步的redirect_uri参数一致；\n\n4.通过第三步的请求，接口返回Token和相关授权数据\n\n```javascript\n{\n\t\"access_token\": \"ACCESS_TOKEN\",\t\t// Token的值\n\t\"expires_in\": 1000,\t\t// 过期时间\n\t\"uid\": \"1234567\", \t\t// 当前授权用户的UID\n}\n```\n5.使用在第四步中获取到的access_token，就可以去获取用户的资源了。\n\n调用 `https://api.github.com/user?access_token=access_token` 这个API，就可以获取到用户的基本信息。 \n\n用户的基本信息内容如下：\n```\n{\n    \"login\": \"Diamondtest\",\n    \"id\": 28478049,\n    \"avatar_url\": \"https://avatars0.githubusercontent.com/u/28478049?v=3\",\n    \"gravatar_id\": \"\",\n    \"url\": \"https://api.github.com/users/Diamondtest\",\n    \"html_url\": \"https://github.com/Diamondtest\",\n    \"followers_url\": \"https://api.github.com/users/Diamondtest/followers\",\n    \"following_url\": \"https://api.github.com/users/Diamondtest/following{/other_user}\",\n    \"gists_url\": \"https://api.github.com/users/Diamondtest/gists{/gist_id}\",\n    \"starred_url\": \"https://api.github.com/users/Diamondtest/starred{/owner}{/repo}\",\n    \"subscriptions_url\": \"https://api.github.com/users/Diamondtest/subscriptions\",\n    \"organizations_url\": \"https://api.github.com/users/Diamondtest/orgs\",\n    \"repos_url\": \"https://api.github.com/users/Diamondtest/repos\",\n    \"events_url\": \"https://api.github.com/users/Diamondtest/events{/privacy}\",\n    \"received_events_url\": \"https://api.github.com/users/Diamondtest/received_events\",\n    \"type\": \"User\",\n    \"site_admin\": false,\n    \"name\": null,\n    \"company\": null,\n    \"blog\": \"\",\n    \"location\": null,\n    \"email\": null,\n    \"hireable\": null,\n    \"bio\": null,\n    \"public_repos\": 0,\n    \"public_gists\": 0,\n    \"followers\": 0,\n    \"following\": 0,\n    \"created_at\": \"2017-05-06T08:08:09Z\",\n    \"updated_at\": \"2017-05-06T08:16:22Z\"\n}\n```\n\n获取到用户信息，平台A进行登陆成功处理，授权登陆流程到此结束😊；\n\n\n通过以上的步骤，在平台A和gitHub之间建立了独立的权限层。 该权限由用户授予，并且可以由用户取消。 它不同于第三方应用程序之间的独立性，并且不会相互干扰。 解决了以明文存储帐户密码的问题。\n\n### Access Token\n\nAccess Token是用于访问被保护资源的一种凭证，它是一个加密的字符串。\n\n一般Access Token的有效时间都比较短，需要频繁的使用登陆抄错。\n如果要解决用户的频繁登陆问题，就需要用到Refresh Token了操作了。\n那么我们是不是直接多次获取Access Token也是可以的呢？答案是不方便的，主要是因为获取Access Token的时候需要使用到一个code，而这个code是需要用户进行授权操作的，威力避免频繁点击授权操作，就有了Refresh Token，用户不用再次进行操作了。\n\n### Refresh Token\n\n在OAuth机制中，Refresh Token并不是必须设置的，但是不设置Refresh Token，则会增加用户登录的次数，交互不是很友好哈。\n\nRefresh token的作用是刷新Access token，保证使用的token保持最新的有效token。Refresh Token是保存在客户端的服务器上的，当前的Access Token失效或者过期时，Refresh Token就会去获取一个新的Token，Refresh Token也是一个对客户端加密的字符串。\n\n一个有效的token返回结果如下：\n\n```\n    HTTP/1.1 200 OK\n    Content-Type: application/json\n    Cache-Control: no-store\n    Pragma: no-cache\n    \n    {\n    \"access_token\":\"MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3\",\n    \"token_type\":\"bearer\",\n    \"expires_in\":3600,\n    \"refresh_token\":\"IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk\",\n    \"scope\":\"create\"\n    }\n```\n获取流程原理大致如下：\n\n![Refresh.png](https://img-blog.csdnimg.cn/20201018181410884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center)\n\n1.客户端通过认证服务器请求认证；\n\n2.认证服务器校验客户端认证是否有效，如果有效，返回一个Access Token和一个Refresh Token；\n\n3.客户端通过Access Token去请求服务器的资源；\n\n4.如果Access Token有效，服务器返回给客户端资源，如果Access Token失效，服务器返回给客户端Token失效的信息，然后客户端会通过Refresh Token再次请求获取新的Access Token；\n\n - Refresh Token本身也是有过期时间的，一般会比Access Token的过期时间长很多，如果想要将Refresh Token设置为永久有效，则可以通过配置参数实现。比如可以设置prompt=consent。","slug":"webToken_oAuth","published":1,"updated":"2020-11-16T15:11:08.315Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcly000hhi602qj35boh","content":"<h3 id=\"OAuth认证流程\"><a href=\"#OAuth认证流程\" class=\"headerlink\" title=\"OAuth认证流程\"></a>OAuth认证流程</h3><h4 id=\"第三方登陆\"><a href=\"#第三方登陆\" class=\"headerlink\" title=\"第三方登陆\"></a>第三方登陆</h4><p>举个板栗：如果要通过第三方网站（例如github）登录没有自己的帐户系统的平台，最传统的方法是直接在平台的着陆页上输入github帐户密码， 可以通过用户帐户和密码用户数据从github获得它，但是这样做有很多缺陷：</p>\n<ul>\n<li>该平台需要以明文格式保存用户的github帐户和密码，这是不安全的；</li>\n<li>该平台拥有在github中获取用户的所有权限信息；</li>\n<li>只有修改密码后，用户才能取消授权平台的权限，但是这将导致用户授权的所有其他第三方应用程序无效，不知这一个应用；</li>\n<li>如果第三方应用被破解，就会有用户密码泄露的风险，和所有使用github登录的网站的数据泄漏；</li>\n</ul>\n<p>为了解决上述问题，有OAuth。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>OAuth在“客户端”和“服务器”之间建立了一个授权层。 “客户端”不可以直接请求登陆“服务器”，而只能通过登录授权层来进行登陆客户端，通过服务端获取用户信息。 “客户端”登录授权层所使用的密码与用户的登陆密码不同。 登录时，用户可以指定授权层的token的授权范围和有效期。</p>\n<p>授权层允许“客户端”登陆之后，“服务端”根据token的权限范围和有效期，向“客户端”返回用户的信息（userInfo）。</p>\n<p>例如现在有一个平台为平台A，平台A的登陆方式只有通过gitHub账号第三方登录机制登录。流程图大致如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201018165245119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center\" alt=\"授权登陆.png\"></p>\n<p>1.用户点击Sign in with gitHub<br> 需要跳转到授权页面， 授权页面的URL中包含的主要参数是如下：</p>\n<ul>\n<li>client_id: 在gitHub中申请应用ID；</li>\n<li>redirect_uri: 授权成功之后要跳转到的地址；</li>\n</ul>\n<p>2.该页面会自动跳转到由redirect_uri在初始参数中定义的URL，并将code参数自动添加到URL的末尾</p>\n<ul>\n<li>gitHub验证：<a href=\"https://github.com/login/oauth/authorize?client_id=myclient_id&amp;scope=user:email\">https://github.com/login/oauth/authorize?client_id=myclient_id&amp;scope=user:email</a></li>\n</ul>\n<p>3.平台A通过上一步获取的code参数换取Token，平台A请求如下接口获取Token</p>\n<p><code>https://github.com/login/oauth/access_token</code>，需要包含以下参数：</p>\n<ul>\n<li>client_id: 在gitHub申请的应用ID；</li>\n<li>client_secret: 在gitHub申请时提供的APP Secret；</li>\n<li>grant_type: 需要填写authorization_code；</li>\n<li>code: 上一步获得的code；</li>\n<li>redirect_uri: 回调地址，需要与注册应用里的回调地址以及第一步的redirect_uri参数一致；</li>\n</ul>\n<p>4.通过第三步的请求，接口返回Token和相关授权数据</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"access_token\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"ACCESS_TOKEN\"</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\" spellcheck=\"true\">// Token的值</span>\n    <span class=\"token string\">\"expires_in\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\" spellcheck=\"true\">// 过期时间</span>\n    <span class=\"token string\">\"uid\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"1234567\"</span><span class=\"token punctuation\">,</span>         <span class=\"token comment\" spellcheck=\"true\">// 当前授权用户的UID</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>5.使用在第四步中获取到的access_token，就可以去获取用户的资源了。</p>\n<p>调用 <code>https://api.github.com/user?access_token=access_token</code> 这个API，就可以获取到用户的基本信息。 </p>\n<p>用户的基本信息内容如下：</p>\n<pre><code>{\n    &quot;login&quot;: &quot;Diamondtest&quot;,\n    &quot;id&quot;: 28478049,\n    &quot;avatar_url&quot;: &quot;https://avatars0.githubusercontent.com/u/28478049?v=3&quot;,\n    &quot;gravatar_id&quot;: &quot;&quot;,\n    &quot;url&quot;: &quot;https://api.github.com/users/Diamondtest&quot;,\n    &quot;html_url&quot;: &quot;https://github.com/Diamondtest&quot;,\n    &quot;followers_url&quot;: &quot;https://api.github.com/users/Diamondtest/followers&quot;,\n    &quot;following_url&quot;: &quot;https://api.github.com/users/Diamondtest/following{/other_user}&quot;,\n    &quot;gists_url&quot;: &quot;https://api.github.com/users/Diamondtest/gists{/gist_id}&quot;,\n    &quot;starred_url&quot;: &quot;https://api.github.com/users/Diamondtest/starred{/owner}{/repo}&quot;,\n    &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/Diamondtest/subscriptions&quot;,\n    &quot;organizations_url&quot;: &quot;https://api.github.com/users/Diamondtest/orgs&quot;,\n    &quot;repos_url&quot;: &quot;https://api.github.com/users/Diamondtest/repos&quot;,\n    &quot;events_url&quot;: &quot;https://api.github.com/users/Diamondtest/events{/privacy}&quot;,\n    &quot;received_events_url&quot;: &quot;https://api.github.com/users/Diamondtest/received_events&quot;,\n    &quot;type&quot;: &quot;User&quot;,\n    &quot;site_admin&quot;: false,\n    &quot;name&quot;: null,\n    &quot;company&quot;: null,\n    &quot;blog&quot;: &quot;&quot;,\n    &quot;location&quot;: null,\n    &quot;email&quot;: null,\n    &quot;hireable&quot;: null,\n    &quot;bio&quot;: null,\n    &quot;public_repos&quot;: 0,\n    &quot;public_gists&quot;: 0,\n    &quot;followers&quot;: 0,\n    &quot;following&quot;: 0,\n    &quot;created_at&quot;: &quot;2017-05-06T08:08:09Z&quot;,\n    &quot;updated_at&quot;: &quot;2017-05-06T08:16:22Z&quot;\n}</code></pre><p>获取到用户信息，平台A进行登陆成功处理，授权登陆流程到此结束😊；</p>\n<p>通过以上的步骤，在平台A和gitHub之间建立了独立的权限层。 该权限由用户授予，并且可以由用户取消。 它不同于第三方应用程序之间的独立性，并且不会相互干扰。 解决了以明文存储帐户密码的问题。</p>\n<h3 id=\"Access-Token\"><a href=\"#Access-Token\" class=\"headerlink\" title=\"Access Token\"></a>Access Token</h3><p>Access Token是用于访问被保护资源的一种凭证，它是一个加密的字符串。</p>\n<p>一般Access Token的有效时间都比较短，需要频繁的使用登陆抄错。<br>如果要解决用户的频繁登陆问题，就需要用到Refresh Token了操作了。<br>那么我们是不是直接多次获取Access Token也是可以的呢？答案是不方便的，主要是因为获取Access Token的时候需要使用到一个code，而这个code是需要用户进行授权操作的，威力避免频繁点击授权操作，就有了Refresh Token，用户不用再次进行操作了。</p>\n<h3 id=\"Refresh-Token\"><a href=\"#Refresh-Token\" class=\"headerlink\" title=\"Refresh Token\"></a>Refresh Token</h3><p>在OAuth机制中，Refresh Token并不是必须设置的，但是不设置Refresh Token，则会增加用户登录的次数，交互不是很友好哈。</p>\n<p>Refresh token的作用是刷新Access token，保证使用的token保持最新的有效token。Refresh Token是保存在客户端的服务器上的，当前的Access Token失效或者过期时，Refresh Token就会去获取一个新的Token，Refresh Token也是一个对客户端加密的字符串。</p>\n<p>一个有效的token返回结果如下：</p>\n<pre><code>    HTTP/1.1 200 OK\n    Content-Type: application/json\n    Cache-Control: no-store\n    Pragma: no-cache\n\n    {\n    &quot;access_token&quot;:&quot;MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3&quot;,\n    &quot;token_type&quot;:&quot;bearer&quot;,\n    &quot;expires_in&quot;:3600,\n    &quot;refresh_token&quot;:&quot;IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk&quot;,\n    &quot;scope&quot;:&quot;create&quot;\n    }</code></pre><p>获取流程原理大致如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201018181410884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Refresh.png\"></p>\n<p>1.客户端通过认证服务器请求认证；</p>\n<p>2.认证服务器校验客户端认证是否有效，如果有效，返回一个Access Token和一个Refresh Token；</p>\n<p>3.客户端通过Access Token去请求服务器的资源；</p>\n<p>4.如果Access Token有效，服务器返回给客户端资源，如果Access Token失效，服务器返回给客户端Token失效的信息，然后客户端会通过Refresh Token再次请求获取新的Access Token；</p>\n<ul>\n<li>Refresh Token本身也是有过期时间的，一般会比Access Token的过期时间长很多，如果想要将Refresh Token设置为永久有效，则可以通过配置参数实现。比如可以设置prompt=consent。</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h3 id=\"OAuth认证流程\"><a href=\"#OAuth认证流程\" class=\"headerlink\" title=\"OAuth认证流程\"></a>OAuth认证流程</h3><h4 id=\"第三方登陆\"><a href=\"#第三方登陆\" class=\"headerlink\" title=\"第三方登陆\"></a>第三方登陆</h4><p>举个板栗：如果要通过第三方网站（例如github）登录没有自己的帐户系统的平台，最传统的方法是直接在平台的着陆页上输入github帐户密码， 可以通过用户帐户和密码用户数据从github获得它，但是这样做有很多缺陷：</p>\n<ul>\n<li>该平台需要以明文格式保存用户的github帐户和密码，这是不安全的；</li>\n<li>该平台拥有在github中获取用户的所有权限信息；</li>\n<li>只有修改密码后，用户才能取消授权平台的权限，但是这将导致用户授权的所有其他第三方应用程序无效，不知这一个应用；</li>\n<li>如果第三方应用被破解，就会有用户密码泄露的风险，和所有使用github登录的网站的数据泄漏；</li>\n</ul>\n<p>为了解决上述问题，有OAuth。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>OAuth在“客户端”和“服务器”之间建立了一个授权层。 “客户端”不可以直接请求登陆“服务器”，而只能通过登录授权层来进行登陆客户端，通过服务端获取用户信息。 “客户端”登录授权层所使用的密码与用户的登陆密码不同。 登录时，用户可以指定授权层的token的授权范围和有效期。</p>\n<p>授权层允许“客户端”登陆之后，“服务端”根据token的权限范围和有效期，向“客户端”返回用户的信息（userInfo）。</p>\n<p>例如现在有一个平台为平台A，平台A的登陆方式只有通过gitHub账号第三方登录机制登录。流程图大致如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201018165245119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center\" alt=\"授权登陆.png\"></p>\n<p>1.用户点击Sign in with gitHub<br> 需要跳转到授权页面， 授权页面的URL中包含的主要参数是如下：</p>\n<ul>\n<li>client_id: 在gitHub中申请应用ID；</li>\n<li>redirect_uri: 授权成功之后要跳转到的地址；</li>\n</ul>\n<p>2.该页面会自动跳转到由redirect_uri在初始参数中定义的URL，并将code参数自动添加到URL的末尾</p>\n<ul>\n<li>gitHub验证：<a href=\"https://github.com/login/oauth/authorize?client_id=myclient_id&amp;scope=user:email\">https://github.com/login/oauth/authorize?client_id=myclient_id&amp;scope=user:email</a></li>\n</ul>\n<p>3.平台A通过上一步获取的code参数换取Token，平台A请求如下接口获取Token</p>\n<p><code>https://github.com/login/oauth/access_token</code>，需要包含以下参数：</p>\n<ul>\n<li>client_id: 在gitHub申请的应用ID；</li>\n<li>client_secret: 在gitHub申请时提供的APP Secret；</li>\n<li>grant_type: 需要填写authorization_code；</li>\n<li>code: 上一步获得的code；</li>\n<li>redirect_uri: 回调地址，需要与注册应用里的回调地址以及第一步的redirect_uri参数一致；</li>\n</ul>\n<p>4.通过第三步的请求，接口返回Token和相关授权数据</p>\n<pre><code class=\"javascript\">{\n    &quot;access_token&quot;: &quot;ACCESS_TOKEN&quot;,        // Token的值\n    &quot;expires_in&quot;: 1000,        // 过期时间\n    &quot;uid&quot;: &quot;1234567&quot;,         // 当前授权用户的UID\n}</code></pre>\n<p>5.使用在第四步中获取到的access_token，就可以去获取用户的资源了。</p>\n<p>调用 <code>https://api.github.com/user?access_token=access_token</code> 这个API，就可以获取到用户的基本信息。 </p>\n<p>用户的基本信息内容如下：</p>\n<pre><code>{\n    &quot;login&quot;: &quot;Diamondtest&quot;,\n    &quot;id&quot;: 28478049,\n    &quot;avatar_url&quot;: &quot;https://avatars0.githubusercontent.com/u/28478049?v=3&quot;,\n    &quot;gravatar_id&quot;: &quot;&quot;,\n    &quot;url&quot;: &quot;https://api.github.com/users/Diamondtest&quot;,\n    &quot;html_url&quot;: &quot;https://github.com/Diamondtest&quot;,\n    &quot;followers_url&quot;: &quot;https://api.github.com/users/Diamondtest/followers&quot;,\n    &quot;following_url&quot;: &quot;https://api.github.com/users/Diamondtest/following{/other_user}&quot;,\n    &quot;gists_url&quot;: &quot;https://api.github.com/users/Diamondtest/gists{/gist_id}&quot;,\n    &quot;starred_url&quot;: &quot;https://api.github.com/users/Diamondtest/starred{/owner}{/repo}&quot;,\n    &quot;subscriptions_url&quot;: &quot;https://api.github.com/users/Diamondtest/subscriptions&quot;,\n    &quot;organizations_url&quot;: &quot;https://api.github.com/users/Diamondtest/orgs&quot;,\n    &quot;repos_url&quot;: &quot;https://api.github.com/users/Diamondtest/repos&quot;,\n    &quot;events_url&quot;: &quot;https://api.github.com/users/Diamondtest/events{/privacy}&quot;,\n    &quot;received_events_url&quot;: &quot;https://api.github.com/users/Diamondtest/received_events&quot;,\n    &quot;type&quot;: &quot;User&quot;,\n    &quot;site_admin&quot;: false,\n    &quot;name&quot;: null,\n    &quot;company&quot;: null,\n    &quot;blog&quot;: &quot;&quot;,\n    &quot;location&quot;: null,\n    &quot;email&quot;: null,\n    &quot;hireable&quot;: null,\n    &quot;bio&quot;: null,\n    &quot;public_repos&quot;: 0,\n    &quot;public_gists&quot;: 0,\n    &quot;followers&quot;: 0,\n    &quot;following&quot;: 0,\n    &quot;created_at&quot;: &quot;2017-05-06T08:08:09Z&quot;,\n    &quot;updated_at&quot;: &quot;2017-05-06T08:16:22Z&quot;\n}</code></pre><p>获取到用户信息，平台A进行登陆成功处理，授权登陆流程到此结束😊；</p>\n<p>通过以上的步骤，在平台A和gitHub之间建立了独立的权限层。 该权限由用户授予，并且可以由用户取消。 它不同于第三方应用程序之间的独立性，并且不会相互干扰。 解决了以明文存储帐户密码的问题。</p>\n<h3 id=\"Access-Token\"><a href=\"#Access-Token\" class=\"headerlink\" title=\"Access Token\"></a>Access Token</h3><p>Access Token是用于访问被保护资源的一种凭证，它是一个加密的字符串。</p>\n<p>一般Access Token的有效时间都比较短，需要频繁的使用登陆抄错。<br>如果要解决用户的频繁登陆问题，就需要用到Refresh Token了操作了。<br>那么我们是不是直接多次获取Access Token也是可以的呢？答案是不方便的，主要是因为获取Access Token的时候需要使用到一个code，而这个code是需要用户进行授权操作的，威力避免频繁点击授权操作，就有了Refresh Token，用户不用再次进行操作了。</p>\n<h3 id=\"Refresh-Token\"><a href=\"#Refresh-Token\" class=\"headerlink\" title=\"Refresh Token\"></a>Refresh Token</h3><p>在OAuth机制中，Refresh Token并不是必须设置的，但是不设置Refresh Token，则会增加用户登录的次数，交互不是很友好哈。</p>\n<p>Refresh token的作用是刷新Access token，保证使用的token保持最新的有效token。Refresh Token是保存在客户端的服务器上的，当前的Access Token失效或者过期时，Refresh Token就会去获取一个新的Token，Refresh Token也是一个对客户端加密的字符串。</p>\n<p>一个有效的token返回结果如下：</p>\n<pre><code>    HTTP/1.1 200 OK\n    Content-Type: application/json\n    Cache-Control: no-store\n    Pragma: no-cache\n\n    {\n    &quot;access_token&quot;:&quot;MTQ0NjJkZmQ5OTM2NDE1ZTZjNGZmZjI3&quot;,\n    &quot;token_type&quot;:&quot;bearer&quot;,\n    &quot;expires_in&quot;:3600,\n    &quot;refresh_token&quot;:&quot;IwOGYzYTlmM2YxOTQ5MGE3YmNmMDFkNTVk&quot;,\n    &quot;scope&quot;:&quot;create&quot;\n    }</code></pre><p>获取流程原理大致如下：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201018181410884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0h5YWxvaWR6,size_16,color_FFFFFF,t_70#pic_center\" alt=\"Refresh.png\"></p>\n<p>1.客户端通过认证服务器请求认证；</p>\n<p>2.认证服务器校验客户端认证是否有效，如果有效，返回一个Access Token和一个Refresh Token；</p>\n<p>3.客户端通过Access Token去请求服务器的资源；</p>\n<p>4.如果Access Token有效，服务器返回给客户端资源，如果Access Token失效，服务器返回给客户端Token失效的信息，然后客户端会通过Refresh Token再次请求获取新的Access Token；</p>\n<ul>\n<li>Refresh Token本身也是有过期时间的，一般会比Access Token的过期时间长很多，如果想要将Refresh Token设置为永久有效，则可以通过配置参数实现。比如可以设置prompt=consent。</li>\n</ul>\n"},{"title":"ios safari 返回时不执行代码问题解析","date":"2020-12-22T13:12:57.000Z","img":"/medias/featureimages/7.jpg","top":false,"cover":true,"coverImg":"/medias/featureimages7.jpg","toc":false,"mathjax":false,"summary":"最近在调试钉钉/企业微信时发现一个问题，在ios上使用返回键时，上一页的内容不执行js代码，导致react的生命周期，包componentDidMount都不执行，由于这两个平台都没有开发者工具，无法进行调试着实废了一番功夫。","_content":"\n#### 引言\n\n  最近在调试钉钉/企业微信时发现一个问题，在ios上使用返回键时，上一页的内容不执行js代码，导致react的生命周期，包componentDidMount都不执行，由于这两个平台都没有开发者工具，无法进行调试着实废了一番功夫。\n\n- 问题描述\n\n  最近在开发钉钉/企业微信内嵌第三方页面时，使用返回时，会导致页面白屏问题，问题比较棘手，花了3-4day用来定位问题，期间走了一些弯路。\n  ![](https://pic.downk.cc/item/5fea06dd3ffa7d37b382ee7e.png)\n\n  如上图，页面上有两个含有滚动条的DIV，一个是顶部的下拉modal，一个是body中的列表，但点击到详情的时候（第三张图），然后再点击返回，这个时候，顶部的下拉modal中就会有部分内容不限时，如图二，其实是有内容的，这个时候，只要将body中的内容滚动一下，modal的内容就都出来了。\n\n- 以下是分析过程：\n\n##### 数据问题\n\n  看到问题后第一个怀疑的就是数据和代码结构问题,导致数据被覆盖或者没恶意截取的前11个，以为切换不同的账号，发现每次都显示前11个，后面的不显示，代码如下\n```javascript\n  // 渲染全部标签\n  renderALlTags = () => {\n    const { currentTag, activeIndex, selectTabIndex } = this.state;\n    const { backlogTagList } = this.props;\n    const showTagList = backlogTagList?.[activeIndex === 0 ? 'pendingList' : 'doneList'] || [];\n    return (\n      <div className={style.tagList}>\n        {showTagList.map((item) => {\n          return (\n            <div\n              className={`${style.tagItem} ${\n                Number(currentTag) === item.tag && selectTabIndex === activeIndex\n                  ? style.active\n                  : ''\n              }`}\n              key={item.tag}\n              onClick={() => this.handleTagChange(item.tag)}\n            >\n              {item.tagName} {filterNum(item.total)}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n```\ncheck代码发现和上面的没有关系。\n然后使用强制滚动，发现代码压根就没有执行，连console都没有打印。。。。\n\n\n##### 运行环境问题\n\n  - 因为再本地开发环境没有出现过这个问题，只有再部署到服务器上才出现这个问题，所以出现这个问题应该和环境有关。\n  - 接下来发现再有再ios系统上才有这个问题，安卓并没有，果然是运行环境的问题😄，高兴的太早了。\n  - 知道环境问题后，就开始一通百度。。。。\n  解决方案如下：\n\n```javascript\n  $(function () {\n      var isPageHide = false;\n      window.addEventListener('pageshow', function () {\n          if (isPageHide) {\n              window.location.reload();\n          }\n      });\n      window.addEventListener('pagehide', function () {\n          isPageHide = true;\n      });\n  })\n  //或者\n  function pushHistory(){\n  window.addEventListener(\"popstate\", function(e){\n    alert(\"回退！\");\n \n    // window.history.back();\n    //在历史记录中后退,这就像用户点击浏览器的后退按钮一样。\n \n    // window.history.go(-1);\n    //你可以使用go()方法从当前会话的历史记录中加载页面（当前页面位置索引值为0，上一页就是-1，下一页为1）。\n \n    // self.location=document.referrer;\n    //可以获取前一页面的URL地址的方法,并返回上一页。\n  }, false); \n  var state = {\n    title:\"\",\n    url: \"#\"\n  }; \n  window.history.pushState(state, \"\", \"#\"); \n};\n\n```\n巴拉巴拉找了一堆，popstate，pageshow，forceUpdate等。。。一个一个的试，发现都不行，此处省略十万个字。\n绝望了。。。。\n\n##### 注释代码和不使用第三方库\n  1.没有办法的情况下开始注释代码，不断的注释，不断的尝试，居然没有一次可以，发现问题隐藏比较深。\n  2.注释代码不行就开始吧使用的antd库全部用原生div进行重写，写完之后发现问题依然存在，可以肯定这个不是和分装有关，开始怀疑是某些样式或者js在这个环境下不支持。\n  3.这个时候开始想怎么能debugger一下，开始找各种工具尝试。\n  emm，一天过去了，问题依然没有头绪\n\n\n##### Safari调试模式\n\n  1.突然想起来，safari在mac上提供了开发者模式，可以联机调试，说干就干，扒token，授权，然后启动。\n  2.系统倒是正常运行起来了，但是问题没有复现，反复确定后发现只有在钉钉/企业微信里才会出现这个问题，既然有Safari的调试思路，找钉钉的开发这模式。\n  3.钉钉文档：https://ding-doc.dingtalk.com/doc#/kn6zg7/qg4y64 调试工具不支持ios版本。。。无解\n\n  ![](https://pic.downk.cc/item/5fea0bb23ffa7d37b38512c9.png)\n\n  这时候已经陷入绝望了。无法调试，问题就无法定位，只能靠盲猜。\n\n##### react-infinite-scroller研读\n\n  没有其他便捷的方法后，开始分析代码，考虑有可能出现问题的位置进行定位。react-infinite-scroller这个库的文档仔细看了一下\n  https://www.npmjs.com/package/react-infinite-scroller\n  有几个API比较可疑但是试了也没有问题；\n  ![](https://pic.downk.cc/item/5fea0cdd3ffa7d37b3859cf0.png)\n\n  在这里发现了滚动区域的问题，但是试了一下，改变滚动区绑定的位置问题依然存在：\n  ```javascript\n  <InfiniteScroll\n    initialLoad={false}\n    pageStart={0}\n    loadMore={this.handleInfiniteOnLoad}\n    hasMore={true}\n    getScrollParent={() => this.scrollParentRef}\n    threshold={350}\n  >\n  //滚动内容\n  </InfiniteScroll>\n  ```\n  看了这个文档后开始往滚动区域上想，然后各种尝试，各种绑定，居然都不能滚动加载更多了😭。\n  然后就开始研究滚动问题。最开始怀疑过，但是自认为不可能，没有往这个方面深入。\n\n##### 问题解决\n\n  ios页面加载不全不能滚动\n\n  - 问题描述 ：ios从首页进入，跳转其他页面再后退到首页，首页只显示一屏内容且无法滚动。\n  - 问题原因：在于ios浏览器内核的别致渲染逻辑：它会预先找到相应的overflow: scroll元素，如果子元素高度高于父元素，则建立原生的scrollView实现滚动。问题就出现在这个“预先”上，它预先获取的高度并不是子元素渲染后的真实高度。\n  - 解决办法：给设置了滚动的#root元素下的子元素wrapper设置min-height: 100vh; 先让wrapper内容设置为滚动区域，进行撑开，然后将滚动加载更多事件绑定在wrapper上进行监听。\n\n  代码如下：\n  ```css\n    #root{\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%!important;\n      // height: 100%!important;\n      overflow: scroll!important;\n      -webkit-overflow-scrolling: touch!important;\n    }\n    .wrapper {\n      overflow: auto;\n      height: auto;\n      background-color: #fff;\n      margin-top: 50px;\n      min-height: 100vh;\n    }\n  ```\n```javascript\n  <div\n    className={style.wrapper}\n    ref={(ref) => (this.scrollParentRef = ref)}\n    id=\"scrollableDiv\"\n  >\n    <InfiniteScroll\n      initialLoad={false}\n      pageStart={0}\n      loadMore={this.handleInfiniteOnLoad}\n      hasMore={true}\n      getScrollParent={() => this.scrollParentRef}\n      threshold={350}\n      scrollableTarget=\"scrollableDiv\"\n    >\n    // 内容代码\n    </InfiniteScroll>\n  </div>\n```\n\n然后本地调试发现没有新的问题，部署，check，问题解决。\n\n##### 问题总结\n\n  1.由于环境问题，无法进行直观的调试，这是一个很大的问题，后续研究一下有没有更好的工具。\n  2.盲目的以经验来判断是自己的方向错误导致耽误了一些时间。\n  3.问题的原因同事也有怀疑过，并且提出过，由于自己试的不够彻底盲目的认为不是这个原因导致走了弯路。","source":"_posts/ios-goBack-catch.md","raw":"---\ntitle: ios safari 返回时不执行代码问题解析\ndate: 2020-12-22 21:12:57\nimg: /medias/featureimages/7.jpg\ntop: false\ncover: true\ncoverImg: /medias/featureimages7.jpg\ntoc: false\nmathjax: false\nsummary: 最近在调试钉钉/企业微信时发现一个问题，在ios上使用返回键时，上一页的内容不执行js代码，导致react的生命周期，包componentDidMount都不执行，由于这两个平台都没有开发者工具，无法进行调试着实废了一番功夫。\ncategories: 前端\ntags:\n- debug\n- Safari\n- web\n---\n\n#### 引言\n\n  最近在调试钉钉/企业微信时发现一个问题，在ios上使用返回键时，上一页的内容不执行js代码，导致react的生命周期，包componentDidMount都不执行，由于这两个平台都没有开发者工具，无法进行调试着实废了一番功夫。\n\n- 问题描述\n\n  最近在开发钉钉/企业微信内嵌第三方页面时，使用返回时，会导致页面白屏问题，问题比较棘手，花了3-4day用来定位问题，期间走了一些弯路。\n  ![](https://pic.downk.cc/item/5fea06dd3ffa7d37b382ee7e.png)\n\n  如上图，页面上有两个含有滚动条的DIV，一个是顶部的下拉modal，一个是body中的列表，但点击到详情的时候（第三张图），然后再点击返回，这个时候，顶部的下拉modal中就会有部分内容不限时，如图二，其实是有内容的，这个时候，只要将body中的内容滚动一下，modal的内容就都出来了。\n\n- 以下是分析过程：\n\n##### 数据问题\n\n  看到问题后第一个怀疑的就是数据和代码结构问题,导致数据被覆盖或者没恶意截取的前11个，以为切换不同的账号，发现每次都显示前11个，后面的不显示，代码如下\n```javascript\n  // 渲染全部标签\n  renderALlTags = () => {\n    const { currentTag, activeIndex, selectTabIndex } = this.state;\n    const { backlogTagList } = this.props;\n    const showTagList = backlogTagList?.[activeIndex === 0 ? 'pendingList' : 'doneList'] || [];\n    return (\n      <div className={style.tagList}>\n        {showTagList.map((item) => {\n          return (\n            <div\n              className={`${style.tagItem} ${\n                Number(currentTag) === item.tag && selectTabIndex === activeIndex\n                  ? style.active\n                  : ''\n              }`}\n              key={item.tag}\n              onClick={() => this.handleTagChange(item.tag)}\n            >\n              {item.tagName} {filterNum(item.total)}\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n```\ncheck代码发现和上面的没有关系。\n然后使用强制滚动，发现代码压根就没有执行，连console都没有打印。。。。\n\n\n##### 运行环境问题\n\n  - 因为再本地开发环境没有出现过这个问题，只有再部署到服务器上才出现这个问题，所以出现这个问题应该和环境有关。\n  - 接下来发现再有再ios系统上才有这个问题，安卓并没有，果然是运行环境的问题😄，高兴的太早了。\n  - 知道环境问题后，就开始一通百度。。。。\n  解决方案如下：\n\n```javascript\n  $(function () {\n      var isPageHide = false;\n      window.addEventListener('pageshow', function () {\n          if (isPageHide) {\n              window.location.reload();\n          }\n      });\n      window.addEventListener('pagehide', function () {\n          isPageHide = true;\n      });\n  })\n  //或者\n  function pushHistory(){\n  window.addEventListener(\"popstate\", function(e){\n    alert(\"回退！\");\n \n    // window.history.back();\n    //在历史记录中后退,这就像用户点击浏览器的后退按钮一样。\n \n    // window.history.go(-1);\n    //你可以使用go()方法从当前会话的历史记录中加载页面（当前页面位置索引值为0，上一页就是-1，下一页为1）。\n \n    // self.location=document.referrer;\n    //可以获取前一页面的URL地址的方法,并返回上一页。\n  }, false); \n  var state = {\n    title:\"\",\n    url: \"#\"\n  }; \n  window.history.pushState(state, \"\", \"#\"); \n};\n\n```\n巴拉巴拉找了一堆，popstate，pageshow，forceUpdate等。。。一个一个的试，发现都不行，此处省略十万个字。\n绝望了。。。。\n\n##### 注释代码和不使用第三方库\n  1.没有办法的情况下开始注释代码，不断的注释，不断的尝试，居然没有一次可以，发现问题隐藏比较深。\n  2.注释代码不行就开始吧使用的antd库全部用原生div进行重写，写完之后发现问题依然存在，可以肯定这个不是和分装有关，开始怀疑是某些样式或者js在这个环境下不支持。\n  3.这个时候开始想怎么能debugger一下，开始找各种工具尝试。\n  emm，一天过去了，问题依然没有头绪\n\n\n##### Safari调试模式\n\n  1.突然想起来，safari在mac上提供了开发者模式，可以联机调试，说干就干，扒token，授权，然后启动。\n  2.系统倒是正常运行起来了，但是问题没有复现，反复确定后发现只有在钉钉/企业微信里才会出现这个问题，既然有Safari的调试思路，找钉钉的开发这模式。\n  3.钉钉文档：https://ding-doc.dingtalk.com/doc#/kn6zg7/qg4y64 调试工具不支持ios版本。。。无解\n\n  ![](https://pic.downk.cc/item/5fea0bb23ffa7d37b38512c9.png)\n\n  这时候已经陷入绝望了。无法调试，问题就无法定位，只能靠盲猜。\n\n##### react-infinite-scroller研读\n\n  没有其他便捷的方法后，开始分析代码，考虑有可能出现问题的位置进行定位。react-infinite-scroller这个库的文档仔细看了一下\n  https://www.npmjs.com/package/react-infinite-scroller\n  有几个API比较可疑但是试了也没有问题；\n  ![](https://pic.downk.cc/item/5fea0cdd3ffa7d37b3859cf0.png)\n\n  在这里发现了滚动区域的问题，但是试了一下，改变滚动区绑定的位置问题依然存在：\n  ```javascript\n  <InfiniteScroll\n    initialLoad={false}\n    pageStart={0}\n    loadMore={this.handleInfiniteOnLoad}\n    hasMore={true}\n    getScrollParent={() => this.scrollParentRef}\n    threshold={350}\n  >\n  //滚动内容\n  </InfiniteScroll>\n  ```\n  看了这个文档后开始往滚动区域上想，然后各种尝试，各种绑定，居然都不能滚动加载更多了😭。\n  然后就开始研究滚动问题。最开始怀疑过，但是自认为不可能，没有往这个方面深入。\n\n##### 问题解决\n\n  ios页面加载不全不能滚动\n\n  - 问题描述 ：ios从首页进入，跳转其他页面再后退到首页，首页只显示一屏内容且无法滚动。\n  - 问题原因：在于ios浏览器内核的别致渲染逻辑：它会预先找到相应的overflow: scroll元素，如果子元素高度高于父元素，则建立原生的scrollView实现滚动。问题就出现在这个“预先”上，它预先获取的高度并不是子元素渲染后的真实高度。\n  - 解决办法：给设置了滚动的#root元素下的子元素wrapper设置min-height: 100vh; 先让wrapper内容设置为滚动区域，进行撑开，然后将滚动加载更多事件绑定在wrapper上进行监听。\n\n  代码如下：\n  ```css\n    #root{\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%!important;\n      // height: 100%!important;\n      overflow: scroll!important;\n      -webkit-overflow-scrolling: touch!important;\n    }\n    .wrapper {\n      overflow: auto;\n      height: auto;\n      background-color: #fff;\n      margin-top: 50px;\n      min-height: 100vh;\n    }\n  ```\n```javascript\n  <div\n    className={style.wrapper}\n    ref={(ref) => (this.scrollParentRef = ref)}\n    id=\"scrollableDiv\"\n  >\n    <InfiniteScroll\n      initialLoad={false}\n      pageStart={0}\n      loadMore={this.handleInfiniteOnLoad}\n      hasMore={true}\n      getScrollParent={() => this.scrollParentRef}\n      threshold={350}\n      scrollableTarget=\"scrollableDiv\"\n    >\n    // 内容代码\n    </InfiniteScroll>\n  </div>\n```\n\n然后本地调试发现没有新的问题，部署，check，问题解决。\n\n##### 问题总结\n\n  1.由于环境问题，无法进行直观的调试，这是一个很大的问题，后续研究一下有没有更好的工具。\n  2.盲目的以经验来判断是自己的方向错误导致耽误了一些时间。\n  3.问题的原因同事也有怀疑过，并且提出过，由于自己试的不够彻底盲目的认为不是这个原因导致走了弯路。","slug":"ios-goBack-catch","published":1,"updated":"2021-01-25T12:10:24.055Z","_id":"ckj8txcpk001dhi60dqoefmsl","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>  最近在调试钉钉/企业微信时发现一个问题，在ios上使用返回键时，上一页的内容不执行js代码，导致react的生命周期，包componentDidMount都不执行，由于这两个平台都没有开发者工具，无法进行调试着实废了一番功夫。</p>\n<ul>\n<li><p>问题描述</p>\n<p>最近在开发钉钉/企业微信内嵌第三方页面时，使用返回时，会导致页面白屏问题，问题比较棘手，花了3-4day用来定位问题，期间走了一些弯路。<br><img src=\"https://pic.downk.cc/item/5fea06dd3ffa7d37b382ee7e.png\" alt=\"\"></p>\n<p>如上图，页面上有两个含有滚动条的DIV，一个是顶部的下拉modal，一个是body中的列表，但点击到详情的时候（第三张图），然后再点击返回，这个时候，顶部的下拉modal中就会有部分内容不限时，如图二，其实是有内容的，这个时候，只要将body中的内容滚动一下，modal的内容就都出来了。</p>\n</li>\n<li><p>以下是分析过程：</p>\n</li>\n</ul>\n<h5 id=\"数据问题\"><a href=\"#数据问题\" class=\"headerlink\" title=\"数据问题\"></a>数据问题</h5><p>  看到问题后第一个怀疑的就是数据和代码结构问题,导致数据被覆盖或者没恶意截取的前11个，以为切换不同的账号，发现每次都显示前11个，后面的不显示，代码如下</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\" spellcheck=\"true\">// 渲染全部标签</span>\n  renderALlTags <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> currentTag<span class=\"token punctuation\">,</span> activeIndex<span class=\"token punctuation\">,</span> selectTabIndex <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> backlogTagList <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> showTagList <span class=\"token operator\">=</span> backlogTagList<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">[</span>activeIndex <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">'pendingList'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'doneList'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">.</span>tagList<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>showTagList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div\n              className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>style<span class=\"token punctuation\">.</span>tagItem<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>\n                <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>currentTag<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> item<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">&amp;&amp;</span> selectTabIndex <span class=\"token operator\">===</span> activeIndex\n                  <span class=\"token operator\">?</span> style<span class=\"token punctuation\">.</span>active\n                  <span class=\"token punctuation\">:</span> <span class=\"token string\">''</span>\n              <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span>\n              key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">}</span>\n              onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleTagChange</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>\n              <span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>tagName<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span><span class=\"token function\">filterNum</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>total<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>check代码发现和上面的没有关系。<br>然后使用强制滚动，发现代码压根就没有执行，连console都没有打印。。。。</p>\n<h5 id=\"运行环境问题\"><a href=\"#运行环境问题\" class=\"headerlink\" title=\"运行环境问题\"></a>运行环境问题</h5><ul>\n<li>因为再本地开发环境没有出现过这个问题，只有再部署到服务器上才出现这个问题，所以出现这个问题应该和环境有关。</li>\n<li>接下来发现再有再ios系统上才有这个问题，安卓并没有，果然是运行环境的问题😄，高兴的太早了。</li>\n<li>知道环境问题后，就开始一通百度。。。。<br>解决方案如下：</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">var</span> isPageHide <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pageshow'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isPageHide<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              window<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span><span class=\"token function\">reload</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pagehide'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          isPageHide <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\" spellcheck=\"true\">//或者</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">pushHistory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"popstate\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"回退！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// window.history.back();</span>\n    <span class=\"token comment\" spellcheck=\"true\">//在历史记录中后退,这就像用户点击浏览器的后退按钮一样。</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// window.history.go(-1);</span>\n    <span class=\"token comment\" spellcheck=\"true\">//你可以使用go()方法从当前会话的历史记录中加载页面（当前页面位置索引值为0，上一页就是-1，下一页为1）。</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// self.location=document.referrer;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//可以获取前一页面的URL地址的方法,并返回上一页。</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token keyword\">var</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n    url<span class=\"token punctuation\">:</span> <span class=\"token string\">\"#\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n  window<span class=\"token punctuation\">.</span>history<span class=\"token punctuation\">.</span><span class=\"token function\">pushState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>巴拉巴拉找了一堆，popstate，pageshow，forceUpdate等。。。一个一个的试，发现都不行，此处省略十万个字。<br>绝望了。。。。</p>\n<h5 id=\"注释代码和不使用第三方库\"><a href=\"#注释代码和不使用第三方库\" class=\"headerlink\" title=\"注释代码和不使用第三方库\"></a>注释代码和不使用第三方库</h5><p>  1.没有办法的情况下开始注释代码，不断的注释，不断的尝试，居然没有一次可以，发现问题隐藏比较深。<br>  2.注释代码不行就开始吧使用的antd库全部用原生div进行重写，写完之后发现问题依然存在，可以肯定这个不是和分装有关，开始怀疑是某些样式或者js在这个环境下不支持。<br>  3.这个时候开始想怎么能debugger一下，开始找各种工具尝试。<br>  emm，一天过去了，问题依然没有头绪</p>\n<h5 id=\"Safari调试模式\"><a href=\"#Safari调试模式\" class=\"headerlink\" title=\"Safari调试模式\"></a>Safari调试模式</h5><p>  1.突然想起来，safari在mac上提供了开发者模式，可以联机调试，说干就干，扒token，授权，然后启动。<br>  2.系统倒是正常运行起来了，但是问题没有复现，反复确定后发现只有在钉钉/企业微信里才会出现这个问题，既然有Safari的调试思路，找钉钉的开发这模式。<br>  3.钉钉文档：<a href=\"https://ding-doc.dingtalk.com/doc#/kn6zg7/qg4y64\">https://ding-doc.dingtalk.com/doc#/kn6zg7/qg4y64</a> 调试工具不支持ios版本。。。无解</p>\n<p>  <img src=\"https://pic.downk.cc/item/5fea0bb23ffa7d37b38512c9.png\" alt=\"\"></p>\n<p>  这时候已经陷入绝望了。无法调试，问题就无法定位，只能靠盲猜。</p>\n<h5 id=\"react-infinite-scroller研读\"><a href=\"#react-infinite-scroller研读\" class=\"headerlink\" title=\"react-infinite-scroller研读\"></a>react-infinite-scroller研读</h5><p>  没有其他便捷的方法后，开始分析代码，考虑有可能出现问题的位置进行定位。react-infinite-scroller这个库的文档仔细看了一下<br>  <a href=\"https://www.npmjs.com/package/react-infinite-scroller\">https://www.npmjs.com/package/react-infinite-scroller</a><br>  有几个API比较可疑但是试了也没有问题；<br>  <img src=\"https://pic.downk.cc/item/5fea0cdd3ffa7d37b3859cf0.png\" alt=\"\"></p>\n<p>  在这里发现了滚动区域的问题，但是试了一下，改变滚动区绑定的位置问题依然存在：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token operator\">&lt;</span>InfiniteScroll\n    initialLoad<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n    pageStart<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n    loadMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInfiniteOnLoad<span class=\"token punctuation\">}</span>\n    hasMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n    getScrollParent<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scrollParentRef<span class=\"token punctuation\">}</span>\n    threshold<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">350</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n  <span class=\"token comment\" spellcheck=\"true\">//滚动内容</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>InfiniteScroll<span class=\"token operator\">></span></code></pre>\n<p>  看了这个文档后开始往滚动区域上想，然后各种尝试，各种绑定，居然都不能滚动加载更多了😭。<br>  然后就开始研究滚动问题。最开始怀疑过，但是自认为不可能，没有往这个方面深入。</p>\n<h5 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h5><p>  ios页面加载不全不能滚动</p>\n<ul>\n<li><p>问题描述 ：ios从首页进入，跳转其他页面再后退到首页，首页只显示一屏内容且无法滚动。</p>\n</li>\n<li><p>问题原因：在于ios浏览器内核的别致渲染逻辑：它会预先找到相应的overflow: scroll元素，如果子元素高度高于父元素，则建立原生的scrollView实现滚动。问题就出现在这个“预先”上，它预先获取的高度并不是子元素渲染后的真实高度。</p>\n</li>\n<li><p>解决办法：给设置了滚动的#root元素下的子元素wrapper设置min-height: 100vh; 先让wrapper内容设置为滚动区域，进行撑开，然后将滚动加载更多事件绑定在wrapper上进行监听。</p>\n<p>代码如下：</p>\n<pre class=\" language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token id\">#root</span></span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  // <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token important\">!important</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> scroll!important<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">-webkit-overflow-scrolling</span><span class=\"token punctuation\">:</span> touch!important<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token selector\"><span class=\"token class\">.wrapper</span> </span><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#fff</span><span class=\"token punctuation\">;</span>\n  <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> <span class=\"token number\">50</span>px<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">min-height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span>vh<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>div\nclassName<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">.</span>wrapper<span class=\"token punctuation\">}</span>\nref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>ref<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scrollParentRef <span class=\"token operator\">=</span> ref<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\nid<span class=\"token operator\">=</span><span class=\"token string\">\"scrollableDiv\"</span>\n<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>InfiniteScroll\n  initialLoad<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span>\n  pageStart<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n  loadMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleInfiniteOnLoad<span class=\"token punctuation\">}</span>\n  hasMore<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span>\n  getScrollParent<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>scrollParentRef<span class=\"token punctuation\">}</span>\n  threshold<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">350</span><span class=\"token punctuation\">}</span>\n  scrollableTarget<span class=\"token operator\">=</span><span class=\"token string\">\"scrollableDiv\"</span>\n<span class=\"token operator\">></span>\n<span class=\"token comment\" spellcheck=\"true\">// 内容代码</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>InfiniteScroll<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre>\n</li>\n</ul>\n<p>然后本地调试发现没有新的问题，部署，check，问题解决。</p>\n<h5 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h5><p>  1.由于环境问题，无法进行直观的调试，这是一个很大的问题，后续研究一下有没有更好的工具。<br>  2.盲目的以经验来判断是自己的方向错误导致耽误了一些时间。<br>  3.问题的原因同事也有怀疑过，并且提出过，由于自己试的不够彻底盲目的认为不是这个原因导致走了弯路。</p>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h4 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h4><p>  最近在调试钉钉/企业微信时发现一个问题，在ios上使用返回键时，上一页的内容不执行js代码，导致react的生命周期，包componentDidMount都不执行，由于这两个平台都没有开发者工具，无法进行调试着实废了一番功夫。</p>\n<ul>\n<li><p>问题描述</p>\n<p>最近在开发钉钉/企业微信内嵌第三方页面时，使用返回时，会导致页面白屏问题，问题比较棘手，花了3-4day用来定位问题，期间走了一些弯路。<br><img src=\"https://pic.downk.cc/item/5fea06dd3ffa7d37b382ee7e.png\" alt=\"\"></p>\n<p>如上图，页面上有两个含有滚动条的DIV，一个是顶部的下拉modal，一个是body中的列表，但点击到详情的时候（第三张图），然后再点击返回，这个时候，顶部的下拉modal中就会有部分内容不限时，如图二，其实是有内容的，这个时候，只要将body中的内容滚动一下，modal的内容就都出来了。</p>\n</li>\n<li><p>以下是分析过程：</p>\n</li>\n</ul>\n<h5 id=\"数据问题\"><a href=\"#数据问题\" class=\"headerlink\" title=\"数据问题\"></a>数据问题</h5><p>  看到问题后第一个怀疑的就是数据和代码结构问题,导致数据被覆盖或者没恶意截取的前11个，以为切换不同的账号，发现每次都显示前11个，后面的不显示，代码如下</p>\n<pre><code class=\"javascript\">  // 渲染全部标签\n  renderALlTags = () =&gt; {\n    const { currentTag, activeIndex, selectTabIndex } = this.state;\n    const { backlogTagList } = this.props;\n    const showTagList = backlogTagList?.[activeIndex === 0 ? &#39;pendingList&#39; : &#39;doneList&#39;] || [];\n    return (\n      &lt;div className={style.tagList}&gt;\n        {showTagList.map((item) =&gt; {\n          return (\n            &lt;div\n              className={`${style.tagItem} ${\n                Number(currentTag) === item.tag &amp;&amp; selectTabIndex === activeIndex\n                  ? style.active\n                  : &#39;&#39;\n              }`}\n              key={item.tag}\n              onClick={() =&gt; this.handleTagChange(item.tag)}\n            &gt;\n              {item.tagName} {filterNum(item.total)}\n            &lt;/div&gt;\n          );\n        })}\n      &lt;/div&gt;\n    );\n  };</code></pre>\n<p>check代码发现和上面的没有关系。<br>然后使用强制滚动，发现代码压根就没有执行，连console都没有打印。。。。</p>\n<h5 id=\"运行环境问题\"><a href=\"#运行环境问题\" class=\"headerlink\" title=\"运行环境问题\"></a>运行环境问题</h5><ul>\n<li>因为再本地开发环境没有出现过这个问题，只有再部署到服务器上才出现这个问题，所以出现这个问题应该和环境有关。</li>\n<li>接下来发现再有再ios系统上才有这个问题，安卓并没有，果然是运行环境的问题😄，高兴的太早了。</li>\n<li>知道环境问题后，就开始一通百度。。。。<br>解决方案如下：</li>\n</ul>\n<pre><code class=\"javascript\">  $(function () {\n      var isPageHide = false;\n      window.addEventListener(&#39;pageshow&#39;, function () {\n          if (isPageHide) {\n              window.location.reload();\n          }\n      });\n      window.addEventListener(&#39;pagehide&#39;, function () {\n          isPageHide = true;\n      });\n  })\n  //或者\n  function pushHistory(){\n  window.addEventListener(&quot;popstate&quot;, function(e){\n    alert(&quot;回退！&quot;);\n\n    // window.history.back();\n    //在历史记录中后退,这就像用户点击浏览器的后退按钮一样。\n\n    // window.history.go(-1);\n    //你可以使用go()方法从当前会话的历史记录中加载页面（当前页面位置索引值为0，上一页就是-1，下一页为1）。\n\n    // self.location=document.referrer;\n    //可以获取前一页面的URL地址的方法,并返回上一页。\n  }, false); \n  var state = {\n    title:&quot;&quot;,\n    url: &quot;#&quot;\n  }; \n  window.history.pushState(state, &quot;&quot;, &quot;#&quot;); \n};\n</code></pre>\n<p>巴拉巴拉找了一堆，popstate，pageshow，forceUpdate等。。。一个一个的试，发现都不行，此处省略十万个字。<br>绝望了。。。。</p>\n<h5 id=\"注释代码和不使用第三方库\"><a href=\"#注释代码和不使用第三方库\" class=\"headerlink\" title=\"注释代码和不使用第三方库\"></a>注释代码和不使用第三方库</h5><p>  1.没有办法的情况下开始注释代码，不断的注释，不断的尝试，居然没有一次可以，发现问题隐藏比较深。<br>  2.注释代码不行就开始吧使用的antd库全部用原生div进行重写，写完之后发现问题依然存在，可以肯定这个不是和分装有关，开始怀疑是某些样式或者js在这个环境下不支持。<br>  3.这个时候开始想怎么能debugger一下，开始找各种工具尝试。<br>  emm，一天过去了，问题依然没有头绪</p>\n<h5 id=\"Safari调试模式\"><a href=\"#Safari调试模式\" class=\"headerlink\" title=\"Safari调试模式\"></a>Safari调试模式</h5><p>  1.突然想起来，safari在mac上提供了开发者模式，可以联机调试，说干就干，扒token，授权，然后启动。<br>  2.系统倒是正常运行起来了，但是问题没有复现，反复确定后发现只有在钉钉/企业微信里才会出现这个问题，既然有Safari的调试思路，找钉钉的开发这模式。<br>  3.钉钉文档：<a href=\"https://ding-doc.dingtalk.com/doc#/kn6zg7/qg4y64\">https://ding-doc.dingtalk.com/doc#/kn6zg7/qg4y64</a> 调试工具不支持ios版本。。。无解</p>\n<p>  <img src=\"https://pic.downk.cc/item/5fea0bb23ffa7d37b38512c9.png\" alt=\"\"></p>\n<p>  这时候已经陷入绝望了。无法调试，问题就无法定位，只能靠盲猜。</p>\n<h5 id=\"react-infinite-scroller研读\"><a href=\"#react-infinite-scroller研读\" class=\"headerlink\" title=\"react-infinite-scroller研读\"></a>react-infinite-scroller研读</h5><p>  没有其他便捷的方法后，开始分析代码，考虑有可能出现问题的位置进行定位。react-infinite-scroller这个库的文档仔细看了一下<br>  <a href=\"https://www.npmjs.com/package/react-infinite-scroller\">https://www.npmjs.com/package/react-infinite-scroller</a><br>  有几个API比较可疑但是试了也没有问题；<br>  <img src=\"https://pic.downk.cc/item/5fea0cdd3ffa7d37b3859cf0.png\" alt=\"\"></p>\n<p>  在这里发现了滚动区域的问题，但是试了一下，改变滚动区绑定的位置问题依然存在：</p>\n<pre><code class=\"javascript\">  &lt;InfiniteScroll\n    initialLoad={false}\n    pageStart={0}\n    loadMore={this.handleInfiniteOnLoad}\n    hasMore={true}\n    getScrollParent={() =&gt; this.scrollParentRef}\n    threshold={350}\n  &gt;\n  //滚动内容\n  &lt;/InfiniteScroll&gt;</code></pre>\n<p>  看了这个文档后开始往滚动区域上想，然后各种尝试，各种绑定，居然都不能滚动加载更多了😭。<br>  然后就开始研究滚动问题。最开始怀疑过，但是自认为不可能，没有往这个方面深入。</p>\n<h5 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h5><p>  ios页面加载不全不能滚动</p>\n<ul>\n<li><p>问题描述 ：ios从首页进入，跳转其他页面再后退到首页，首页只显示一屏内容且无法滚动。</p>\n</li>\n<li><p>问题原因：在于ios浏览器内核的别致渲染逻辑：它会预先找到相应的overflow: scroll元素，如果子元素高度高于父元素，则建立原生的scrollView实现滚动。问题就出现在这个“预先”上，它预先获取的高度并不是子元素渲染后的真实高度。</p>\n</li>\n<li><p>解决办法：给设置了滚动的#root元素下的子元素wrapper设置min-height: 100vh; 先让wrapper内容设置为滚动区域，进行撑开，然后将滚动加载更多事件绑定在wrapper上进行监听。</p>\n<p>代码如下：</p>\n<pre><code class=\"css\">#root{\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%!important;\n  // height: 100%!important;\n  overflow: scroll!important;\n  -webkit-overflow-scrolling: touch!important;\n}\n.wrapper {\n  overflow: auto;\n  height: auto;\n  background-color: #fff;\n  margin-top: 50px;\n  min-height: 100vh;\n}</code></pre>\n<pre><code class=\"javascript\">&lt;div\nclassName={style.wrapper}\nref={(ref) =&gt; (this.scrollParentRef = ref)}\nid=&quot;scrollableDiv&quot;\n&gt;\n&lt;InfiniteScroll\n  initialLoad={false}\n  pageStart={0}\n  loadMore={this.handleInfiniteOnLoad}\n  hasMore={true}\n  getScrollParent={() =&gt; this.scrollParentRef}\n  threshold={350}\n  scrollableTarget=&quot;scrollableDiv&quot;\n&gt;\n// 内容代码\n&lt;/InfiniteScroll&gt;\n&lt;/div&gt;</code></pre>\n</li>\n</ul>\n<p>然后本地调试发现没有新的问题，部署，check，问题解决。</p>\n<h5 id=\"问题总结\"><a href=\"#问题总结\" class=\"headerlink\" title=\"问题总结\"></a>问题总结</h5><p>  1.由于环境问题，无法进行直观的调试，这是一个很大的问题，后续研究一下有没有更好的工具。<br>  2.盲目的以经验来判断是自己的方向错误导致耽误了一些时间。<br>  3.问题的原因同事也有怀疑过，并且提出过，由于自己试的不够彻底盲目的认为不是这个原因导致走了弯路。</p>\n"},{"title":"react性能优化","date":"2020-07-25T03:59:22.000Z","img":"/medias/featureimages/9.jpg","top":false,"cover":true,"coverImg":"/medias/featureimages/9.jpg","toc":true,"mathjax":false,"summary":"在一个庞大的项目中，后期我们一定会去思考怎样提高react的性能，下面是我平时开发总结出来的一些经验。","_content":"\n#### React组件性能优化\n\nReact是一个专注于UI层的框架，它使用虚拟DOM技术，以保证它UI的高速渲染；使用单向数据流，因此它数据绑定更加简单；那么它内部是如何保持简单高效的UI渲染呢？这种渲染机制有可能存在什么性能问题呢？\n\n\n\n##### 1.render函数\n  (1)在调用组件时，如果某个属性值是函数，避免使用箭头函数，不然每次比较props中该属性时都是不同的。\n  正确的做法\n```javascript\n  import React, { Component } from 'react';\n  class Demo extends Component {\n    handleClick = () =>{\n      //TODO\n    }\n    render() {\n        return (\n            <ChildDom  onClick={this.handleClick} /> //构造函数每一次渲染的时候只会执行一遍；\n        );\n    }\n  }\n```\n不推介例子：\n```javascript\n  <ChildDom  onClick={()=>{this.handleClick()}} /> //都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。\n  <ChildDom  onClick={this.handleClick.bind(this)} /> //在每次render()的时候都会重新执行一遍函数；\n```\n  (2)在shouldComponentUpdate生命周期中进行比较，减少render函数刷新次数。\n  使用浅比较时，如果是对象类型需要特别注意（这里也可以使用ladash库来实现）\n  demo:\n```javascript\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      JSON.stringify(nextState.rosterList) === JSON.stringify(this.staterosterList)\n    ){\n      return false;\n    }\n    return true;\n  }\n```\n使用React.memo进行组件记忆；\n纯函数的话也可以使用React.memo来实现类似的功能。或者可以减少不必要的state参数使用。\n\n##### 2.key值的使用\n\n  (1)react组件在装载过程中，react通过在render方法在内存中产生一个树形结构，树上的节点代表一个react组件或者原生的Dom元素，这个树形结构就是我们所谓的Vitural Dom，react根据这个来渲染产生浏览器的Dom树。\n  (2)react在更新阶段对比原有的Vitural Dom和新生成的Vitural Dom，找出不同之处，在根据不同来渲染Dom树。\n  (3)react为了追求高性能，采用了时间复杂度为O(N)来比较两个属性结构的区别，因为要确切比较两个树形结构，需要通过O(N^3),这会降低性能.\n\n##### 3.减少使用state来共享数据,跨组件使用数据是推介使用redux。\n  如果有如下情况意味着你要使用redux\n  1.组件首其他不相关组件的状态控制\n  2.组件之间不是子父组件关系\n  3.许多不相关的组件以相同的方式更新状态\n  4.状态以许多不同的方式更新\n\n##### 4.组件懒加载\n1、webpack+es6的import(this.props.children为回调函数);\n\n```javascript\n\nimport React , { Component } from 'react';\n\nexport default class  extends Component {\n    constructor ( props ) {\n        super ( props );\n        this.load(props); //调用下面load\n        this.state={\n            Com:null\n        };\n    };\n    load(props){ //this.props.load()就是调用indexrou.jsx传过来的函数\n        props.load().then((Com)=>{\n           console.log(Com.default);//得到的就是传过来的函数\n            this.setState({\n                Com:Com.default?Com.default:null\n            });\n        });\n    };\n    render () {\n        if(!this.state.Com){\n            return null;\n        }else{\n            return this.props.children(this.state.Com);\n        }\n    };\n};\n\n```\n```javascript\nimport Load from '../components/lazy';\n\nlet Demo2=function(){\n    return <Load load={()=>import('../components/demo2')}>\n        {(Com)=><Com/>} \n    </Load>;\n};\n```\n\n2、webpack+es6的import纯粹的高阶组价\n```javascript\nimport React , { Component } from 'react';\n\nexport default function(loading){//传过来一个函数\n    return class extends Component {\n        constructor ( props ) {\n            super ( props );\n            this.state={\n                Com:null\n            };\n            this.load();\n        };\n        load(props){\n            loading().then((Com)=>{  //调用函数获取它传过来的路径\n                this.setState({\n                    Com:Com.default?Com.default:null\n                });\n            });\n        };\n        render () {\n            let Com=this.state.Com;\n            return Com?<Com/>:null;\n        };\n    };\n}\n```\n在router路由里 indexrou.js\n```javascript\nimport Load from '../components/lazy';\nlet Demo2=Load(()=>import('../components/demo2'));\n\n```\n3、webpack+es6的import +async（高阶函数）\n```javascript\nimport React , { Component } from 'react';\n\nexport default function(loading){\n    return class extends Component {\n        constructor ( props ) {\n            super ( props );\n            this.state={\n                Com:null\n            };\n        };\n        //即使是同步的话执行的也是promise.resolve这个方法，将同步代码包装一层，进行同步\n        //await后面接收的是值或promise\n        async componentWillMount(){\n            let Com=await loading();  //依次执行，只有一个await往下走，Com是有值的\n            this.setState({\n                Com:Com.default?Com.default:null\n            });\n        };\n        render () {\n            let Com=this.state.Com;\n            return Com?<Com/>:null;\n        };\n    };\n}\n```\n在router路由里 indexrou.jsx\n\n```javascript\nimport Load from '../components/lazy';\nlet Demo2=Load(()=>import('../components/demo2'));\n```\n\n4、webpack+require.ensure (高阶组价)\n```javascript\nimport React , { Component } from 'react';\n\nexport default function(loading){\n    return class extends Component {\n        constructor ( props ) {\n            super ( props );\n            this.state={\n                Com:null\n            };\n        };\n        componentWillMount(){\n            new Promise((resolve,reject)=>{\n                require.ensure([], function(require) {//[]依赖项\n                    var c = loading().default;\n                    console.log(c);\n                    resolve(c);\n                });\n            }).then((data)=>{\n                this.setState({\n                    Com:data\n                });\n            });\n        };\n        render(){\n            let Com=this.state.Com;\n            return Com?<Com/>:null;\n        };\n    };\n};\n```\n在router路由里 indexrou.jsx\n\n```javascript\n  import Load from '../components/lazy';\n\n  let Demo2=Load(()=>\n    require('../components/demo2')\n  );\n\n````\n\n##### 5.使用 React Fragments 避免额外标记\n\n```javascript\nradiosBtns()\n    return(\n        <React.Fragment>\n            <RadioButton value=\"1\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(1)+' fs16'} />\n            </RadioButton>\n            <RadioButton value=\"2\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(2)+' fs16'} />\n            </RadioButton>\n            <RadioButton value=\"3\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(3)+' fs16'}/>\n            </RadioButton>\n            <RadioButton value=\"4\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(4)+' fs16'}/>\n            </RadioButton>\n            <RadioButton value=\"5\" key=\"5\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(5)+' fs16'}/>\n            </RadioButton>\n        </React.Fragment>\n    )\n}\n```\n##### 6.不要使用内联函数定义\neg: 一个内联的“DOM组件”事件处理程序\n```javascript\n\nclass Demo extends Component {\n  render() {\n    return (\n      <div>\n        <button\n          onClick={() => {\n            this.setState({ clicked: true })\n          }}\n        >\n          XXX\n        </button>\n      </div>\n    )\n  }\n}\n```\n##### 7.优化 React 中的条件渲染\n  可以使用三元，if-else，and运算符(&&)。推荐使用&&来表示；\n  尽量使用return null来判断显隐，而不是用css的display：none，避免回流；\n```javascript\n  render(){\n    let con = this.state.goods[0].text ? <h1>{this.state.goods[0].text}</h1>:null   //条件渲染 \n    return(\n        <div>\n          {con}\n        </div>\n    )\n  }\n```\n##### 8.事件节流和防抖\n（参考节流防抖功能实现，这里不多赘述）\n\n##### 9.不要在render中生成新的引用\n定义函数、使用内联样式或者动态生成一些不依赖state或props的jsx这些，凡是不依赖state或props的都应该提到render之外，否则会造成每次render的时候生成新的引用，会导致在diff算法对比属性或节点的过程中发现两个引用不一致，对于react来说，这说明属性值发生了改变，最后会被替换成新的引用，造成性能浪费。例如函数应该放在render函数外定义，样式应该单独建一个文件，然后引入，使用生命周期函数或者自定义函数动态生成一些不依赖state或props的jsx。\n```javascript\nimport React, { Fragment } from 'react';\nimport 'antd/dist/antd.css'\nimport {Input,Button,List} from 'antd'\n const TodoListUI=(props)=>{\n     return (\n        <Fragment>\n            <div className=\"form-box\">\n            <Input placeholder=\"请输入\" value={props.inputValue} onChange={props.handleChange}style={{width:'300px'}}/>\n            <Button type=\"primary\" style={{marginLeft:'20px'}} onClick={props.handleSubmit}>提交</Button>\n        </div>\n        <div  className=\"list\">\n            <List\n                size=\"small\"\n                bordered\n                dataSource={props.list}\n                renderItem={(item,index) => (<List.Item onClick={()=>{props.handleDelete(index)}}>{item}</List.Item>)}\n            />\n        </div>      \n        </Fragment>\n     )\n }\n\nexport default TodoListUI;\n```\n##### 10.ProtoTypes 的验证会损耗性能\n  建议用环境变量控制在生产环境关闭类型验证\n\n```javascript\n  IncomingTasks.propTypes = {\n    reTryGetData: PropTypes.func,\n  }\n```\n\n##### 11.尽量少直接操作dom\n  用setTimeout或不可控的refs等dom操作；\n  setTimeout会导致state多次更新，refs会直接操作dom，消耗大量性能；\n```javascript\n  if(!textDom){\n      textDom = document.getElementById('textArea');\n  }\n  return (\n    <div contentEditable=\"true\"\n      id=\"textArea\"\n      onInput={this.onChangeAtPerson}\n      className={style.testArea}\n      placeholder=\"请输入评论，可以@其他人\"\n    />\n  )\n```\n```javascript\n  return (<div ref={com => (this.refs = com)}>\n    //TODO\n  </div>)\n```","source":"_posts/react-performance.md","raw":"---\ntitle: react性能优化\ndate: 2020-07-25 11:59:22\nimg: /medias/featureimages/9.jpg\ntop: false\ncover: true\ncoverImg: /medias/featureimages/9.jpg\ntoc: true\nmathjax: false\nsummary: 在一个庞大的项目中，后期我们一定会去思考怎样提高react的性能，下面是我平时开发总结出来的一些经验。\ncategories: 前端\ntags:\n- React\n- 性能优化\n---\n\n#### React组件性能优化\n\nReact是一个专注于UI层的框架，它使用虚拟DOM技术，以保证它UI的高速渲染；使用单向数据流，因此它数据绑定更加简单；那么它内部是如何保持简单高效的UI渲染呢？这种渲染机制有可能存在什么性能问题呢？\n\n\n\n##### 1.render函数\n  (1)在调用组件时，如果某个属性值是函数，避免使用箭头函数，不然每次比较props中该属性时都是不同的。\n  正确的做法\n```javascript\n  import React, { Component } from 'react';\n  class Demo extends Component {\n    handleClick = () =>{\n      //TODO\n    }\n    render() {\n        return (\n            <ChildDom  onClick={this.handleClick} /> //构造函数每一次渲染的时候只会执行一遍；\n        );\n    }\n  }\n```\n不推介例子：\n```javascript\n  <ChildDom  onClick={()=>{this.handleClick()}} /> //都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。\n  <ChildDom  onClick={this.handleClick.bind(this)} /> //在每次render()的时候都会重新执行一遍函数；\n```\n  (2)在shouldComponentUpdate生命周期中进行比较，减少render函数刷新次数。\n  使用浅比较时，如果是对象类型需要特别注意（这里也可以使用ladash库来实现）\n  demo:\n```javascript\n  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      JSON.stringify(nextState.rosterList) === JSON.stringify(this.staterosterList)\n    ){\n      return false;\n    }\n    return true;\n  }\n```\n使用React.memo进行组件记忆；\n纯函数的话也可以使用React.memo来实现类似的功能。或者可以减少不必要的state参数使用。\n\n##### 2.key值的使用\n\n  (1)react组件在装载过程中，react通过在render方法在内存中产生一个树形结构，树上的节点代表一个react组件或者原生的Dom元素，这个树形结构就是我们所谓的Vitural Dom，react根据这个来渲染产生浏览器的Dom树。\n  (2)react在更新阶段对比原有的Vitural Dom和新生成的Vitural Dom，找出不同之处，在根据不同来渲染Dom树。\n  (3)react为了追求高性能，采用了时间复杂度为O(N)来比较两个属性结构的区别，因为要确切比较两个树形结构，需要通过O(N^3),这会降低性能.\n\n##### 3.减少使用state来共享数据,跨组件使用数据是推介使用redux。\n  如果有如下情况意味着你要使用redux\n  1.组件首其他不相关组件的状态控制\n  2.组件之间不是子父组件关系\n  3.许多不相关的组件以相同的方式更新状态\n  4.状态以许多不同的方式更新\n\n##### 4.组件懒加载\n1、webpack+es6的import(this.props.children为回调函数);\n\n```javascript\n\nimport React , { Component } from 'react';\n\nexport default class  extends Component {\n    constructor ( props ) {\n        super ( props );\n        this.load(props); //调用下面load\n        this.state={\n            Com:null\n        };\n    };\n    load(props){ //this.props.load()就是调用indexrou.jsx传过来的函数\n        props.load().then((Com)=>{\n           console.log(Com.default);//得到的就是传过来的函数\n            this.setState({\n                Com:Com.default?Com.default:null\n            });\n        });\n    };\n    render () {\n        if(!this.state.Com){\n            return null;\n        }else{\n            return this.props.children(this.state.Com);\n        }\n    };\n};\n\n```\n```javascript\nimport Load from '../components/lazy';\n\nlet Demo2=function(){\n    return <Load load={()=>import('../components/demo2')}>\n        {(Com)=><Com/>} \n    </Load>;\n};\n```\n\n2、webpack+es6的import纯粹的高阶组价\n```javascript\nimport React , { Component } from 'react';\n\nexport default function(loading){//传过来一个函数\n    return class extends Component {\n        constructor ( props ) {\n            super ( props );\n            this.state={\n                Com:null\n            };\n            this.load();\n        };\n        load(props){\n            loading().then((Com)=>{  //调用函数获取它传过来的路径\n                this.setState({\n                    Com:Com.default?Com.default:null\n                });\n            });\n        };\n        render () {\n            let Com=this.state.Com;\n            return Com?<Com/>:null;\n        };\n    };\n}\n```\n在router路由里 indexrou.js\n```javascript\nimport Load from '../components/lazy';\nlet Demo2=Load(()=>import('../components/demo2'));\n\n```\n3、webpack+es6的import +async（高阶函数）\n```javascript\nimport React , { Component } from 'react';\n\nexport default function(loading){\n    return class extends Component {\n        constructor ( props ) {\n            super ( props );\n            this.state={\n                Com:null\n            };\n        };\n        //即使是同步的话执行的也是promise.resolve这个方法，将同步代码包装一层，进行同步\n        //await后面接收的是值或promise\n        async componentWillMount(){\n            let Com=await loading();  //依次执行，只有一个await往下走，Com是有值的\n            this.setState({\n                Com:Com.default?Com.default:null\n            });\n        };\n        render () {\n            let Com=this.state.Com;\n            return Com?<Com/>:null;\n        };\n    };\n}\n```\n在router路由里 indexrou.jsx\n\n```javascript\nimport Load from '../components/lazy';\nlet Demo2=Load(()=>import('../components/demo2'));\n```\n\n4、webpack+require.ensure (高阶组价)\n```javascript\nimport React , { Component } from 'react';\n\nexport default function(loading){\n    return class extends Component {\n        constructor ( props ) {\n            super ( props );\n            this.state={\n                Com:null\n            };\n        };\n        componentWillMount(){\n            new Promise((resolve,reject)=>{\n                require.ensure([], function(require) {//[]依赖项\n                    var c = loading().default;\n                    console.log(c);\n                    resolve(c);\n                });\n            }).then((data)=>{\n                this.setState({\n                    Com:data\n                });\n            });\n        };\n        render(){\n            let Com=this.state.Com;\n            return Com?<Com/>:null;\n        };\n    };\n};\n```\n在router路由里 indexrou.jsx\n\n```javascript\n  import Load from '../components/lazy';\n\n  let Demo2=Load(()=>\n    require('../components/demo2')\n  );\n\n````\n\n##### 5.使用 React Fragments 避免额外标记\n\n```javascript\nradiosBtns()\n    return(\n        <React.Fragment>\n            <RadioButton value=\"1\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(1)+' fs16'} />\n            </RadioButton>\n            <RadioButton value=\"2\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(2)+' fs16'} />\n            </RadioButton>\n            <RadioButton value=\"3\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(3)+' fs16'}/>\n            </RadioButton>\n            <RadioButton value=\"4\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(4)+' fs16'}/>\n            </RadioButton>\n            <RadioButton value=\"5\" key=\"5\" style={{marginLeft:'10px'}}>\n                <Icon type=\"flag\" className={flag(5)+' fs16'}/>\n            </RadioButton>\n        </React.Fragment>\n    )\n}\n```\n##### 6.不要使用内联函数定义\neg: 一个内联的“DOM组件”事件处理程序\n```javascript\n\nclass Demo extends Component {\n  render() {\n    return (\n      <div>\n        <button\n          onClick={() => {\n            this.setState({ clicked: true })\n          }}\n        >\n          XXX\n        </button>\n      </div>\n    )\n  }\n}\n```\n##### 7.优化 React 中的条件渲染\n  可以使用三元，if-else，and运算符(&&)。推荐使用&&来表示；\n  尽量使用return null来判断显隐，而不是用css的display：none，避免回流；\n```javascript\n  render(){\n    let con = this.state.goods[0].text ? <h1>{this.state.goods[0].text}</h1>:null   //条件渲染 \n    return(\n        <div>\n          {con}\n        </div>\n    )\n  }\n```\n##### 8.事件节流和防抖\n（参考节流防抖功能实现，这里不多赘述）\n\n##### 9.不要在render中生成新的引用\n定义函数、使用内联样式或者动态生成一些不依赖state或props的jsx这些，凡是不依赖state或props的都应该提到render之外，否则会造成每次render的时候生成新的引用，会导致在diff算法对比属性或节点的过程中发现两个引用不一致，对于react来说，这说明属性值发生了改变，最后会被替换成新的引用，造成性能浪费。例如函数应该放在render函数外定义，样式应该单独建一个文件，然后引入，使用生命周期函数或者自定义函数动态生成一些不依赖state或props的jsx。\n```javascript\nimport React, { Fragment } from 'react';\nimport 'antd/dist/antd.css'\nimport {Input,Button,List} from 'antd'\n const TodoListUI=(props)=>{\n     return (\n        <Fragment>\n            <div className=\"form-box\">\n            <Input placeholder=\"请输入\" value={props.inputValue} onChange={props.handleChange}style={{width:'300px'}}/>\n            <Button type=\"primary\" style={{marginLeft:'20px'}} onClick={props.handleSubmit}>提交</Button>\n        </div>\n        <div  className=\"list\">\n            <List\n                size=\"small\"\n                bordered\n                dataSource={props.list}\n                renderItem={(item,index) => (<List.Item onClick={()=>{props.handleDelete(index)}}>{item}</List.Item>)}\n            />\n        </div>      \n        </Fragment>\n     )\n }\n\nexport default TodoListUI;\n```\n##### 10.ProtoTypes 的验证会损耗性能\n  建议用环境变量控制在生产环境关闭类型验证\n\n```javascript\n  IncomingTasks.propTypes = {\n    reTryGetData: PropTypes.func,\n  }\n```\n\n##### 11.尽量少直接操作dom\n  用setTimeout或不可控的refs等dom操作；\n  setTimeout会导致state多次更新，refs会直接操作dom，消耗大量性能；\n```javascript\n  if(!textDom){\n      textDom = document.getElementById('textArea');\n  }\n  return (\n    <div contentEditable=\"true\"\n      id=\"textArea\"\n      onInput={this.onChangeAtPerson}\n      className={style.testArea}\n      placeholder=\"请输入评论，可以@其他人\"\n    />\n  )\n```\n```javascript\n  return (<div ref={com => (this.refs = com)}>\n    //TODO\n  </div>)\n```","slug":"react-performance","published":1,"updated":"2020-08-24T17:30:03.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcpn001ehi60avyh8glc","content":"<h4 id=\"React组件性能优化\"><a href=\"#React组件性能优化\" class=\"headerlink\" title=\"React组件性能优化\"></a>React组件性能优化</h4><p>React是一个专注于UI层的框架，它使用虚拟DOM技术，以保证它UI的高速渲染；使用单向数据流，因此它数据绑定更加简单；那么它内部是如何保持简单高效的UI渲染呢？这种渲染机制有可能存在什么性能问题呢？</p>\n<h5 id=\"1-render函数\"><a href=\"#1-render函数\" class=\"headerlink\" title=\"1.render函数\"></a>1.render函数</h5><p>  (1)在调用组件时，如果某个属性值是函数，避免使用箭头函数，不然每次比较props中该属性时都是不同的。<br>  正确的做法</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    handleClick <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//TODO</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>ChildDom  onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">//构造函数每一次渲染的时候只会执行一遍；</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>不推介例子：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token operator\">&lt;</span>ChildDom  onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">//都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。</span>\n  <span class=\"token operator\">&lt;</span>ChildDom  onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token comment\" spellcheck=\"true\">//在每次render()的时候都会重新执行一遍函数；</span></code></pre>\n<p>  (2)在shouldComponentUpdate生命周期中进行比较，减少render函数刷新次数。<br>  使用浅比较时，如果是对象类型需要特别注意（这里也可以使用ladash库来实现）<br>  demo:</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>\n      JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>nextState<span class=\"token punctuation\">.</span>rosterList<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>staterosterList<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>使用React.memo进行组件记忆；<br>纯函数的话也可以使用React.memo来实现类似的功能。或者可以减少不必要的state参数使用。</p>\n<h5 id=\"2-key值的使用\"><a href=\"#2-key值的使用\" class=\"headerlink\" title=\"2.key值的使用\"></a>2.key值的使用</h5><p>  (1)react组件在装载过程中，react通过在render方法在内存中产生一个树形结构，树上的节点代表一个react组件或者原生的Dom元素，这个树形结构就是我们所谓的Vitural Dom，react根据这个来渲染产生浏览器的Dom树。<br>  (2)react在更新阶段对比原有的Vitural Dom和新生成的Vitural Dom，找出不同之处，在根据不同来渲染Dom树。<br>  (3)react为了追求高性能，采用了时间复杂度为O(N)来比较两个属性结构的区别，因为要确切比较两个树形结构，需要通过O(N^3),这会降低性能.</p>\n<h5 id=\"3-减少使用state来共享数据-跨组件使用数据是推介使用redux。\"><a href=\"#3-减少使用state来共享数据-跨组件使用数据是推介使用redux。\" class=\"headerlink\" title=\"3.减少使用state来共享数据,跨组件使用数据是推介使用redux。\"></a>3.减少使用state来共享数据,跨组件使用数据是推介使用redux。</h5><p>  如果有如下情况意味着你要使用redux<br>  1.组件首其他不相关组件的状态控制<br>  2.组件之间不是子父组件关系<br>  3.许多不相关的组件以相同的方式更新状态<br>  4.状态以许多不同的方式更新</p>\n<h5 id=\"4-组件懒加载\"><a href=\"#4-组件懒加载\" class=\"headerlink\" title=\"4.组件懒加载\"></a>4.组件懒加载</h5><p>1、webpack+es6的import(this.props.children为回调函数);</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">import</span> React <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span>  <span class=\"token class-name\">extends</span> Component <span class=\"token punctuation\">{</span>\n    constructor <span class=\"token punctuation\">(</span> props <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span> <span class=\"token punctuation\">(</span> props <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//调用下面load</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n            Com<span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//this.props.load()就是调用indexrou.jsx传过来的函数</span>\n        props<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Com<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n           console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Com<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//得到的就是传过来的函数</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                Com<span class=\"token punctuation\">:</span>Com<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token operator\">?</span>Com<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    render <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Com<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">children</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Com<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Load <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/lazy'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> Demo2<span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Load load<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../components/demo2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>Com<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>Com<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span> \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Load<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>2、webpack+es6的import纯粹的高阶组价</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//传过来一个函数</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Component <span class=\"token punctuation\">{</span>\n        constructor <span class=\"token punctuation\">(</span> props <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">super</span> <span class=\"token punctuation\">(</span> props <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n                Com<span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">load</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Com<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">//调用函数获取它传过来的路径</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                    Com<span class=\"token punctuation\">:</span>Com<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token operator\">?</span>Com<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        render <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> Com<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Com<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Com<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span>Com<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>在router路由里 indexrou.js</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Load <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/lazy'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> Demo2<span class=\"token operator\">=</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../components/demo2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>3、webpack+es6的import +async（高阶函数）</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Component <span class=\"token punctuation\">{</span>\n        constructor <span class=\"token punctuation\">(</span> props <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">super</span> <span class=\"token punctuation\">(</span> props <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n                Com<span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//即使是同步的话执行的也是promise.resolve这个方法，将同步代码包装一层，进行同步</span>\n        <span class=\"token comment\" spellcheck=\"true\">//await后面接收的是值或promise</span>\n        <span class=\"token keyword\">async</span> <span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> Com<span class=\"token operator\">=</span><span class=\"token keyword\">await</span> <span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//依次执行，只有一个await往下走，Com是有值的</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                Com<span class=\"token punctuation\">:</span>Com<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token operator\">?</span>Com<span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        render <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> Com<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Com<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Com<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span>Com<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>在router路由里 indexrou.jsx</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> Load <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/lazy'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> Demo2<span class=\"token operator\">=</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token keyword\">import</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../components/demo2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>4、webpack+require.ensure (高阶组价)</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> Component <span class=\"token punctuation\">{</span>\n        constructor <span class=\"token punctuation\">(</span> props <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">super</span> <span class=\"token punctuation\">(</span> props <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>\n                Com<span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">componentWillMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>reject<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n                require<span class=\"token punctuation\">.</span><span class=\"token function\">ensure</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>require<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//[]依赖项</span>\n                    <span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token function\">loading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n                    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n                    Com<span class=\"token punctuation\">:</span>data\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> Com<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>Com<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> Com<span class=\"token operator\">?</span><span class=\"token operator\">&lt;</span>Com<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>在router路由里 indexrou.jsx</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">import</span> Load <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/lazy'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> Demo2<span class=\"token operator\">=</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span>\n    <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../components/demo2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h5 id=\"5-使用-React-Fragments-避免额外标记\"><a href=\"#5-使用-React-Fragments-避免额外标记\" class=\"headerlink\" title=\"5.使用 React Fragments 避免额外标记\"></a>5.使用 React Fragments 避免额外标记</h5><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">radiosBtns</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>RadioButton value<span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>marginLeft<span class=\"token punctuation\">:</span><span class=\"token string\">'10px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Icon type<span class=\"token operator\">=</span><span class=\"token string\">\"flag\"</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' fs16'</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RadioButton<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>RadioButton value<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>marginLeft<span class=\"token punctuation\">:</span><span class=\"token string\">'10px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Icon type<span class=\"token operator\">=</span><span class=\"token string\">\"flag\"</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' fs16'</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RadioButton<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>RadioButton value<span class=\"token operator\">=</span><span class=\"token string\">\"3\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>marginLeft<span class=\"token punctuation\">:</span><span class=\"token string\">'10px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Icon type<span class=\"token operator\">=</span><span class=\"token string\">\"flag\"</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' fs16'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RadioButton<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>RadioButton value<span class=\"token operator\">=</span><span class=\"token string\">\"4\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>marginLeft<span class=\"token punctuation\">:</span><span class=\"token string\">'10px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Icon type<span class=\"token operator\">=</span><span class=\"token string\">\"flag\"</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' fs16'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RadioButton<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>RadioButton value<span class=\"token operator\">=</span><span class=\"token string\">\"5\"</span> key<span class=\"token operator\">=</span><span class=\"token string\">\"5\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>marginLeft<span class=\"token punctuation\">:</span><span class=\"token string\">'10px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>Icon type<span class=\"token operator\">=</span><span class=\"token string\">\"flag\"</span> className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">flag</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">' fs16'</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>RadioButton<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>React<span class=\"token punctuation\">.</span>Fragment<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"6-不要使用内联函数定义\"><a href=\"#6-不要使用内联函数定义\" class=\"headerlink\" title=\"6.不要使用内联函数定义\"></a>6.不要使用内联函数定义</h5><p>eg: 一个内联的“DOM组件”事件处理程序</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Demo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button\n          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> clicked<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          XXX\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"7-优化-React-中的条件渲染\"><a href=\"#7-优化-React-中的条件渲染\" class=\"headerlink\" title=\"7.优化 React 中的条件渲染\"></a>7.优化 React 中的条件渲染</h5><p>  可以使用三元，if-else，and运算符(&amp;&amp;)。推荐使用&amp;&amp;来表示；<br>  尽量使用return null来判断显隐，而不是用css的display：none，避免回流；</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> con <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>goods<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>goods<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">:</span><span class=\"token keyword\">null</span>   <span class=\"token comment\" spellcheck=\"true\">//条件渲染 </span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span>con<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"8-事件节流和防抖\"><a href=\"#8-事件节流和防抖\" class=\"headerlink\" title=\"8.事件节流和防抖\"></a>8.事件节流和防抖</h5><p>（参考节流防抖功能实现，这里不多赘述）</p>\n<h5 id=\"9-不要在render中生成新的引用\"><a href=\"#9-不要在render中生成新的引用\" class=\"headerlink\" title=\"9.不要在render中生成新的引用\"></a>9.不要在render中生成新的引用</h5><p>定义函数、使用内联样式或者动态生成一些不依赖state或props的jsx这些，凡是不依赖state或props的都应该提到render之外，否则会造成每次render的时候生成新的引用，会导致在diff算法对比属性或节点的过程中发现两个引用不一致，对于react来说，这说明属性值发生了改变，最后会被替换成新的引用，造成性能浪费。例如函数应该放在render函数外定义，样式应该单独建一个文件，然后引入，使用生命周期函数或者自定义函数动态生成一些不依赖state或props的jsx。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Fragment <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'antd/dist/antd.css'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Input<span class=\"token punctuation\">,</span>Button<span class=\"token punctuation\">,</span>List<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'antd'</span>\n <span class=\"token keyword\">const</span> TodoListUI<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"form-box\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Input placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入\"</span> value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">}</span> onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleChange<span class=\"token punctuation\">}</span>style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">:</span><span class=\"token string\">'300px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Button type<span class=\"token operator\">=</span><span class=\"token string\">\"primary\"</span> style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>marginLeft<span class=\"token punctuation\">:</span><span class=\"token string\">'20px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>handleSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>提交<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div  className<span class=\"token operator\">=</span><span class=\"token string\">\"list\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>List\n                size<span class=\"token operator\">=</span><span class=\"token string\">\"small\"</span>\n                bordered\n                dataSource<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">}</span>\n                renderItem<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>List<span class=\"token punctuation\">.</span>Item onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">handleDelete</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>List<span class=\"token punctuation\">.</span>Item<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>      \n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span>\n     <span class=\"token punctuation\">)</span>\n <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoListUI<span class=\"token punctuation\">;</span></code></pre>\n<h5 id=\"10-ProtoTypes-的验证会损耗性能\"><a href=\"#10-ProtoTypes-的验证会损耗性能\" class=\"headerlink\" title=\"10.ProtoTypes 的验证会损耗性能\"></a>10.ProtoTypes 的验证会损耗性能</h5><p>  建议用环境变量控制在生产环境关闭类型验证</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  IncomingTasks<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    reTryGetData<span class=\"token punctuation\">:</span> PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"11-尽量少直接操作dom\"><a href=\"#11-尽量少直接操作dom\" class=\"headerlink\" title=\"11.尽量少直接操作dom\"></a>11.尽量少直接操作dom</h5><p>  用setTimeout或不可控的refs等dom操作；<br>  setTimeout会导致state多次更新，refs会直接操作dom，消耗大量性能；</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>textDom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      textDom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'textArea'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div contentEditable<span class=\"token operator\">=</span><span class=\"token string\">\"true\"</span>\n      id<span class=\"token operator\">=</span><span class=\"token string\">\"textArea\"</span>\n      onInput<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onChangeAtPerson<span class=\"token punctuation\">}</span>\n      className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">.</span>testArea<span class=\"token punctuation\">}</span>\n      placeholder<span class=\"token operator\">=</span><span class=\"token string\">\"请输入评论，可以@其他人\"</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span></code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>com <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>refs <span class=\"token operator\">=</span> com<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token comment\" spellcheck=\"true\">//TODO</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h4 id=\"React组件性能优化\"><a href=\"#React组件性能优化\" class=\"headerlink\" title=\"React组件性能优化\"></a>React组件性能优化</h4><p>React是一个专注于UI层的框架，它使用虚拟DOM技术，以保证它UI的高速渲染；使用单向数据流，因此它数据绑定更加简单；那么它内部是如何保持简单高效的UI渲染呢？这种渲染机制有可能存在什么性能问题呢？</p>\n<h5 id=\"1-render函数\"><a href=\"#1-render函数\" class=\"headerlink\" title=\"1.render函数\"></a>1.render函数</h5><p>  (1)在调用组件时，如果某个属性值是函数，避免使用箭头函数，不然每次比较props中该属性时都是不同的。<br>  正确的做法</p>\n<pre><code class=\"javascript\">  import React, { Component } from &#39;react&#39;;\n  class Demo extends Component {\n    handleClick = () =&gt;{\n      //TODO\n    }\n    render() {\n        return (\n            &lt;ChildDom  onClick={this.handleClick} /&gt; //构造函数每一次渲染的时候只会执行一遍；\n        );\n    }\n  }</code></pre>\n<p>不推介例子：</p>\n<pre><code class=\"javascript\">  &lt;ChildDom  onClick={()=&gt;{this.handleClick()}} /&gt; //都会生成一个新的箭头函数，即使两个箭头函数的内容是一样的。\n  &lt;ChildDom  onClick={this.handleClick.bind(this)} /&gt; //在每次render()的时候都会重新执行一遍函数；</code></pre>\n<p>  (2)在shouldComponentUpdate生命周期中进行比较，减少render函数刷新次数。<br>  使用浅比较时，如果是对象类型需要特别注意（这里也可以使用ladash库来实现）<br>  demo:</p>\n<pre><code class=\"javascript\">  shouldComponentUpdate(nextProps, nextState) {\n    if (\n      JSON.stringify(nextState.rosterList) === JSON.stringify(this.staterosterList)\n    ){\n      return false;\n    }\n    return true;\n  }</code></pre>\n<p>使用React.memo进行组件记忆；<br>纯函数的话也可以使用React.memo来实现类似的功能。或者可以减少不必要的state参数使用。</p>\n<h5 id=\"2-key值的使用\"><a href=\"#2-key值的使用\" class=\"headerlink\" title=\"2.key值的使用\"></a>2.key值的使用</h5><p>  (1)react组件在装载过程中，react通过在render方法在内存中产生一个树形结构，树上的节点代表一个react组件或者原生的Dom元素，这个树形结构就是我们所谓的Vitural Dom，react根据这个来渲染产生浏览器的Dom树。<br>  (2)react在更新阶段对比原有的Vitural Dom和新生成的Vitural Dom，找出不同之处，在根据不同来渲染Dom树。<br>  (3)react为了追求高性能，采用了时间复杂度为O(N)来比较两个属性结构的区别，因为要确切比较两个树形结构，需要通过O(N^3),这会降低性能.</p>\n<h5 id=\"3-减少使用state来共享数据-跨组件使用数据是推介使用redux。\"><a href=\"#3-减少使用state来共享数据-跨组件使用数据是推介使用redux。\" class=\"headerlink\" title=\"3.减少使用state来共享数据,跨组件使用数据是推介使用redux。\"></a>3.减少使用state来共享数据,跨组件使用数据是推介使用redux。</h5><p>  如果有如下情况意味着你要使用redux<br>  1.组件首其他不相关组件的状态控制<br>  2.组件之间不是子父组件关系<br>  3.许多不相关的组件以相同的方式更新状态<br>  4.状态以许多不同的方式更新</p>\n<h5 id=\"4-组件懒加载\"><a href=\"#4-组件懒加载\" class=\"headerlink\" title=\"4.组件懒加载\"></a>4.组件懒加载</h5><p>1、webpack+es6的import(this.props.children为回调函数);</p>\n<pre><code class=\"javascript\">\nimport React , { Component } from &#39;react&#39;;\n\nexport default class  extends Component {\n    constructor ( props ) {\n        super ( props );\n        this.load(props); //调用下面load\n        this.state={\n            Com:null\n        };\n    };\n    load(props){ //this.props.load()就是调用indexrou.jsx传过来的函数\n        props.load().then((Com)=&gt;{\n           console.log(Com.default);//得到的就是传过来的函数\n            this.setState({\n                Com:Com.default?Com.default:null\n            });\n        });\n    };\n    render () {\n        if(!this.state.Com){\n            return null;\n        }else{\n            return this.props.children(this.state.Com);\n        }\n    };\n};\n</code></pre>\n<pre><code class=\"javascript\">import Load from &#39;../components/lazy&#39;;\n\nlet Demo2=function(){\n    return &lt;Load load={()=&gt;import(&#39;../components/demo2&#39;)}&gt;\n        {(Com)=&gt;&lt;Com/&gt;} \n    &lt;/Load&gt;;\n};</code></pre>\n<p>2、webpack+es6的import纯粹的高阶组价</p>\n<pre><code class=\"javascript\">import React , { Component } from &#39;react&#39;;\n\nexport default function(loading){//传过来一个函数\n    return class extends Component {\n        constructor ( props ) {\n            super ( props );\n            this.state={\n                Com:null\n            };\n            this.load();\n        };\n        load(props){\n            loading().then((Com)=&gt;{  //调用函数获取它传过来的路径\n                this.setState({\n                    Com:Com.default?Com.default:null\n                });\n            });\n        };\n        render () {\n            let Com=this.state.Com;\n            return Com?&lt;Com/&gt;:null;\n        };\n    };\n}</code></pre>\n<p>在router路由里 indexrou.js</p>\n<pre><code class=\"javascript\">import Load from &#39;../components/lazy&#39;;\nlet Demo2=Load(()=&gt;import(&#39;../components/demo2&#39;));\n</code></pre>\n<p>3、webpack+es6的import +async（高阶函数）</p>\n<pre><code class=\"javascript\">import React , { Component } from &#39;react&#39;;\n\nexport default function(loading){\n    return class extends Component {\n        constructor ( props ) {\n            super ( props );\n            this.state={\n                Com:null\n            };\n        };\n        //即使是同步的话执行的也是promise.resolve这个方法，将同步代码包装一层，进行同步\n        //await后面接收的是值或promise\n        async componentWillMount(){\n            let Com=await loading();  //依次执行，只有一个await往下走，Com是有值的\n            this.setState({\n                Com:Com.default?Com.default:null\n            });\n        };\n        render () {\n            let Com=this.state.Com;\n            return Com?&lt;Com/&gt;:null;\n        };\n    };\n}</code></pre>\n<p>在router路由里 indexrou.jsx</p>\n<pre><code class=\"javascript\">import Load from &#39;../components/lazy&#39;;\nlet Demo2=Load(()=&gt;import(&#39;../components/demo2&#39;));</code></pre>\n<p>4、webpack+require.ensure (高阶组价)</p>\n<pre><code class=\"javascript\">import React , { Component } from &#39;react&#39;;\n\nexport default function(loading){\n    return class extends Component {\n        constructor ( props ) {\n            super ( props );\n            this.state={\n                Com:null\n            };\n        };\n        componentWillMount(){\n            new Promise((resolve,reject)=&gt;{\n                require.ensure([], function(require) {//[]依赖项\n                    var c = loading().default;\n                    console.log(c);\n                    resolve(c);\n                });\n            }).then((data)=&gt;{\n                this.setState({\n                    Com:data\n                });\n            });\n        };\n        render(){\n            let Com=this.state.Com;\n            return Com?&lt;Com/&gt;:null;\n        };\n    };\n};</code></pre>\n<p>在router路由里 indexrou.jsx</p>\n<pre><code class=\"javascript\">  import Load from &#39;../components/lazy&#39;;\n\n  let Demo2=Load(()=&gt;\n    require(&#39;../components/demo2&#39;)\n  );\n</code></pre>\n<h5 id=\"5-使用-React-Fragments-避免额外标记\"><a href=\"#5-使用-React-Fragments-避免额外标记\" class=\"headerlink\" title=\"5.使用 React Fragments 避免额外标记\"></a>5.使用 React Fragments 避免额外标记</h5><pre><code class=\"javascript\">radiosBtns()\n    return(\n        &lt;React.Fragment&gt;\n            &lt;RadioButton value=&quot;1&quot; style={{marginLeft:'10px'}}&gt;\n                &lt;Icon type=&quot;flag&quot; className={flag(1)+&#39; fs16&#39;} /&gt;\n            &lt;/RadioButton&gt;\n            &lt;RadioButton value=&quot;2&quot; style={{marginLeft:'10px'}}&gt;\n                &lt;Icon type=&quot;flag&quot; className={flag(2)+&#39; fs16&#39;} /&gt;\n            &lt;/RadioButton&gt;\n            &lt;RadioButton value=&quot;3&quot; style={{marginLeft:'10px'}}&gt;\n                &lt;Icon type=&quot;flag&quot; className={flag(3)+&#39; fs16&#39;}/&gt;\n            &lt;/RadioButton&gt;\n            &lt;RadioButton value=&quot;4&quot; style={{marginLeft:'10px'}}&gt;\n                &lt;Icon type=&quot;flag&quot; className={flag(4)+&#39; fs16&#39;}/&gt;\n            &lt;/RadioButton&gt;\n            &lt;RadioButton value=&quot;5&quot; key=&quot;5&quot; style={{marginLeft:'10px'}}&gt;\n                &lt;Icon type=&quot;flag&quot; className={flag(5)+&#39; fs16&#39;}/&gt;\n            &lt;/RadioButton&gt;\n        &lt;/React.Fragment&gt;\n    )\n}</code></pre>\n<h5 id=\"6-不要使用内联函数定义\"><a href=\"#6-不要使用内联函数定义\" class=\"headerlink\" title=\"6.不要使用内联函数定义\"></a>6.不要使用内联函数定义</h5><p>eg: 一个内联的“DOM组件”事件处理程序</p>\n<pre><code class=\"javascript\">\nclass Demo extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button\n          onClick={() =&gt; {\n            this.setState({ clicked: true })\n          }}\n        &gt;\n          XXX\n        &lt;/button&gt;\n      &lt;/div&gt;\n    )\n  }\n}</code></pre>\n<h5 id=\"7-优化-React-中的条件渲染\"><a href=\"#7-优化-React-中的条件渲染\" class=\"headerlink\" title=\"7.优化 React 中的条件渲染\"></a>7.优化 React 中的条件渲染</h5><p>  可以使用三元，if-else，and运算符(&amp;&amp;)。推荐使用&amp;&amp;来表示；<br>  尽量使用return null来判断显隐，而不是用css的display：none，避免回流；</p>\n<pre><code class=\"javascript\">  render(){\n    let con = this.state.goods[0].text ? &lt;h1&gt;{this.state.goods[0].text}&lt;/h1&gt;:null   //条件渲染 \n    return(\n        &lt;div&gt;\n          {con}\n        &lt;/div&gt;\n    )\n  }</code></pre>\n<h5 id=\"8-事件节流和防抖\"><a href=\"#8-事件节流和防抖\" class=\"headerlink\" title=\"8.事件节流和防抖\"></a>8.事件节流和防抖</h5><p>（参考节流防抖功能实现，这里不多赘述）</p>\n<h5 id=\"9-不要在render中生成新的引用\"><a href=\"#9-不要在render中生成新的引用\" class=\"headerlink\" title=\"9.不要在render中生成新的引用\"></a>9.不要在render中生成新的引用</h5><p>定义函数、使用内联样式或者动态生成一些不依赖state或props的jsx这些，凡是不依赖state或props的都应该提到render之外，否则会造成每次render的时候生成新的引用，会导致在diff算法对比属性或节点的过程中发现两个引用不一致，对于react来说，这说明属性值发生了改变，最后会被替换成新的引用，造成性能浪费。例如函数应该放在render函数外定义，样式应该单独建一个文件，然后引入，使用生命周期函数或者自定义函数动态生成一些不依赖state或props的jsx。</p>\n<pre><code class=\"javascript\">import React, { Fragment } from &#39;react&#39;;\nimport &#39;antd/dist/antd.css&#39;\nimport {Input,Button,List} from &#39;antd&#39;\n const TodoListUI=(props)=&gt;{\n     return (\n        &lt;Fragment&gt;\n            &lt;div className=&quot;form-box&quot;&gt;\n            &lt;Input placeholder=&quot;请输入&quot; value={props.inputValue} onChange={props.handleChange}style={{width:'300px'}}/&gt;\n            &lt;Button type=&quot;primary&quot; style={{marginLeft:'20px'}} onClick={props.handleSubmit}&gt;提交&lt;/Button&gt;\n        &lt;/div&gt;\n        &lt;div  className=&quot;list&quot;&gt;\n            &lt;List\n                size=&quot;small&quot;\n                bordered\n                dataSource={props.list}\n                renderItem={(item,index) =&gt; (&lt;List.Item onClick={()=&gt;{props.handleDelete(index)}}&gt;{item}&lt;/List.Item&gt;)}\n            /&gt;\n        &lt;/div&gt;      \n        &lt;/Fragment&gt;\n     )\n }\n\nexport default TodoListUI;</code></pre>\n<h5 id=\"10-ProtoTypes-的验证会损耗性能\"><a href=\"#10-ProtoTypes-的验证会损耗性能\" class=\"headerlink\" title=\"10.ProtoTypes 的验证会损耗性能\"></a>10.ProtoTypes 的验证会损耗性能</h5><p>  建议用环境变量控制在生产环境关闭类型验证</p>\n<pre><code class=\"javascript\">  IncomingTasks.propTypes = {\n    reTryGetData: PropTypes.func,\n  }</code></pre>\n<h5 id=\"11-尽量少直接操作dom\"><a href=\"#11-尽量少直接操作dom\" class=\"headerlink\" title=\"11.尽量少直接操作dom\"></a>11.尽量少直接操作dom</h5><p>  用setTimeout或不可控的refs等dom操作；<br>  setTimeout会导致state多次更新，refs会直接操作dom，消耗大量性能；</p>\n<pre><code class=\"javascript\">  if(!textDom){\n      textDom = document.getElementById(&#39;textArea&#39;);\n  }\n  return (\n    &lt;div contentEditable=&quot;true&quot;\n      id=&quot;textArea&quot;\n      onInput={this.onChangeAtPerson}\n      className={style.testArea}\n      placeholder=&quot;请输入评论，可以@其他人&quot;\n    /&gt;\n  )</code></pre>\n<pre><code class=\"javascript\">  return (&lt;div ref={com =&gt; (this.refs = com)}&gt;\n    //TODO\n  &lt;/div&gt;)</code></pre>\n"},{"title":"Swig 使用指南","date":"2020-03-22T12:12:57.000Z","img":"/medias/featureimages/2.jpg","top":false,"cover":true,"coverImg":"/medias/featureimages/2.jpg","toc":true,"mathjax":false,"summary":"nodeJS模版渲染引擎，面向对象的模板继承。swig的模板继承可以更好的帮我们组织代码结构，更好的复用代码。类似jello扩展的velocity标签。","_content":"nodeJS模版渲染引擎\n\n\n### Swig 使用指南\n\n1.根据路劲渲染页面\n2.面向对象的模板继承，页面复用动态页面快速上手功能强大。\n\n### 如何使用\n\nAPI\n\n```javascript\n    swig.init({\n      allowErrors: false,   \n      autoescape: true,\n      cache: true,\n      encoding: 'utf8',\n      filters: {},\n      root: '/',\n      tags: {},\n      extensions: {},\n      tzOffset: 0\n    });\n```\n\n### options:\n\n**allowErrors:** \n\n默认值为 `false`。\n\n将所有模板解析和编译错误直接输出到模板。\n\n如果为 `true`，则将引发错误，抛出到`Node.js` 进程中，可能会使您的应用程序崩溃。\n    \n**autoescape:** \n\n默认true，强烈建议保持。\n\n字符转换表请参阅转义过滤器。\n\ntrue: HTML安全转义 \n\nfalse: 不转义，除非使用转义过滤器或者转义标签\n    \n**js:** \n\n`js`安全转义\n    \n**cache:** \n\n更改为 false 将重新编译每个请求的模板的文件。正式环境建议保持true。\n    \n**encoding:** \n\n模板文件编码\n    \n**root:** \n\n需要搜索模板的目录。如果模板传递给 swig.compileFile 绝对路径(以/开头)，Swig不会在模板root中搜索。如果传递一个数组，使用第一个匹配成功的数组项。\n    \n**tzOffset:** \n\n设置默认时区偏移量。此设置会使转换日期过滤器会自动的修正相应时区偏移量。\n    \n**filters:** \n    \n自定义过滤器或者重写默认过滤器，参见自定义过滤器指南。\n    \n**tags** \n\n自定义标签或者重写默认标签，参见自定义标签指南。\n\n**extensions**\n\n添加第三方库，可以在编译模板时使用，参见参见自定义标签指南。\n    \n### nodejs用法\n``` javascript\n    var tpl = swig.compileFile(\"path/to/template/file.html\");\n    var renderedHtml = tpl.render({ vars: 'to be inserted in template' });\n```\nor\n```javascript\n    var tpl = swig.compile(\"Template string here\");\n    var renderedHtml = tpl({ vars: 'to be inserted in template' });\n```\n\n### 结合Express\n\n```javascript\n    npm install express\n    npm install consolidate\n```\n\n然后\n\n```javascript\n    app.engine('.html', cons.swig);\n    app.set('view engine', 'html');\n```\n\n### 浏览器\nSwig浏览器版本的api基本与nodejs版相同，不同点如下：\n\n不能使用swig.compileFile，浏览器没有文件系统\n\n你必须提前使用swig.compile编译好模板\n\n按顺序使用`extends`, `import`, and `include`，同时在`swig.compile`里使用参数`templateKey`来查找模板\n\n```javascript\nvar template = swig.compile('<p>{% block content %}{% endblock %}</p>', { filename: 'main' });\nvar mypage = swig.compile('{% extends \"main\" %}{% block content %}Oh hey there!{% endblock %}', { filename: 'mypage' });\n```\n## 基础\n\n### swig的变量:\n\n```javascript\n{{ foo.bar }}//如果变量未定义，输出空字符。\n```\n或\n```javascript\n{{ foo['bar'] }}//如果变量未定义，输出空字符。\n```\n\n### swig的标签：\n\n#### extends：\n* 使当前模板继承父模板，必须在文件最前\n* 参数： file父模板相对模板root的相对路径，将在后面介绍如何实现模板继承。\n\n#### block：\n\n* 定义一个块，使之可以被继承的模板重写，或者重写父模板的同名块，在继承`block`块时可以使用父模板中已定义的部分 \n* 参数： name块的名字，必须以字母数字下划线开头\n\n#### parent：\n* 将父模板中同名块注入当前块中\n\n    ```javascript\n    {% block head %}\n        {% parent %}\n       <link rel=\"stylesheet\" href=\"custom.css\">\n    {% endblock %} \n    ```\n\n#### include：\n* 包含一个模板到当前位置，这个模板将使用当前上下文 \n* 参数： file包含模板相对模板 root 的相对路径 \n\n    ```javascript\n    {% include \"a.html\" %}\n    {% include \"template.js\" %}\n    //将引入的文件内容放到被引用的地方\n    ```\n#### raw：\n* 停止解析标记中任何内容，所有内容都将输出\n* 参数： file父模板相对模板 root 的相对路径\n\n#### for：\n* 遍历对象和数组\n* 参数：\n\n    x：当前循环迭代名；\n    \n    in:语法标记；\n    \n    y:可迭代对象。\n    \n    ```javascript\n    {% for x in y %}\n        {{ x }}\n    {% endfor %}\n    ```\n* 特殊循环变量 \n\n    `loop.index`：当前循环的索引（1开始） \n    \n    `loop.index0`：当前循环的索引（0开始） \n    \n    `loop.revindex`：当前循环从结尾开始的索引（1开始）\n    \n    `loop.revindex0`：当前循环从结尾开始的索引（0开始） \n    \n    `loop.key`：如果迭代是对象，是当前循环的键，否则同 loop.index \n    \n    `loop.first`：如果是第一个值返回 true \n    \n    `loop.last`：如果是最后一个值返回 true \n    \n    `loop.cycle`：一个帮助函数，以指定的参数作为周期\n\n##### example：\n    \n* eg1------------------------------\n\n    ```javascript\n    {% for x in y %}\n        {% if loop.first %}<ul>{% endif %}\n        <li>{{ loop.index }} - {{ loop.key }}: {{ x }}</li>\n        {% if loop.last %}</ul>{% endif %}\n    {% endfor %}\n    ```\n* eg2 ------------------------------\n    \n    ```javascript\n    {% for item in items %}\n        <li class=\"{{ loop.cycle('odd', 'even') }}\">{{ item }}</li>\n    {% endfor %}\n    ```\n* eg3-----------------------------\n\n##### 在 for 标签里使用 else\n\n* eg-----------------------------\n    ```javascript\n    {% for person in people %}\n        {{ person }}\n    {% else %}\n        There are no people yet!\n    {% endfor %}\n    ```\n#### if：条件语句\n\n* 参数：接受任何有效的JavaScript条件语句\n\n    ```javascript\n    {% if x %}{% endif %}\n    {% if !x %}{% endif %}\n    {% if not x %}{% endif %}\n    {% if x and y %}{% endif %}\n    {% if x && y %}{% endif %}\n    {% if x or y %}{% endif %}\n    {% if x || y %}{% endif %}\n    {% if x || (y && z) %}{% endif %}\n    ```\n##### example：\n\n- if else 和 else if\n    \n    ```javascript\n    {% if foo %}\n        //Some content.\n    {% elseif \"foo\" in bar %}\n        //Content if the array `bar` has \"foo\" in it.\n    {% else %}\n        Fallback content.\n    {% endif %}\n\n    {% if x [operator] y %}\n        //Operators: ==, !=, <, <=, >, >=, ===, !==\n    {% endif %}\n    \n    {% if x == 'five' %}\n        //The operands can be also be string or number literals\n    {% endif %}\n    \n    {% if x|length === 3 %}\n        //You can use filters on any operand in the statement.\n    {% endif %}\n    \n    {% if x in y %}\n        //If x is a value that is present in y, this will return true.\n    {% endif %}\n    ```\n#### autoescape：\n- 改变当前变量的自动转义行为 \n- 参数： \n\n    on：当前内容是否转义\n\n    type: 转义类型，js 或者 html，默认 html\n    \n- example:\n\n    ```javascript\n    input = '<p>Hello \"you\" & /'them/'</p>';\n    {% autoescape false %}\n        {{ input }}\n    {% endautoescape %}\n    // <p>Hello \"you\" & 'them'</p>\n    \n    {% autoescape true %}\n        {{ input }}\n    {% endautoescape %}\n    //<p>Hello \"you\" & 'them' </p>\n    \n    {% autoescape true \"js\" %}\n        {{ input }}\n    {% endautoescape %}\n    // /u003Cp/u003EHello /u0022you/u0022 & /u0027them/u0027/u003C/u005Cp/u003E \n    ```\n    \n#### set:\n- 设置一个变量，在当前上下文中复用\n\n    ```javascript\n    {% set foo = [0, 1, 2, 3, 4, 5] %} \n    \n    {% for num in foo %}\n        <li>{{ num }}</li> \n    {% endfor %} \n    ```\n    \n#### filter:\n- 对整个块应用过滤器\n- 参数：\n- \n    filter_name: 过滤器名字 \n\n    若干传给过滤器的参数 父模板相对模板 root 的相对路径\n    \n- example:\n\n    ```javascript\n    {% filter uppercase %}oh hi, {{ name }}{% endfilter %}\n    {% filter replace \".\" \"!\" \"g\" %}Hi. My name is Paul.{% endfilter %}\n\n    输出\n    OH HI, PAUL\n    Hi! My name is Paul!\n    ```\n#### spaceless:\n\n- 尝试移除html标签间的空格\n    ```javascript\n    {% spaceless %}\n    {% for num in foo %}\n        <li>{{ loop.index }}</li>\n    {% endfor %}\n    {% endspaceless %}\n    \n    输出\n    <li>1</li><li>2</li><li>3</li>\n    ```\n#### import:\n\n- 允许引入另一个模板的宏进入当前上下文\n- 参数：\n\n    file: 引入模板相对模板 root 的相对路径 \n    \n    as: 语法标记 var: 分配给宏的可访问上下文对象\n    \n- expample:\n\n    ```javascript\n    {% import 'formmacros.html' as form %}\n\n    //{ this will run the input macro }\n    {{ form.input(\"text\", \"name\") }}\n    \n    //{ this, however, will NOT output anything because the macro is scoped to the \"form\" object: }\n    {{ input(\"text\", \"name\") }}\n    ```\n    \n#### macro:\n- 创建自定义可服用的代码段\n- 参数：...\n- 用户定义\n    \n- example:\n\n    ```javascript\n    {% macro input type name id label value error %}\n        <label for=\"{{ name }}\">{{ label }}</label>\n        <input type=\"{{ type }}\" name=\"{{ name }}\" id=\"{{ id }}\" value=\"{{ value }}\"{% if error %} class=\"error\"{% endif %}>\n    {% endmacro %}\n    ```\n    \n- 然后像下面使用\n\n    ```javascript\n    <div>{\n        { input(\"text\", \"fname\", \"fname\", \"First Name\", fname.value, fname.errors) }\n    }</div>\n    <div>{\n        { input(\"text\", \"lname\", \"lname\", \"Last Name\", lname.value, lname.errors) }\n    }</div>\n    ```\n\n输出如下\n\n```javascript\n    <div>\n        <label for=\"fname\">First Name</label>\n        <input type=\"text\" name=\"fname\" id=\"fname\" value=\"Paul\">\n    </div>\n    <div>\n        <label for=\"lname\">Last Name</label>\n        <input type=\"text\" name=\"lname\" id=\"lname\" value=\"\" class=\"error\">\n    </div>\n```\n          \n## 变量过滤器\n\n- 用于修改变量。变量名称后用 | 字符分隔添加过滤器。您可以添加多个过滤器。\n\n- example\n\n```javascript\n    {{ name|title }} was born on {{ birthday|date('F jS, Y') }} and has {{ bikes|length|default(\"zero\") }} bikes.\n```\n    \n- 也可以使用 filter 标签来为块内容添加过滤器\n\n```javascript\n    {% filter upper %}\n    oh hi, paul\n    {% endfilter %}\n```\n\n### 内置过滤器\n\n**add(value)**\n\n使变量与`value`相加，可以转换为数值字符串会自动转换为数值。\n    \n**addslashes** \n\n用 `\\` 转义字符串\n    \n**capitalize** \n\n大写首字母\n    \n**date(format[, tzOffset])** \n\n- 转换日期为指定格式\n\n    ```javascript\n    format： 格式 \n    tzOffset： 时区\n    ```\n\n**default(value)** \n\n默认值（如果变量为`undefined`，`nul`l，`false`）\n    \n**e**\n    \n同`escape`\n\n**escape([type])** \n\n```javascript\n    转义字符\n    默认： &, <, >, \", ' \n    js: &, <, >, \", ', =, -, ;\n```\n\n**first** \n\n返回数组第一个值\n\n**join(glue)** \n\n同`[].join`\n    \n**json_encode([indent])** \n\n类似`JSON.stringify`, `indent`为缩进空格数\n    \n**last** \n\n返回数组最后一个值\n    \n**length** \n\n返回变量的`length`，如果是`object`，返回`key`的数量\n\n**lower** \n\n同`xxx.toLowerCase()`\n\n**raw** \n\n指定输入不会被转义\n\n**replace(search, replace[, flags])** \n   \n同`**xxx.replacexxx`\n    \n**reverse** \n\n翻转数组\n\n**striptags** \n\n去除`html/xm`l标签\n\n**title** \n\n大写首字母\n\n**uniq** \n\n数组去重\n\n**upper** \n\n同`xxx.toUpperCase`\n    \n**url_encode** \n\n同`encodeURIComponent`\n    \n**url_decode** \n\n同`decodeURIComponemt`\n\n### 自定义过滤器\n\n创建一个 myfilter.js 然后引入到 Swig的初始化函数中\n\n```javascript\n    swig.init(\n        { filters: require('myfilters') }\n    );\n```\n    \n在 myfilter.js 里，每一个`filter`方法都是一个简单的 js方法，下例是一个翻转字符串的 `filter`：\n\n```javascript\n    exports.myfilter = function (input) {\n        return input.toString().sphelit('').reverse().join('');\n    };\n```\n    \n你的 `filter` 一旦被引入，你就可以向下面一样使用：\n\n```javascript\n    {{ name|myfilter }}\n\n    {% filter myfilter %}\n        I shall be filtered\n    {% endfilter %}\n```\n\n你也可以像下面一样给 `filter` 传参数：\n\n```javascript\n    exports.prefix = function(input, prefix) {\n        return prefix.toString() + input.toString();\n    };\n\n    {{ name|prefix('my prefix') }}\n\n    {% filter prefix 'my prefix' %}\n        I will be prefixed with \"my prefix\".\n    {% endfilter %}\n\n    {% filter prefix foo %}\n        I will be prefixed with the value stored to `foo`.\n    {% endfilter %}\n```\n\n### 模板继承:\n\n#### Swig 使用 extends 和 block 来实现模板继承\n\n- example:\n\n```javascript \n    //layout.html\n    <!doctype html>\n    <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>\n                {% block title %}\n                    My Site\n                {% endblock %}\n            </title>\n            {% block head %}\n            {% endblock %}\n        </head>\n        <body>\n            {% block content %}\n            {% endblock %}\n        </body>\n    </html> \n```\n\n```javascript  \n    //index.html\n    {% extends './layout.html' %}\n    \n    {% block title %}\n        My Page\n    {% endblock %}\n    \n    {% block head %}\n        {% parent %}\n    {% endblock %}\n    \n    {% block content %}\n        <p>This is just an awesome page.</p>\n        <h1>hello,lego.</h1>\n        <script>\n            require('pages/index/main');\n        </script>\n    {% endblock %}\n```\n\n#### swig模板经过编译后：\n\n```javascript\n    <!doctype html>\n    <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>My Page</title>\n        </head>\n        <body>\n            <p>This is just an awesome page.</p>\n            <h1>hello,lego.</h1>\n            <p>test</p>\n            <script>\n                //require('pages/index/main');\n            </script>\n        </body>\n    </html>\n```\n\n### swig模板在fis3中的应用\n- swig的模板继承可以更好的帮我们组织代码结构，更好的复用代码。类似jello扩展的velocity标签。\n    \n- 如上个例子，可以将公用代码写在一个文件里，作为母版页，需要的页面就继承这个页面，而且页面中的block又可以方便我们自定义需要的内容。\n在fis3构建中使用时，调用swig编译插件，将swig标签解析成正常的html文件即可。\n\n- gitHubDemo:https://github.com/duanweiqiang/web","source":"_posts/swig.md","raw":"---\ntitle: Swig 使用指南\ndate: 2020-03-22 20:12:57\nimg: /medias/featureimages/2.jpg\ntop: false\ncover: true\ncoverImg: /medias/featureimages/2.jpg\ntoc: true\nmathjax: false\nsummary: nodeJS模版渲染引擎，面向对象的模板继承。swig的模板继承可以更好的帮我们组织代码结构，更好的复用代码。类似jello扩展的velocity标签。\ncategories: 全站\ntags:\n- nodeJS\n- express\n- swig\n---\nnodeJS模版渲染引擎\n\n\n### Swig 使用指南\n\n1.根据路劲渲染页面\n2.面向对象的模板继承，页面复用动态页面快速上手功能强大。\n\n### 如何使用\n\nAPI\n\n```javascript\n    swig.init({\n      allowErrors: false,   \n      autoescape: true,\n      cache: true,\n      encoding: 'utf8',\n      filters: {},\n      root: '/',\n      tags: {},\n      extensions: {},\n      tzOffset: 0\n    });\n```\n\n### options:\n\n**allowErrors:** \n\n默认值为 `false`。\n\n将所有模板解析和编译错误直接输出到模板。\n\n如果为 `true`，则将引发错误，抛出到`Node.js` 进程中，可能会使您的应用程序崩溃。\n    \n**autoescape:** \n\n默认true，强烈建议保持。\n\n字符转换表请参阅转义过滤器。\n\ntrue: HTML安全转义 \n\nfalse: 不转义，除非使用转义过滤器或者转义标签\n    \n**js:** \n\n`js`安全转义\n    \n**cache:** \n\n更改为 false 将重新编译每个请求的模板的文件。正式环境建议保持true。\n    \n**encoding:** \n\n模板文件编码\n    \n**root:** \n\n需要搜索模板的目录。如果模板传递给 swig.compileFile 绝对路径(以/开头)，Swig不会在模板root中搜索。如果传递一个数组，使用第一个匹配成功的数组项。\n    \n**tzOffset:** \n\n设置默认时区偏移量。此设置会使转换日期过滤器会自动的修正相应时区偏移量。\n    \n**filters:** \n    \n自定义过滤器或者重写默认过滤器，参见自定义过滤器指南。\n    \n**tags** \n\n自定义标签或者重写默认标签，参见自定义标签指南。\n\n**extensions**\n\n添加第三方库，可以在编译模板时使用，参见参见自定义标签指南。\n    \n### nodejs用法\n``` javascript\n    var tpl = swig.compileFile(\"path/to/template/file.html\");\n    var renderedHtml = tpl.render({ vars: 'to be inserted in template' });\n```\nor\n```javascript\n    var tpl = swig.compile(\"Template string here\");\n    var renderedHtml = tpl({ vars: 'to be inserted in template' });\n```\n\n### 结合Express\n\n```javascript\n    npm install express\n    npm install consolidate\n```\n\n然后\n\n```javascript\n    app.engine('.html', cons.swig);\n    app.set('view engine', 'html');\n```\n\n### 浏览器\nSwig浏览器版本的api基本与nodejs版相同，不同点如下：\n\n不能使用swig.compileFile，浏览器没有文件系统\n\n你必须提前使用swig.compile编译好模板\n\n按顺序使用`extends`, `import`, and `include`，同时在`swig.compile`里使用参数`templateKey`来查找模板\n\n```javascript\nvar template = swig.compile('<p>{% block content %}{% endblock %}</p>', { filename: 'main' });\nvar mypage = swig.compile('{% extends \"main\" %}{% block content %}Oh hey there!{% endblock %}', { filename: 'mypage' });\n```\n## 基础\n\n### swig的变量:\n\n```javascript\n{{ foo.bar }}//如果变量未定义，输出空字符。\n```\n或\n```javascript\n{{ foo['bar'] }}//如果变量未定义，输出空字符。\n```\n\n### swig的标签：\n\n#### extends：\n* 使当前模板继承父模板，必须在文件最前\n* 参数： file父模板相对模板root的相对路径，将在后面介绍如何实现模板继承。\n\n#### block：\n\n* 定义一个块，使之可以被继承的模板重写，或者重写父模板的同名块，在继承`block`块时可以使用父模板中已定义的部分 \n* 参数： name块的名字，必须以字母数字下划线开头\n\n#### parent：\n* 将父模板中同名块注入当前块中\n\n    ```javascript\n    {% block head %}\n        {% parent %}\n       <link rel=\"stylesheet\" href=\"custom.css\">\n    {% endblock %} \n    ```\n\n#### include：\n* 包含一个模板到当前位置，这个模板将使用当前上下文 \n* 参数： file包含模板相对模板 root 的相对路径 \n\n    ```javascript\n    {% include \"a.html\" %}\n    {% include \"template.js\" %}\n    //将引入的文件内容放到被引用的地方\n    ```\n#### raw：\n* 停止解析标记中任何内容，所有内容都将输出\n* 参数： file父模板相对模板 root 的相对路径\n\n#### for：\n* 遍历对象和数组\n* 参数：\n\n    x：当前循环迭代名；\n    \n    in:语法标记；\n    \n    y:可迭代对象。\n    \n    ```javascript\n    {% for x in y %}\n        {{ x }}\n    {% endfor %}\n    ```\n* 特殊循环变量 \n\n    `loop.index`：当前循环的索引（1开始） \n    \n    `loop.index0`：当前循环的索引（0开始） \n    \n    `loop.revindex`：当前循环从结尾开始的索引（1开始）\n    \n    `loop.revindex0`：当前循环从结尾开始的索引（0开始） \n    \n    `loop.key`：如果迭代是对象，是当前循环的键，否则同 loop.index \n    \n    `loop.first`：如果是第一个值返回 true \n    \n    `loop.last`：如果是最后一个值返回 true \n    \n    `loop.cycle`：一个帮助函数，以指定的参数作为周期\n\n##### example：\n    \n* eg1------------------------------\n\n    ```javascript\n    {% for x in y %}\n        {% if loop.first %}<ul>{% endif %}\n        <li>{{ loop.index }} - {{ loop.key }}: {{ x }}</li>\n        {% if loop.last %}</ul>{% endif %}\n    {% endfor %}\n    ```\n* eg2 ------------------------------\n    \n    ```javascript\n    {% for item in items %}\n        <li class=\"{{ loop.cycle('odd', 'even') }}\">{{ item }}</li>\n    {% endfor %}\n    ```\n* eg3-----------------------------\n\n##### 在 for 标签里使用 else\n\n* eg-----------------------------\n    ```javascript\n    {% for person in people %}\n        {{ person }}\n    {% else %}\n        There are no people yet!\n    {% endfor %}\n    ```\n#### if：条件语句\n\n* 参数：接受任何有效的JavaScript条件语句\n\n    ```javascript\n    {% if x %}{% endif %}\n    {% if !x %}{% endif %}\n    {% if not x %}{% endif %}\n    {% if x and y %}{% endif %}\n    {% if x && y %}{% endif %}\n    {% if x or y %}{% endif %}\n    {% if x || y %}{% endif %}\n    {% if x || (y && z) %}{% endif %}\n    ```\n##### example：\n\n- if else 和 else if\n    \n    ```javascript\n    {% if foo %}\n        //Some content.\n    {% elseif \"foo\" in bar %}\n        //Content if the array `bar` has \"foo\" in it.\n    {% else %}\n        Fallback content.\n    {% endif %}\n\n    {% if x [operator] y %}\n        //Operators: ==, !=, <, <=, >, >=, ===, !==\n    {% endif %}\n    \n    {% if x == 'five' %}\n        //The operands can be also be string or number literals\n    {% endif %}\n    \n    {% if x|length === 3 %}\n        //You can use filters on any operand in the statement.\n    {% endif %}\n    \n    {% if x in y %}\n        //If x is a value that is present in y, this will return true.\n    {% endif %}\n    ```\n#### autoescape：\n- 改变当前变量的自动转义行为 \n- 参数： \n\n    on：当前内容是否转义\n\n    type: 转义类型，js 或者 html，默认 html\n    \n- example:\n\n    ```javascript\n    input = '<p>Hello \"you\" & /'them/'</p>';\n    {% autoescape false %}\n        {{ input }}\n    {% endautoescape %}\n    // <p>Hello \"you\" & 'them'</p>\n    \n    {% autoescape true %}\n        {{ input }}\n    {% endautoescape %}\n    //<p>Hello \"you\" & 'them' </p>\n    \n    {% autoescape true \"js\" %}\n        {{ input }}\n    {% endautoescape %}\n    // /u003Cp/u003EHello /u0022you/u0022 & /u0027them/u0027/u003C/u005Cp/u003E \n    ```\n    \n#### set:\n- 设置一个变量，在当前上下文中复用\n\n    ```javascript\n    {% set foo = [0, 1, 2, 3, 4, 5] %} \n    \n    {% for num in foo %}\n        <li>{{ num }}</li> \n    {% endfor %} \n    ```\n    \n#### filter:\n- 对整个块应用过滤器\n- 参数：\n- \n    filter_name: 过滤器名字 \n\n    若干传给过滤器的参数 父模板相对模板 root 的相对路径\n    \n- example:\n\n    ```javascript\n    {% filter uppercase %}oh hi, {{ name }}{% endfilter %}\n    {% filter replace \".\" \"!\" \"g\" %}Hi. My name is Paul.{% endfilter %}\n\n    输出\n    OH HI, PAUL\n    Hi! My name is Paul!\n    ```\n#### spaceless:\n\n- 尝试移除html标签间的空格\n    ```javascript\n    {% spaceless %}\n    {% for num in foo %}\n        <li>{{ loop.index }}</li>\n    {% endfor %}\n    {% endspaceless %}\n    \n    输出\n    <li>1</li><li>2</li><li>3</li>\n    ```\n#### import:\n\n- 允许引入另一个模板的宏进入当前上下文\n- 参数：\n\n    file: 引入模板相对模板 root 的相对路径 \n    \n    as: 语法标记 var: 分配给宏的可访问上下文对象\n    \n- expample:\n\n    ```javascript\n    {% import 'formmacros.html' as form %}\n\n    //{ this will run the input macro }\n    {{ form.input(\"text\", \"name\") }}\n    \n    //{ this, however, will NOT output anything because the macro is scoped to the \"form\" object: }\n    {{ input(\"text\", \"name\") }}\n    ```\n    \n#### macro:\n- 创建自定义可服用的代码段\n- 参数：...\n- 用户定义\n    \n- example:\n\n    ```javascript\n    {% macro input type name id label value error %}\n        <label for=\"{{ name }}\">{{ label }}</label>\n        <input type=\"{{ type }}\" name=\"{{ name }}\" id=\"{{ id }}\" value=\"{{ value }}\"{% if error %} class=\"error\"{% endif %}>\n    {% endmacro %}\n    ```\n    \n- 然后像下面使用\n\n    ```javascript\n    <div>{\n        { input(\"text\", \"fname\", \"fname\", \"First Name\", fname.value, fname.errors) }\n    }</div>\n    <div>{\n        { input(\"text\", \"lname\", \"lname\", \"Last Name\", lname.value, lname.errors) }\n    }</div>\n    ```\n\n输出如下\n\n```javascript\n    <div>\n        <label for=\"fname\">First Name</label>\n        <input type=\"text\" name=\"fname\" id=\"fname\" value=\"Paul\">\n    </div>\n    <div>\n        <label for=\"lname\">Last Name</label>\n        <input type=\"text\" name=\"lname\" id=\"lname\" value=\"\" class=\"error\">\n    </div>\n```\n          \n## 变量过滤器\n\n- 用于修改变量。变量名称后用 | 字符分隔添加过滤器。您可以添加多个过滤器。\n\n- example\n\n```javascript\n    {{ name|title }} was born on {{ birthday|date('F jS, Y') }} and has {{ bikes|length|default(\"zero\") }} bikes.\n```\n    \n- 也可以使用 filter 标签来为块内容添加过滤器\n\n```javascript\n    {% filter upper %}\n    oh hi, paul\n    {% endfilter %}\n```\n\n### 内置过滤器\n\n**add(value)**\n\n使变量与`value`相加，可以转换为数值字符串会自动转换为数值。\n    \n**addslashes** \n\n用 `\\` 转义字符串\n    \n**capitalize** \n\n大写首字母\n    \n**date(format[, tzOffset])** \n\n- 转换日期为指定格式\n\n    ```javascript\n    format： 格式 \n    tzOffset： 时区\n    ```\n\n**default(value)** \n\n默认值（如果变量为`undefined`，`nul`l，`false`）\n    \n**e**\n    \n同`escape`\n\n**escape([type])** \n\n```javascript\n    转义字符\n    默认： &, <, >, \", ' \n    js: &, <, >, \", ', =, -, ;\n```\n\n**first** \n\n返回数组第一个值\n\n**join(glue)** \n\n同`[].join`\n    \n**json_encode([indent])** \n\n类似`JSON.stringify`, `indent`为缩进空格数\n    \n**last** \n\n返回数组最后一个值\n    \n**length** \n\n返回变量的`length`，如果是`object`，返回`key`的数量\n\n**lower** \n\n同`xxx.toLowerCase()`\n\n**raw** \n\n指定输入不会被转义\n\n**replace(search, replace[, flags])** \n   \n同`**xxx.replacexxx`\n    \n**reverse** \n\n翻转数组\n\n**striptags** \n\n去除`html/xm`l标签\n\n**title** \n\n大写首字母\n\n**uniq** \n\n数组去重\n\n**upper** \n\n同`xxx.toUpperCase`\n    \n**url_encode** \n\n同`encodeURIComponent`\n    \n**url_decode** \n\n同`decodeURIComponemt`\n\n### 自定义过滤器\n\n创建一个 myfilter.js 然后引入到 Swig的初始化函数中\n\n```javascript\n    swig.init(\n        { filters: require('myfilters') }\n    );\n```\n    \n在 myfilter.js 里，每一个`filter`方法都是一个简单的 js方法，下例是一个翻转字符串的 `filter`：\n\n```javascript\n    exports.myfilter = function (input) {\n        return input.toString().sphelit('').reverse().join('');\n    };\n```\n    \n你的 `filter` 一旦被引入，你就可以向下面一样使用：\n\n```javascript\n    {{ name|myfilter }}\n\n    {% filter myfilter %}\n        I shall be filtered\n    {% endfilter %}\n```\n\n你也可以像下面一样给 `filter` 传参数：\n\n```javascript\n    exports.prefix = function(input, prefix) {\n        return prefix.toString() + input.toString();\n    };\n\n    {{ name|prefix('my prefix') }}\n\n    {% filter prefix 'my prefix' %}\n        I will be prefixed with \"my prefix\".\n    {% endfilter %}\n\n    {% filter prefix foo %}\n        I will be prefixed with the value stored to `foo`.\n    {% endfilter %}\n```\n\n### 模板继承:\n\n#### Swig 使用 extends 和 block 来实现模板继承\n\n- example:\n\n```javascript \n    //layout.html\n    <!doctype html>\n    <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>\n                {% block title %}\n                    My Site\n                {% endblock %}\n            </title>\n            {% block head %}\n            {% endblock %}\n        </head>\n        <body>\n            {% block content %}\n            {% endblock %}\n        </body>\n    </html> \n```\n\n```javascript  \n    //index.html\n    {% extends './layout.html' %}\n    \n    {% block title %}\n        My Page\n    {% endblock %}\n    \n    {% block head %}\n        {% parent %}\n    {% endblock %}\n    \n    {% block content %}\n        <p>This is just an awesome page.</p>\n        <h1>hello,lego.</h1>\n        <script>\n            require('pages/index/main');\n        </script>\n    {% endblock %}\n```\n\n#### swig模板经过编译后：\n\n```javascript\n    <!doctype html>\n    <html>\n        <head>\n            <meta charset=\"utf-8\">\n            <title>My Page</title>\n        </head>\n        <body>\n            <p>This is just an awesome page.</p>\n            <h1>hello,lego.</h1>\n            <p>test</p>\n            <script>\n                //require('pages/index/main');\n            </script>\n        </body>\n    </html>\n```\n\n### swig模板在fis3中的应用\n- swig的模板继承可以更好的帮我们组织代码结构，更好的复用代码。类似jello扩展的velocity标签。\n    \n- 如上个例子，可以将公用代码写在一个文件里，作为母版页，需要的页面就继承这个页面，而且页面中的block又可以方便我们自定义需要的内容。\n在fis3构建中使用时，调用swig编译插件，将swig标签解析成正常的html文件即可。\n\n- gitHubDemo:https://github.com/duanweiqiang/web","slug":"swig","published":1,"updated":"2020-04-30T10:32:48.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcpr001ghi60aktz721r","content":"<p>nodeJS模版渲染引擎</p>\n<h3 id=\"Swig-使用指南\"><a href=\"#Swig-使用指南\" class=\"headerlink\" title=\"Swig 使用指南\"></a>Swig 使用指南</h3><p>1.根据路劲渲染页面<br>2.面向对象的模板继承，页面复用动态页面快速上手功能强大。</p>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>API</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    swig<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      allowErrors<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>   \n      autoescape<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      cache<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      encoding<span class=\"token punctuation\">:</span> <span class=\"token string\">'utf8'</span><span class=\"token punctuation\">,</span>\n      filters<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      root<span class=\"token punctuation\">:</span> <span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span>\n      tags<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      extensions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      tzOffset<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options:\"></a>options:</h3><p><strong>allowErrors:</strong> </p>\n<p>默认值为 <code>false</code>。</p>\n<p>将所有模板解析和编译错误直接输出到模板。</p>\n<p>如果为 <code>true</code>，则将引发错误，抛出到<code>Node.js</code> 进程中，可能会使您的应用程序崩溃。</p>\n<p><strong>autoescape:</strong> </p>\n<p>默认true，强烈建议保持。</p>\n<p>字符转换表请参阅转义过滤器。</p>\n<p>true: HTML安全转义 </p>\n<p>false: 不转义，除非使用转义过滤器或者转义标签</p>\n<p><strong>js:</strong> </p>\n<p><code>js</code>安全转义</p>\n<p><strong>cache:</strong> </p>\n<p>更改为 false 将重新编译每个请求的模板的文件。正式环境建议保持true。</p>\n<p><strong>encoding:</strong> </p>\n<p>模板文件编码</p>\n<p><strong>root:</strong> </p>\n<p>需要搜索模板的目录。如果模板传递给 swig.compileFile 绝对路径(以/开头)，Swig不会在模板root中搜索。如果传递一个数组，使用第一个匹配成功的数组项。</p>\n<p><strong>tzOffset:</strong> </p>\n<p>设置默认时区偏移量。此设置会使转换日期过滤器会自动的修正相应时区偏移量。</p>\n<p><strong>filters:</strong> </p>\n<p>自定义过滤器或者重写默认过滤器，参见自定义过滤器指南。</p>\n<p><strong>tags</strong> </p>\n<p>自定义标签或者重写默认标签，参见自定义标签指南。</p>\n<p><strong>extensions</strong></p>\n<p>添加第三方库，可以在编译模板时使用，参见参见自定义标签指南。</p>\n<h3 id=\"nodejs用法\"><a href=\"#nodejs用法\" class=\"headerlink\" title=\"nodejs用法\"></a>nodejs用法</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> tpl <span class=\"token operator\">=</span> swig<span class=\"token punctuation\">.</span><span class=\"token function\">compileFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path/to/template/file.html\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> renderedHtml <span class=\"token operator\">=</span> tpl<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> vars<span class=\"token punctuation\">:</span> <span class=\"token string\">'to be inserted in template'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>or</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">var</span> tpl <span class=\"token operator\">=</span> swig<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Template string here\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> renderedHtml <span class=\"token operator\">=</span> <span class=\"token function\">tpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> vars<span class=\"token punctuation\">:</span> <span class=\"token string\">'to be inserted in template'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"结合Express\"><a href=\"#结合Express\" class=\"headerlink\" title=\"结合Express\"></a>结合Express</h3><pre class=\" language-javascript\"><code class=\"language-javascript\">    npm install express\n    npm install consolidate</code></pre>\n<p>然后</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    app<span class=\"token punctuation\">.</span><span class=\"token function\">engine</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.html'</span><span class=\"token punctuation\">,</span> cons<span class=\"token punctuation\">.</span>swig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    app<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'view engine'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><p>Swig浏览器版本的api基本与nodejs版相同，不同点如下：</p>\n<p>不能使用swig.compileFile，浏览器没有文件系统</p>\n<p>你必须提前使用swig.compile编译好模板</p>\n<p>按顺序使用<code>extends</code>, <code>import</code>, and <code>include</code>，同时在<code>swig.compile</code>里使用参数<code>templateKey</code>来查找模板</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> template <span class=\"token operator\">=</span> swig<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p>{% block content %}{% endblock %}&lt;/p>'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'main'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> mypage <span class=\"token operator\">=</span> swig<span class=\"token punctuation\">.</span><span class=\"token function\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{% extends \"main\" %}{% block content %}Oh hey there!{% endblock %}'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> filename<span class=\"token punctuation\">:</span> <span class=\"token string\">'mypage'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"swig的变量\"><a href=\"#swig的变量\" class=\"headerlink\" title=\"swig的变量:\"></a>swig的变量:</h3><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">.</span>bar <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token comment\" spellcheck=\"true\">//如果变量未定义，输出空字符。</span></code></pre>\n<p>或</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">[</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token comment\" spellcheck=\"true\">//如果变量未定义，输出空字符。</span></code></pre>\n<h3 id=\"swig的标签：\"><a href=\"#swig的标签：\" class=\"headerlink\" title=\"swig的标签：\"></a>swig的标签：</h3><h4 id=\"extends：\"><a href=\"#extends：\" class=\"headerlink\" title=\"extends：\"></a>extends：</h4><ul>\n<li>使当前模板继承父模板，必须在文件最前</li>\n<li>参数： file父模板相对模板root的相对路径，将在后面介绍如何实现模板继承。</li>\n</ul>\n<h4 id=\"block：\"><a href=\"#block：\" class=\"headerlink\" title=\"block：\"></a>block：</h4><ul>\n<li>定义一个块，使之可以被继承的模板重写，或者重写父模板的同名块，在继承<code>block</code>块时可以使用父模板中已定义的部分 </li>\n<li>参数： name块的名字，必须以字母数字下划线开头</li>\n</ul>\n<h4 id=\"parent：\"><a href=\"#parent：\" class=\"headerlink\" title=\"parent：\"></a>parent：</h4><ul>\n<li><p>将父模板中同名块注入当前块中</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> block head <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> parent <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n       <span class=\"token operator\">&lt;</span>link rel<span class=\"token operator\">=</span><span class=\"token string\">\"stylesheet\"</span> href<span class=\"token operator\">=</span><span class=\"token string\">\"custom.css\"</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endblock <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span> </code></pre>\n</li>\n</ul>\n<h4 id=\"include：\"><a href=\"#include：\" class=\"headerlink\" title=\"include：\"></a>include：</h4><ul>\n<li><p>包含一个模板到当前位置，这个模板将使用当前上下文 </p>\n</li>\n<li><p>参数： file包含模板相对模板 root 的相对路径 </p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> include <span class=\"token string\">\"a.html\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> include <span class=\"token string\">\"template.js\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">//将引入的文件内容放到被引用的地方</span></code></pre>\n<h4 id=\"raw：\"><a href=\"#raw：\" class=\"headerlink\" title=\"raw：\"></a>raw：</h4></li>\n<li><p>停止解析标记中任何内容，所有内容都将输出</p>\n</li>\n<li><p>参数： file父模板相对模板 root 的相对路径</p>\n</li>\n</ul>\n<h4 id=\"for：\"><a href=\"#for：\" class=\"headerlink\" title=\"for：\"></a>for：</h4><ul>\n<li><p>遍历对象和数组</p>\n</li>\n<li><p>参数：</p>\n<p>  x：当前循环迭代名；</p>\n<p>  in:语法标记；</p>\n<p>  y:可迭代对象。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> y <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> x <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfor <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>特殊循环变量 </p>\n<p>  <code>loop.index</code>：当前循环的索引（1开始） </p>\n<p>  <code>loop.index0</code>：当前循环的索引（0开始） </p>\n<p>  <code>loop.revindex</code>：当前循环从结尾开始的索引（1开始）</p>\n<p>  <code>loop.revindex0</code>：当前循环从结尾开始的索引（0开始） </p>\n<p>  <code>loop.key</code>：如果迭代是对象，是当前循环的键，否则同 loop.index </p>\n<p>  <code>loop.first</code>：如果是第一个值返回 true </p>\n<p>  <code>loop.last</code>：如果是最后一个值返回 true </p>\n<p>  <code>loop.cycle</code>：一个帮助函数，以指定的参数作为周期</p>\n</li>\n</ul>\n<h5 id=\"example：\"><a href=\"#example：\" class=\"headerlink\" title=\"example：\"></a>example：</h5><ul>\n<li><p>eg1——————————</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> y <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> loop<span class=\"token punctuation\">.</span>first <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span>ul<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> loop<span class=\"token punctuation\">.</span>index <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">-</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> loop<span class=\"token punctuation\">.</span>key <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> x <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> loop<span class=\"token punctuation\">.</span>last <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ul<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfor <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>eg2 ——————————</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> item <span class=\"token keyword\">in</span> items <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>li <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"{{ loop.cycle('odd', 'even') }}\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> item <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfor <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>eg3—————————–</p>\n</li>\n</ul>\n<h5 id=\"在-for-标签里使用-else\"><a href=\"#在-for-标签里使用-else\" class=\"headerlink\" title=\"在 for 标签里使用 else\"></a>在 for 标签里使用 else</h5><ul>\n<li><p>eg—————————–</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> person <span class=\"token keyword\">in</span> people <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> person <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        There are no people yet<span class=\"token operator\">!</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfor <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"if：条件语句\"><a href=\"#if：条件语句\" class=\"headerlink\" title=\"if：条件语句\"></a>if：条件语句</h4></li>\n<li><p>参数：接受任何有效的JavaScript条件语句</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>x <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> not x <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x and y <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">&amp;&amp;</span> y <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x or y <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">||</span> y <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&amp;&amp;</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"example：-1\"><a href=\"#example：-1\" class=\"headerlink\" title=\"example：\"></a>example：</h5></li>\n</ul>\n<ul>\n<li><p>if else 和 else if</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> foo <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//Some content.</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> elseif <span class=\"token string\">\"foo\"</span> <span class=\"token keyword\">in</span> bar <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//Content if the array `bar` has \"foo\" in it.</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        Fallback content<span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x <span class=\"token punctuation\">[</span>operator<span class=\"token punctuation\">]</span> y <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//Operators: ==, !=, &lt;, &lt;=, >, >=, ===, !==</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token string\">'five'</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//The operands can be also be string or number literals</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x<span class=\"token operator\">|</span>length <span class=\"token operator\">===</span> <span class=\"token number\">3</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//You can use filters on any operand in the statement.</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> x <span class=\"token keyword\">in</span> y <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token comment\" spellcheck=\"true\">//If x is a value that is present in y, this will return true.</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"autoescape：\"><a href=\"#autoescape：\" class=\"headerlink\" title=\"autoescape：\"></a>autoescape：</h4></li>\n<li><p>改变当前变量的自动转义行为 </p>\n</li>\n<li><p>参数： </p>\n<p>  on：当前内容是否转义</p>\n<p>  type: 转义类型，js 或者 html，默认 html</p>\n</li>\n<li><p>example:</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  input <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;p>Hello \"you\" &amp; /'</span>them<span class=\"token operator\">/</span><span class=\"token string\">'&lt;/p>'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> autoescape <span class=\"token boolean\">false</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> input <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endautoescape <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// &lt;p>Hello \"you\" &amp; 'them'&lt;/p></span>\n\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> autoescape <span class=\"token boolean\">true</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> input <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endautoescape <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">//&lt;p>Hello \"you\" &amp; 'them' &lt;/p></span>\n\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> autoescape <span class=\"token boolean\">true</span> <span class=\"token string\">\"js\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> input <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endautoescape <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">// /u003Cp/u003EHello /u0022you/u0022 &amp; /u0027them/u0027/u003C/u005Cp/u003E </span></code></pre>\n</li>\n</ul>\n<h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set:\"></a>set:</h4><ul>\n<li><p>设置一个变量，在当前上下文中复用</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">set</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span> \n\n  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> foo <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> num <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span> \n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfor <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span> </code></pre>\n</li>\n</ul>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter:\"></a>filter:</h4><ul>\n<li><p>对整个块应用过滤器</p>\n</li>\n<li><p>参数：</p>\n</li>\n<li><p>  filter_name: 过滤器名字 </p>\n<p>  若干传给过滤器的参数 父模板相对模板 root 的相对路径</p>\n</li>\n<li><p>example:</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> filter uppercase <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>oh hi<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfilter <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> filter replace <span class=\"token string\">\".\"</span> <span class=\"token string\">\"!\"</span> <span class=\"token string\">\"g\"</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>Hi<span class=\"token punctuation\">.</span> My name is Paul<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfilter <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n  输出\n  OH HI<span class=\"token punctuation\">,</span> PAUL\n  Hi<span class=\"token operator\">!</span> My name is Paul<span class=\"token operator\">!</span></code></pre>\n<h4 id=\"spaceless\"><a href=\"#spaceless\" class=\"headerlink\" title=\"spaceless:\"></a>spaceless:</h4></li>\n<li><p>尝试移除html标签间的空格</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> spaceless <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">for</span> num <span class=\"token keyword\">in</span> foo <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> loop<span class=\"token punctuation\">.</span>index <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfor <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endspaceless <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n  输出\n  <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span><span class=\"token number\">3</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span></code></pre>\n<h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import:\"></a>import:</h4></li>\n<li><p>允许引入另一个模板的宏进入当前上下文</p>\n</li>\n<li><p>参数：</p>\n<p>  file: 引入模板相对模板 root 的相对路径 </p>\n<p>  as: 语法标记 var: 分配给宏的可访问上下文对象</p>\n</li>\n<li><p>expample:</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">import</span> <span class=\"token string\">'formmacros.html'</span> <span class=\"token keyword\">as</span> form <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">//{ this will run the input macro }</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> form<span class=\"token punctuation\">.</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">//{ this, however, will NOT output anything because the macro is scoped to the \"form\" object: }</span>\n  <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ul>\n<h4 id=\"macro\"><a href=\"#macro\" class=\"headerlink\" title=\"macro:\"></a>macro:</h4><ul>\n<li><p>创建自定义可服用的代码段</p>\n</li>\n<li><p>参数：…</p>\n</li>\n<li><p>用户定义</p>\n</li>\n<li><p>example:</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> macro input type name id label value error <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>label <span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"{{ name }}\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> label <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"{{ type }}\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"{{ name }}\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"{{ id }}\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"{{ value }}\"</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">if</span> error <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endif <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endmacro <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n</li>\n<li><p>然后像下面使用</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"First Name\"</span><span class=\"token punctuation\">,</span> fname<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> fname<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lname\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Last Name\"</span><span class=\"token punctuation\">,</span> lname<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> lname<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre>\n</li>\n</ul>\n<p>输出如下</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>label <span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"fname\"</span><span class=\"token operator\">></span>First Name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"fname\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"fname\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"Paul\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>label <span class=\"token keyword\">for</span><span class=\"token operator\">=</span><span class=\"token string\">\"lname\"</span><span class=\"token operator\">></span>Last Name<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>label<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"lname\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"lname\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span> <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"error\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre>\n<h2 id=\"变量过滤器\"><a href=\"#变量过滤器\" class=\"headerlink\" title=\"变量过滤器\"></a>变量过滤器</h2><ul>\n<li><p>用于修改变量。变量名称后用 | 字符分隔添加过滤器。您可以添加多个过滤器。</p>\n</li>\n<li><p>example</p>\n</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">|</span>title <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> was born on <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> birthday<span class=\"token operator\">|</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F jS, Y'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> and has <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> bikes<span class=\"token operator\">|</span>length<span class=\"token operator\">|</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zero\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span> bikes<span class=\"token punctuation\">.</span></code></pre>\n<ul>\n<li>也可以使用 filter 标签来为块内容添加过滤器</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> filter upper <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    oh hi<span class=\"token punctuation\">,</span> paul\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfilter <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"内置过滤器\"><a href=\"#内置过滤器\" class=\"headerlink\" title=\"内置过滤器\"></a>内置过滤器</h3><p><strong>add(value)</strong></p>\n<p>使变量与<code>value</code>相加，可以转换为数值字符串会自动转换为数值。</p>\n<p><strong>addslashes</strong> </p>\n<p>用 <code>\\</code> 转义字符串</p>\n<p><strong>capitalize</strong> </p>\n<p>大写首字母</p>\n<p><strong>date(format[, tzOffset])</strong> </p>\n<ul>\n<li><p>转换日期为指定格式</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  format： 格式 \n  tzOffset： 时区</code></pre>\n</li>\n</ul>\n<p><strong>default(value)</strong> </p>\n<p>默认值（如果变量为<code>undefined</code>，<code>nul</code>l，<code>false</code>）</p>\n<p><strong>e</strong></p>\n<p>同<code>escape</code></p>\n<p><strong>escape([type])</strong> </p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    转义字符\n    默认： <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">></span><span class=\"token punctuation\">,</span> \"<span class=\"token punctuation\">,</span> ' \n    js<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">></span><span class=\"token punctuation\">,</span> \"<span class=\"token punctuation\">,</span> '<span class=\"token punctuation\">,</span> <span class=\"token operator\">=</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">;</span></code></pre>\n<p><strong>first</strong> </p>\n<p>返回数组第一个值</p>\n<p><strong>join(glue)</strong> </p>\n<p>同<code>[].join</code></p>\n<p><strong>json_encode([indent])</strong> </p>\n<p>类似<code>JSON.stringify</code>, <code>indent</code>为缩进空格数</p>\n<p><strong>last</strong> </p>\n<p>返回数组最后一个值</p>\n<p><strong>length</strong> </p>\n<p>返回变量的<code>length</code>，如果是<code>object</code>，返回<code>key</code>的数量</p>\n<p><strong>lower</strong> </p>\n<p>同<code>xxx.toLowerCase()</code></p>\n<p><strong>raw</strong> </p>\n<p>指定输入不会被转义</p>\n<p><strong>replace(search, replace[, flags])</strong> </p>\n<p>同<code>**xxx.replacexxx</code></p>\n<p><strong>reverse</strong> </p>\n<p>翻转数组</p>\n<p><strong>striptags</strong> </p>\n<p>去除<code>html/xm</code>l标签</p>\n<p><strong>title</strong> </p>\n<p>大写首字母</p>\n<p><strong>uniq</strong> </p>\n<p>数组去重</p>\n<p><strong>upper</strong> </p>\n<p>同<code>xxx.toUpperCase</code></p>\n<p><strong>url_encode</strong> </p>\n<p>同<code>encodeURIComponent</code></p>\n<p><strong>url_decode</strong> </p>\n<p>同<code>decodeURIComponemt</code></p>\n<h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><p>创建一个 myfilter.js 然后引入到 Swig的初始化函数中</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    swig<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">{</span> filters<span class=\"token punctuation\">:</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myfilters'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>在 myfilter.js 里，每一个<code>filter</code>方法都是一个简单的 js方法，下例是一个翻转字符串的 <code>filter</code>：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    exports<span class=\"token punctuation\">.</span>myfilter <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sphelit</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>你的 <code>filter</code> 一旦被引入，你就可以向下面一样使用：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">|</span>myfilter <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> filter myfilter <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        I shall be filtered\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfilter <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n<p>你也可以像下面一样给 <code>filter</code> 传参数：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    exports<span class=\"token punctuation\">.</span>prefix <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> prefix<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> input<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">|</span><span class=\"token function\">prefix</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my prefix'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> filter prefix <span class=\"token string\">'my prefix'</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        I will be prefixed <span class=\"token keyword\">with</span> <span class=\"token string\">\"my prefix\"</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfilter <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> filter prefix foo <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        I will be prefixed <span class=\"token keyword\">with</span> the value stored to <span class=\"token template-string\"><span class=\"token string\">`foo`</span></span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endfilter <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"模板继承\"><a href=\"#模板继承\" class=\"headerlink\" title=\"模板继承:\"></a>模板继承:</h3><h4 id=\"Swig-使用-extends-和-block-来实现模板继承\"><a href=\"#Swig-使用-extends-和-block-来实现模板继承\" class=\"headerlink\" title=\"Swig 使用 extends 和 block 来实现模板继承\"></a>Swig 使用 extends 和 block 来实现模板继承</h4><ul>\n<li>example:</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\" spellcheck=\"true\">//layout.html</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>doctype html<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> block title <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n                    My Site\n                <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endblock <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> block head <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endblock <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> block content <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endblock <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span> </code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\" spellcheck=\"true\">//index.html</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> <span class=\"token keyword\">extends</span> <span class=\"token string\">'./layout.html'</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> block title <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        My Page\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endblock <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> block head <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> parent <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endblock <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> block content <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>This is just an awesome page<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>hello<span class=\"token punctuation\">,</span>lego<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n            <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pages/index/main'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token operator\">%</span> endblock <span class=\"token operator\">%</span><span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"swig模板经过编译后：\"><a href=\"#swig模板经过编译后：\" class=\"headerlink\" title=\"swig模板经过编译后：\"></a>swig模板经过编译后：</h4><pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>doctype html<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>My Page<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>This is just an awesome page<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span>hello<span class=\"token punctuation\">,</span>lego<span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span>test<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>\n                <span class=\"token comment\" spellcheck=\"true\">//require('pages/index/main');</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre>\n<h3 id=\"swig模板在fis3中的应用\"><a href=\"#swig模板在fis3中的应用\" class=\"headerlink\" title=\"swig模板在fis3中的应用\"></a>swig模板在fis3中的应用</h3><ul>\n<li><p>swig的模板继承可以更好的帮我们组织代码结构，更好的复用代码。类似jello扩展的velocity标签。</p>\n</li>\n<li><p>如上个例子，可以将公用代码写在一个文件里，作为母版页，需要的页面就继承这个页面，而且页面中的block又可以方便我们自定义需要的内容。<br>在fis3构建中使用时，调用swig编译插件，将swig标签解析成正常的html文件即可。</p>\n</li>\n<li><p>gitHubDemo:<a href=\"https://github.com/duanweiqiang/web\">https://github.com/duanweiqiang/web</a></p>\n</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<p>nodeJS模版渲染引擎</p>\n<h3 id=\"Swig-使用指南\"><a href=\"#Swig-使用指南\" class=\"headerlink\" title=\"Swig 使用指南\"></a>Swig 使用指南</h3><p>1.根据路劲渲染页面<br>2.面向对象的模板继承，页面复用动态页面快速上手功能强大。</p>\n<h3 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h3><p>API</p>\n<pre><code class=\"javascript\">    swig.init({\n      allowErrors: false,   \n      autoescape: true,\n      cache: true,\n      encoding: &#39;utf8&#39;,\n      filters: {},\n      root: &#39;/&#39;,\n      tags: {},\n      extensions: {},\n      tzOffset: 0\n    });</code></pre>\n<h3 id=\"options\"><a href=\"#options\" class=\"headerlink\" title=\"options:\"></a>options:</h3><p><strong>allowErrors:</strong> </p>\n<p>默认值为 <code>false</code>。</p>\n<p>将所有模板解析和编译错误直接输出到模板。</p>\n<p>如果为 <code>true</code>，则将引发错误，抛出到<code>Node.js</code> 进程中，可能会使您的应用程序崩溃。</p>\n<p><strong>autoescape:</strong> </p>\n<p>默认true，强烈建议保持。</p>\n<p>字符转换表请参阅转义过滤器。</p>\n<p>true: HTML安全转义 </p>\n<p>false: 不转义，除非使用转义过滤器或者转义标签</p>\n<p><strong>js:</strong> </p>\n<p><code>js</code>安全转义</p>\n<p><strong>cache:</strong> </p>\n<p>更改为 false 将重新编译每个请求的模板的文件。正式环境建议保持true。</p>\n<p><strong>encoding:</strong> </p>\n<p>模板文件编码</p>\n<p><strong>root:</strong> </p>\n<p>需要搜索模板的目录。如果模板传递给 swig.compileFile 绝对路径(以/开头)，Swig不会在模板root中搜索。如果传递一个数组，使用第一个匹配成功的数组项。</p>\n<p><strong>tzOffset:</strong> </p>\n<p>设置默认时区偏移量。此设置会使转换日期过滤器会自动的修正相应时区偏移量。</p>\n<p><strong>filters:</strong> </p>\n<p>自定义过滤器或者重写默认过滤器，参见自定义过滤器指南。</p>\n<p><strong>tags</strong> </p>\n<p>自定义标签或者重写默认标签，参见自定义标签指南。</p>\n<p><strong>extensions</strong></p>\n<p>添加第三方库，可以在编译模板时使用，参见参见自定义标签指南。</p>\n<h3 id=\"nodejs用法\"><a href=\"#nodejs用法\" class=\"headerlink\" title=\"nodejs用法\"></a>nodejs用法</h3><pre><code class=\"javascript\">    var tpl = swig.compileFile(&quot;path/to/template/file.html&quot;);\n    var renderedHtml = tpl.render({ vars: &#39;to be inserted in template&#39; });</code></pre>\n<p>or</p>\n<pre><code class=\"javascript\">    var tpl = swig.compile(&quot;Template string here&quot;);\n    var renderedHtml = tpl({ vars: &#39;to be inserted in template&#39; });</code></pre>\n<h3 id=\"结合Express\"><a href=\"#结合Express\" class=\"headerlink\" title=\"结合Express\"></a>结合Express</h3><pre><code class=\"javascript\">    npm install express\n    npm install consolidate</code></pre>\n<p>然后</p>\n<pre><code class=\"javascript\">    app.engine(&#39;.html&#39;, cons.swig);\n    app.set(&#39;view engine&#39;, &#39;html&#39;);</code></pre>\n<h3 id=\"浏览器\"><a href=\"#浏览器\" class=\"headerlink\" title=\"浏览器\"></a>浏览器</h3><p>Swig浏览器版本的api基本与nodejs版相同，不同点如下：</p>\n<p>不能使用swig.compileFile，浏览器没有文件系统</p>\n<p>你必须提前使用swig.compile编译好模板</p>\n<p>按顺序使用<code>extends</code>, <code>import</code>, and <code>include</code>，同时在<code>swig.compile</code>里使用参数<code>templateKey</code>来查找模板</p>\n<pre><code class=\"javascript\">var template = swig.compile(&#39;&lt;p&gt;{% block content %}{% endblock %}</p>', { filename: 'main' });\nvar mypage = swig.compile('{% extends \"main\" %}{% block content %}Oh hey there!{% endblock %}&#39;, { filename: &#39;mypage&#39; });</code></pre>\n<h2 id=\"基础\"><a href=\"#基础\" class=\"headerlink\" title=\"基础\"></a>基础</h2><h3 id=\"swig的变量\"><a href=\"#swig的变量\" class=\"headerlink\" title=\"swig的变量:\"></a>swig的变量:</h3><pre><code class=\"javascript\">{{ foo.bar }}//如果变量未定义，输出空字符。</code></pre>\n<p>或</p>\n<pre><code class=\"javascript\">{{ foo['bar'] }}//如果变量未定义，输出空字符。</code></pre>\n<h3 id=\"swig的标签：\"><a href=\"#swig的标签：\" class=\"headerlink\" title=\"swig的标签：\"></a>swig的标签：</h3><h4 id=\"extends：\"><a href=\"#extends：\" class=\"headerlink\" title=\"extends：\"></a>extends：</h4><ul>\n<li>使当前模板继承父模板，必须在文件最前</li>\n<li>参数： file父模板相对模板root的相对路径，将在后面介绍如何实现模板继承。</li>\n</ul>\n<h4 id=\"block：\"><a href=\"#block：\" class=\"headerlink\" title=\"block：\"></a>block：</h4><ul>\n<li>定义一个块，使之可以被继承的模板重写，或者重写父模板的同名块，在继承<code>block</code>块时可以使用父模板中已定义的部分 </li>\n<li>参数： name块的名字，必须以字母数字下划线开头</li>\n</ul>\n<h4 id=\"parent：\"><a href=\"#parent：\" class=\"headerlink\" title=\"parent：\"></a>parent：</h4><ul>\n<li><p>将父模板中同名块注入当前块中</p>\n<pre><code class=\"javascript\">  {% block head %}\n        {% parent %}\n       <link rel=\"stylesheet\" href=\"custom.css\">\n    {% endblock %} </code></pre>\n</li>\n</ul>\n<h4 id=\"include：\"><a href=\"#include：\" class=\"headerlink\" title=\"include：\"></a>include：</h4><ul>\n<li><p>包含一个模板到当前位置，这个模板将使用当前上下文 </p>\n</li>\n<li><p>参数： file包含模板相对模板 root 的相对路径 </p>\n<pre><code class=\"javascript\">  {% include \"a.html\" %}\n  {% include \"template.js\" %}\n  //将引入的文件内容放到被引用的地方</code></pre>\n<h4 id=\"raw：\"><a href=\"#raw：\" class=\"headerlink\" title=\"raw：\"></a>raw：</h4></li>\n<li><p>停止解析标记中任何内容，所有内容都将输出</p>\n</li>\n<li><p>参数： file父模板相对模板 root 的相对路径</p>\n</li>\n</ul>\n<h4 id=\"for：\"><a href=\"#for：\" class=\"headerlink\" title=\"for：\"></a>for：</h4><ul>\n<li><p>遍历对象和数组</p>\n</li>\n<li><p>参数：</p>\n<p>  x：当前循环迭代名；</p>\n<p>  in:语法标记；</p>\n<p>  y:可迭代对象。</p>\n<pre><code class=\"javascript\">  {% for x in y %}\n        {{ x }}\n    {% endfor %}</code></pre>\n</li>\n<li><p>特殊循环变量 </p>\n<p>  <code>loop.index</code>：当前循环的索引（1开始） </p>\n<p>  <code>loop.index0</code>：当前循环的索引（0开始） </p>\n<p>  <code>loop.revindex</code>：当前循环从结尾开始的索引（1开始）</p>\n<p>  <code>loop.revindex0</code>：当前循环从结尾开始的索引（0开始） </p>\n<p>  <code>loop.key</code>：如果迭代是对象，是当前循环的键，否则同 loop.index </p>\n<p>  <code>loop.first</code>：如果是第一个值返回 true </p>\n<p>  <code>loop.last</code>：如果是最后一个值返回 true </p>\n<p>  <code>loop.cycle</code>：一个帮助函数，以指定的参数作为周期</p>\n</li>\n</ul>\n<h5 id=\"example：\"><a href=\"#example：\" class=\"headerlink\" title=\"example：\"></a>example：</h5><ul>\n<li><p>eg1——————————</p>\n<pre><code class=\"javascript\">  {% for x in y %}\n        {% if loop.first %}<ul>{% endif %}\n        <li>{{ loop.index }} - {{ loop.key }}: {{ x }}</li>\n        {% if loop.last %}</ul>{% endif %}\n    {% endfor %}</code></pre>\n</li>\n<li><p>eg2 ——————————</p>\n<pre><code class=\"javascript\">  {% for item in items %}\n        <li class=\"{{ loop.cycle('odd', 'even') }}\">{{ item }}</li>\n    {% endfor %}</code></pre>\n</li>\n<li><p>eg3—————————–</p>\n</li>\n</ul>\n<h5 id=\"在-for-标签里使用-else\"><a href=\"#在-for-标签里使用-else\" class=\"headerlink\" title=\"在 for 标签里使用 else\"></a>在 for 标签里使用 else</h5><ul>\n<li><p>eg—————————–</p>\n<pre><code class=\"javascript\">  {% for person in people %}\n        {{ person }}\n    {% else %}\n        There are no people yet!\n    {% endfor %}</code></pre>\n<h4 id=\"if：条件语句\"><a href=\"#if：条件语句\" class=\"headerlink\" title=\"if：条件语句\"></a>if：条件语句</h4></li>\n<li><p>参数：接受任何有效的JavaScript条件语句</p>\n<pre><code class=\"javascript\">  {% if x %}{% endif %}\n    {% if !x %}{% endif %}\n  {% if not x %}{% endif %}\n    {% if x and y %}{% endif %}\n  {% if x && y %}{% endif %}\n    {% if x or y %}{% endif %}\n  {% if x || y %}{% endif %}\n    {% if x || (y && z) %}{% endif %}</code></pre>\n<h5 id=\"example：-1\"><a href=\"#example：-1\" class=\"headerlink\" title=\"example：\"></a>example：</h5></li>\n</ul>\n<ul>\n<li><p>if else 和 else if</p>\n<pre><code class=\"javascript\">  {% if foo %}\n        //Some content.\n    {% elseif \"foo\" in bar %}\n        //Content if the array `bar` has \"foo\" in it.\n    {% else %}\n        Fallback content.\n    {% endif %}\n\n  {% if x [operator] y %}\n        //Operators: ==, !=, <, <=, >, >=, ===, !==\n    {% endif %}\n\n  {% if x == 'five' %}\n        //The operands can be also be string or number literals\n    {% endif %}\n\n  {% if x|length === 3 %}\n        //You can use filters on any operand in the statement.\n    {% endif %}\n\n  {% if x in y %}\n        //If x is a value that is present in y, this will return true.\n    {% endif %}</code></pre>\n<h4 id=\"autoescape：\"><a href=\"#autoescape：\" class=\"headerlink\" title=\"autoescape：\"></a>autoescape：</h4></li>\n<li><p>改变当前变量的自动转义行为 </p>\n</li>\n<li><p>参数： </p>\n<p>  on：当前内容是否转义</p>\n<p>  type: 转义类型，js 或者 html，默认 html</p>\n</li>\n<li><p>example:</p>\n<pre><code class=\"javascript\">  input = &#39;&lt;p&gt;Hello &quot;you&quot; &amp; /&#39;them/&#39;&lt;/p&gt;&#39;;\n  {% autoescape false %}\n        {{ input }}\n    {% endautoescape %}\n  // &lt;p&gt;Hello &quot;you&quot; &amp; &#39;them&#39;&lt;/p&gt;\n\n  {% autoescape true %}\n        {{ input }}\n    {% endautoescape %}\n  //&lt;p&gt;Hello &quot;you&quot; &amp; &#39;them&#39; &lt;/p&gt;\n\n  {% autoescape true \"js\" %}\n        {{ input }}\n    {% endautoescape %}\n  // /u003Cp/u003EHello /u0022you/u0022 &amp; /u0027them/u0027/u003C/u005Cp/u003E </code></pre>\n</li>\n</ul>\n<h4 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set:\"></a>set:</h4><ul>\n<li><p>设置一个变量，在当前上下文中复用</p>\n<pre><code class=\"javascript\">  {% set foo = [0, 1, 2, 3, 4, 5] %} \n\n  {% for num in foo %}\n        <li>{{ num }}</li> \n    {% endfor %} </code></pre>\n</li>\n</ul>\n<h4 id=\"filter\"><a href=\"#filter\" class=\"headerlink\" title=\"filter:\"></a>filter:</h4><ul>\n<li><p>对整个块应用过滤器</p>\n</li>\n<li><p>参数：</p>\n</li>\n<li><p>  filter_name: 过滤器名字 </p>\n<p>  若干传给过滤器的参数 父模板相对模板 root 的相对路径</p>\n</li>\n<li><p>example:</p>\n<pre><code class=\"javascript\">  {% filter uppercase %}oh hi, {{ name }}{% endfilter %}\n    {% filter replace \".\" \"!\" \"g\" %}Hi. My name is Paul.{% endfilter %}\n\n  输出\n  OH HI, PAUL\n  Hi! My name is Paul!</code></pre>\n<h4 id=\"spaceless\"><a href=\"#spaceless\" class=\"headerlink\" title=\"spaceless:\"></a>spaceless:</h4></li>\n<li><p>尝试移除html标签间的空格</p>\n<pre><code class=\"javascript\">  {% spaceless %}\n    {% for num in foo %}\n        <li>{{ loop.index }}</li>\n    {% endfor %}\n    {% endspaceless %}\n\n  输出\n  &lt;li&gt;1&lt;/li&gt;&lt;li&gt;2&lt;/li&gt;&lt;li&gt;3&lt;/li&gt;</code></pre>\n<h4 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import:\"></a>import:</h4></li>\n<li><p>允许引入另一个模板的宏进入当前上下文</p>\n</li>\n<li><p>参数：</p>\n<p>  file: 引入模板相对模板 root 的相对路径 </p>\n<p>  as: 语法标记 var: 分配给宏的可访问上下文对象</p>\n</li>\n<li><p>expample:</p>\n<pre><code class=\"javascript\">  {% import 'formmacros.html' as form %}\n\n  //{ this will run the input macro }\n  {{ form.input(\"text\", \"name\") }}\n\n  //{ this, however, will NOT output anything because the macro is scoped to the &quot;form&quot; object: }\n  {{ input(\"text\", \"name\") }}</code></pre>\n</li>\n</ul>\n<h4 id=\"macro\"><a href=\"#macro\" class=\"headerlink\" title=\"macro:\"></a>macro:</h4><ul>\n<li><p>创建自定义可服用的代码段</p>\n</li>\n<li><p>参数：…</p>\n</li>\n<li><p>用户定义</p>\n</li>\n<li><p>example:</p>\n<pre><code class=\"javascript\">  {% macro input type name id label value error %}\n        <label for=\"{{ name }}\">{{ label }}</label>\n        <input type=\"{{ type }}\" name=\"{{ name }}\" id=\"{{ id }}\" value=\"{{ value }}\"{% if error %} class=\"error\"{% endif %}>\n    {% endmacro %}</code></pre>\n</li>\n<li><p>然后像下面使用</p>\n<pre><code class=\"javascript\">  &lt;div&gt;{\n      { input(&quot;text&quot;, &quot;fname&quot;, &quot;fname&quot;, &quot;First Name&quot;, fname.value, fname.errors) }\n  }&lt;/div&gt;\n  &lt;div&gt;{\n      { input(&quot;text&quot;, &quot;lname&quot;, &quot;lname&quot;, &quot;Last Name&quot;, lname.value, lname.errors) }\n  }&lt;/div&gt;</code></pre>\n</li>\n</ul>\n<p>输出如下</p>\n<pre><code class=\"javascript\">    &lt;div&gt;\n        &lt;label for=&quot;fname&quot;&gt;First Name&lt;/label&gt;\n        &lt;input type=&quot;text&quot; name=&quot;fname&quot; id=&quot;fname&quot; value=&quot;Paul&quot;&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;label for=&quot;lname&quot;&gt;Last Name&lt;/label&gt;\n        &lt;input type=&quot;text&quot; name=&quot;lname&quot; id=&quot;lname&quot; value=&quot;&quot; class=&quot;error&quot;&gt;\n    &lt;/div&gt;</code></pre>\n<h2 id=\"变量过滤器\"><a href=\"#变量过滤器\" class=\"headerlink\" title=\"变量过滤器\"></a>变量过滤器</h2><ul>\n<li><p>用于修改变量。变量名称后用 | 字符分隔添加过滤器。您可以添加多个过滤器。</p>\n</li>\n<li><p>example</p>\n</li>\n</ul>\n<pre><code class=\"javascript\">    {{ name|title }} was born on {{ birthday|date('F jS, Y') }} and has {{ bikes|length|default(\"zero\") }} bikes.</code></pre>\n<ul>\n<li>也可以使用 filter 标签来为块内容添加过滤器</li>\n</ul>\n<pre><code class=\"javascript\">    {% filter upper %}\n    oh hi, paul\n    {% endfilter %}</code></pre>\n<h3 id=\"内置过滤器\"><a href=\"#内置过滤器\" class=\"headerlink\" title=\"内置过滤器\"></a>内置过滤器</h3><p><strong>add(value)</strong></p>\n<p>使变量与<code>value</code>相加，可以转换为数值字符串会自动转换为数值。</p>\n<p><strong>addslashes</strong> </p>\n<p>用 <code>\\</code> 转义字符串</p>\n<p><strong>capitalize</strong> </p>\n<p>大写首字母</p>\n<p><strong>date(format[, tzOffset])</strong> </p>\n<ul>\n<li><p>转换日期为指定格式</p>\n<pre><code class=\"javascript\">  format： 格式 \n  tzOffset： 时区</code></pre>\n</li>\n</ul>\n<p><strong>default(value)</strong> </p>\n<p>默认值（如果变量为<code>undefined</code>，<code>nul</code>l，<code>false</code>）</p>\n<p><strong>e</strong></p>\n<p>同<code>escape</code></p>\n<p><strong>escape([type])</strong> </p>\n<pre><code class=\"javascript\">    转义字符\n    默认： &amp;, &lt;, &gt;, &quot;, &#39; \n    js: &amp;, &lt;, &gt;, &quot;, &#39;, =, -, ;</code></pre>\n<p><strong>first</strong> </p>\n<p>返回数组第一个值</p>\n<p><strong>join(glue)</strong> </p>\n<p>同<code>[].join</code></p>\n<p><strong>json_encode([indent])</strong> </p>\n<p>类似<code>JSON.stringify</code>, <code>indent</code>为缩进空格数</p>\n<p><strong>last</strong> </p>\n<p>返回数组最后一个值</p>\n<p><strong>length</strong> </p>\n<p>返回变量的<code>length</code>，如果是<code>object</code>，返回<code>key</code>的数量</p>\n<p><strong>lower</strong> </p>\n<p>同<code>xxx.toLowerCase()</code></p>\n<p><strong>raw</strong> </p>\n<p>指定输入不会被转义</p>\n<p><strong>replace(search, replace[, flags])</strong> </p>\n<p>同<code>**xxx.replacexxx</code></p>\n<p><strong>reverse</strong> </p>\n<p>翻转数组</p>\n<p><strong>striptags</strong> </p>\n<p>去除<code>html/xm</code>l标签</p>\n<p><strong>title</strong> </p>\n<p>大写首字母</p>\n<p><strong>uniq</strong> </p>\n<p>数组去重</p>\n<p><strong>upper</strong> </p>\n<p>同<code>xxx.toUpperCase</code></p>\n<p><strong>url_encode</strong> </p>\n<p>同<code>encodeURIComponent</code></p>\n<p><strong>url_decode</strong> </p>\n<p>同<code>decodeURIComponemt</code></p>\n<h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><p>创建一个 myfilter.js 然后引入到 Swig的初始化函数中</p>\n<pre><code class=\"javascript\">    swig.init(\n        { filters: require(&#39;myfilters&#39;) }\n    );</code></pre>\n<p>在 myfilter.js 里，每一个<code>filter</code>方法都是一个简单的 js方法，下例是一个翻转字符串的 <code>filter</code>：</p>\n<pre><code class=\"javascript\">    exports.myfilter = function (input) {\n        return input.toString().sphelit(&#39;&#39;).reverse().join(&#39;&#39;);\n    };</code></pre>\n<p>你的 <code>filter</code> 一旦被引入，你就可以向下面一样使用：</p>\n<pre><code class=\"javascript\">    {{ name|myfilter }}\n\n    {% filter myfilter %}\n        I shall be filtered\n    {% endfilter %}</code></pre>\n<p>你也可以像下面一样给 <code>filter</code> 传参数：</p>\n<pre><code class=\"javascript\">    exports.prefix = function(input, prefix) {\n        return prefix.toString() + input.toString();\n    };\n\n    {{ name|prefix('my prefix') }}\n\n    {% filter prefix 'my prefix' %}\n        I will be prefixed with \"my prefix\".\n    {% endfilter %}\n\n    {% filter prefix foo %}\n        I will be prefixed with the value stored to `foo`.\n    {% endfilter %}</code></pre>\n<h3 id=\"模板继承\"><a href=\"#模板继承\" class=\"headerlink\" title=\"模板继承:\"></a>模板继承:</h3><h4 id=\"Swig-使用-extends-和-block-来实现模板继承\"><a href=\"#Swig-使用-extends-和-block-来实现模板继承\" class=\"headerlink\" title=\"Swig 使用 extends 和 block 来实现模板继承\"></a>Swig 使用 extends 和 block 来实现模板继承</h4><ul>\n<li>example:</li>\n</ul>\n<pre><code class=\"javascript\">    //layout.html\n    &lt;!doctype html&gt;\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;meta charset=&quot;utf-8&quot;&gt;\n            &lt;title&gt;\n                {% block title %}\n                    My Site\n                {% endblock %}\n            &lt;/title&gt;\n            {% block head %}\n            {% endblock %}\n        &lt;/head&gt;\n        &lt;body&gt;\n            {% block content %}\n            {% endblock %}\n        &lt;/body&gt;\n    &lt;/html&gt; </code></pre>\n<pre><code class=\"javascript\">    //index.html\n    {% extends './layout.html' %}\n\n    {% block title %}\n        My Page\n    {% endblock %}\n\n    {% block head %}\n        {% parent %}\n    {% endblock %}\n\n    {% block content %}\n        <p>This is just an awesome page.</p>\n        <h1>hello,lego.</h1>\n        <script>\n            require('pages/index/main');\n        </script>\n    {% endblock %}</code></pre>\n<h4 id=\"swig模板经过编译后：\"><a href=\"#swig模板经过编译后：\" class=\"headerlink\" title=\"swig模板经过编译后：\"></a>swig模板经过编译后：</h4><pre><code class=\"javascript\">    &lt;!doctype html&gt;\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;meta charset=&quot;utf-8&quot;&gt;\n            &lt;title&gt;My Page&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;p&gt;This is just an awesome page.&lt;/p&gt;\n            &lt;h1&gt;hello,lego.&lt;/h1&gt;\n            &lt;p&gt;test&lt;/p&gt;\n            &lt;script&gt;\n                //require(&#39;pages/index/main&#39;);\n            &lt;/script&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;</code></pre>\n<h3 id=\"swig模板在fis3中的应用\"><a href=\"#swig模板在fis3中的应用\" class=\"headerlink\" title=\"swig模板在fis3中的应用\"></a>swig模板在fis3中的应用</h3><ul>\n<li><p>swig的模板继承可以更好的帮我们组织代码结构，更好的复用代码。类似jello扩展的velocity标签。</p>\n</li>\n<li><p>如上个例子，可以将公用代码写在一个文件里，作为母版页，需要的页面就继承这个页面，而且页面中的block又可以方便我们自定义需要的内容。<br>在fis3构建中使用时，调用swig编译插件，将swig标签解析成正常的html文件即可。</p>\n</li>\n<li><p>gitHubDemo:<a href=\"https://github.com/duanweiqiang/web\">https://github.com/duanweiqiang/web</a></p>\n</li>\n</ul>\n"},{"title":"react顺滑拖动实现","date":"2020-05-15T03:59:22.000Z","img":"/medias/featureimages/7.jpg","top":false,"cover":true,"coverImg":"/medias/featureimages/7.jpg","toc":true,"mathjax":false,"summary":"一个快速、轻量级的拖放、可排序的库，用于对覆盖许多设计与开发（d&d）场景的许多配置选项进行响应。它使用css转换来制作动画，因此只要有可能，它的硬件就会加速。","_content":"#### 一、介绍\n1.react-smooth-dnd是一个快速、轻量级的拖放、可排序的库，用于对覆盖许多设计与开发（d&d）场景的许多配置选项进行响应。它使用css转换来制作动画，因此只要有可能，它的硬件就会加速，提高了拖动的动画效果。\n\n2.此库是在基于smooth-dnd库开发的React拖动效果组件。\n\n3.npm 安装 `npm install react-smooth-dnd`；\n\n4.鉴于可以查到的文档都是英文的，而且demo都残缺不全，本文进行了中文归纳和详细案例介绍；\n\n5.本文主要介绍基于react引入的方式来写的demo；\n\n![列表拖动排序.jpg](https://i.loli.net/2020/05/18/VpDJzQ4938yr5TO.jpg)\n\n6.目前该库还在维护中，有1.4k星，使用还不错，目前没发现bug，兼容Chrome浏览器\n![gitHubInfo.jpg](https://i.loli.net/2020/05/18/xhY1ElczrJBuidj.jpg)\n\n#### 二、一个简单的demo\n\n本案例是一个简单的引入和样式\n\n```javascript\nimport React, { Component } from 'react';\nimport { Container, Draggable } from 'react-smooth-dnd';\n\nclass SimpleDemo extends Component {\n  render() {\n    return (\n      <div>\n        <Container onDrop={this.onDrop}>\n            <Draggable key={id}>\n                <div>{`${我是一个可拖动的元素，拖拖试试看}`}</div>\n            </Draggable>\n        </Container>\n      </div>\n    );\n  }\n}\n\n```\n下面文章就介绍详细的使用方法。。。\n\n### 三、Dom引入\n\n引入标签解释：\n\n- Container 指的是拖动的容器，即可拖动的有效使用范围,它的内部可有有多个`<Draggable>`标签。\n\n- Draggable 指的是可拖动元素，在页面中把可拖动的内容用`<Draggable>`标签包裹后，该标签就可以脱离文档进行拖动。\n\n* 用map实现的拖动内部元素\n```javascript\n<Container onDrop={this.onDrop}>\n    {itemList.map(item => {\n    return (\n        <Draggable key={item.id}>\n        ...//你的拖动代码块\n        </Draggable>\n    );\n    })}\n</Container>\n```\n\n### 四、Container 常用API\n\n#### 1.groupName\n\n解释：定义当前拖动容器的名称（唯一性），如果代码中有多个`groupName=\"col\"` 则表示这几个拖动区域中的内容是相互之间可以拖动。比如我们要实现一个跨组拖动。\n\n```javascript\n<Container groupName=\"col\">\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 2.behaviour的使用\n\n解释：当前容器中的元素拖动后，本容器中的元素状态。标示当前容器状态；\n\n可选值：`move`（默认，移动）、`copy`（复制）、`drop-zone`（跌落）、`contain`（包含）\n\n```javascript\n//实现复制本容器中的内容而不是move拖动离开\n<Container behaviour=\"copy\">\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 3.lockAxis的使用\n\n解释：设置限制当前拖动的方向。\n\n可选值：`x`、`y`，表示只能x轴或者y轴方向拖动；\n\n```javascript\n//限制该拖动只能y轴方向进行拖动\n<Container lockAxis=\"y\">\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 4.dragClass的使用\n\n解释：拖动元素被拖动时可添加的样式，（拿起来样式）；可以使用react的Style进行引入css\n\n可以设置字体，缩放，旋转等`css`的样式实现拖动过程中的样式；\n\n```css\n.card_ghost{\n    background: #FFF;\n    transform:rotate(1.5deg);\n    -ms-transform:rotate(1.5deg); \t/* IE 9 */\n    -moz-transform:rotate(1.5deg); \t/* Firefox */\n    -webkit-transform:rotate(1.5deg); /* Safari 和 Chrome */\n    -o-transform:rotate(1.5deg); \t/* Opera */\n    box-shadow: 0 0 15px grey;\n    opacity: 0.8;\n}\n```\n\n```javascript\n<Container dragClass={style.card_ghost}>\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 5.dropClass的使用\n\n解释：拖动释放时的样式，写法如上；\n\n#### 6.dropPlaceholder的使用\n\n解释：拖动时的占位效果\n\n当拖动元素拖走时或进入其他位置时，用于占位当前阴影配置\n\n参数：`className`, `animationDuration`, `showOnTop`;\n\ncalssNmae： 占位元素的延时\nanimationDuration： 延时\nshowOnTop： （暂时还未知作用）\n\n```css\n.cards_drop_preview{\n    background: #DDDFE3;\n}\n```\n\n```javascript\n<Container \n    dropPlaceholder={{\n        animationDuration: 150,//动画延时\n        showOnTop: false,//暂时还不知道作用\n        className: style.cards_drop_preview, //占位元素样式\n    }}\n>\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 7.dragBeginDelay的使用\n\n解释：延时拖动，时间单位为毫秒。按下项目后延迟开始拖动。在延迟超过5px之前移动光标将取消拖动。\n\n防止有误操作的情况发生；也可用于该item上既有拖动又又其他事件，延时可以区分需要触发的是那种事件。\n\n#### 8.onDragStart、onDragEnd、onDropReady、onDrop的使用\n\n解释： \nonDragStart：拖动开始后出发该函数；\nonDragEnd：拖动结束；\nonDropReady：拖动ready；\nonDrop：拖动释放；\n\n参数：\n`isSource` : boolean (true/false) 如果是从其他容器中拖动来的则是false\n`payload` : object （ { removedIndex, addedIndex, payload } ）\n    - removedIndex移走元素的索引；\n    - addedIndex添加元素的索引；\n    - payload移动的元素数据，配合`getChildPayload`函数使用；\n`willAcceptDrop` : boolean 如果拖动的项可以放入容器中，则为true，否则为false。\n\n可以认为是辅助函数，用于获取动作结束后的一些状态事件获取。\n\n```javascript\n//拖动开始后出发\nonDragStart = ({isSource, payload, willAcceptDrop})=>{\n    const { removedIndex, addedIndex, payload } = dragResult;\n    if (removedIndex === null && addedIndex === null) return arr;\n    const result = [...arr];\n    let itemToAdd = payload;\n    if (removedIndex !== null) {\n      itemToAdd = result.splice(removedIndex, 1)[0];\n    }\n    if (addedIndex !== null) {\n      result.splice(addedIndex, 0, itemToAdd);\n    }\n    this.setState({ dataList: result });\n}\n<Container onDragStart={this.onDragStart}>\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 9.getChildPayload的使用\n\n解释：设置上述的payload的值\n\ngetChildPayload 函数return一个自定义的值；\n\n用来记录当前拖动元素的信息，参数是index即Container中dataList的索引，当释放（onDrop）函数触发是，payLoad会自动带入该参数，用于做数据处理。\n\n```javascript\n//拖动开始后出发\ngetChildPayload = (index)=>{\n    console.log(index);//当前拖动的索引\n    return {\n        ...\n    }\n}\n<Container getChildPayload={this.getChildPayload}>\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 10.onDragEnter、onDragLeave的使用\n\n解释： 监控拖动进入或者离开响应区时的状态\n\n函数参数数据和和7一样，同上onDragStart；\n\n该功能可以在拖动的中间触发事件，进行一些业务逻辑处理\n\n### 五、Draggable API\n\nDraggable可以使用render进行渲染，默认情况下，Draggable对组件根使用div元素。\n如果设置了render函数，则Draggable的子属性将被忽略，而render的返回值将用于render Draggable。\n\nreturn 是一个React的dom元素集（React Element）；\n\ndemo\n```javascript\n<Draggable render={() => {\n  return (\n    <li>\n      ...\n    </li>\n  )\n}}/>\n```\n\n### 六、典型Demo\n\n我们最长使用的就是`dragClass`、`getChildPayload`、`onDrop`这些函数；\n\n下面来个拖动排序的demo实现拖动排序\n\n拖动排序最重要的时顺序的索引值，如果先删除了就会导致索引对应不上了，这点要特别注意\n\n```javascript\nimport React, { Component } from 'react';\nimport { Container, Draggable } from 'react-smooth-dnd';\n\n\nclass SimpleDemo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataList: [ //排序数组\n                {\n                    id: 1,\n                    name: '第1个'\n                },\n                {\n                    id: 1,\n                    name: '第2个'\n                },\n                {\n                    id: 1,\n                    name: '第3个'\n                },\n                {\n                    id: 1,\n                    name: '第4个'\n                }\n            ]\n        };\n    }\n    //设置拖动内容\n    getChildPayload = (index)=>{\n        const { dataList } = this.state;\n        return {\n            item:dataList[index]\n            index,\n        }\n    }\n    //拖动释放时出发重新排序事件\n    onDrop = (dragResult)=>{\n        const { removedIndex, addedIndex, payload } = dragResult;\n        const { dataList } = this.state;\n        let resutl = dataList;\n        let itemToAdd = null;\n        if (removedIndex !== null) {\n            itemToAdd = result.splice(removedIndex, 1)[0];\n        }\n        if (addedIndex !== null) {\n            result.splice(addedIndex, 0, itemToAdd);\n        }\n        this.setState({dataList: result})\n    }\n    render() {\n        const { dataList } = this.state;\n        return (\n        <div>\n            <Container \n                onDrop={this.onDrop}\n                getChildPayload={this.getChildPayload}\n            >{\n                dataList.map(k=>{\n                    return <Draggable key={k.id}>\n                        <div>{k.name}</div>\n                    </Draggable>\n                })\n            }\n                \n            </Container>\n        </div>\n        );\n    }\n}\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n更多详细使用请参考如下gitHub地址\ngithub demo地址：https://kutlugsahin.github.io/smooth-dnd-demo/\n\n","source":"_posts/react-smooth-dnd.md","raw":"---\ntitle: react顺滑拖动实现\ndate: 2020-05-15 11:59:22\nimg: /medias/featureimages/7.jpg\ntop: false\ncover: true\ncoverImg: /medias/featureimages/7.jpg\ntoc: true\nmathjax: false\nsummary: 一个快速、轻量级的拖放、可排序的库，用于对覆盖许多设计与开发（d&d）场景的许多配置选项进行响应。它使用css转换来制作动画，因此只要有可能，它的硬件就会加速。\ncategories: 前端\ntags:\n- React\n- 拖动\n- drag\n---\n#### 一、介绍\n1.react-smooth-dnd是一个快速、轻量级的拖放、可排序的库，用于对覆盖许多设计与开发（d&d）场景的许多配置选项进行响应。它使用css转换来制作动画，因此只要有可能，它的硬件就会加速，提高了拖动的动画效果。\n\n2.此库是在基于smooth-dnd库开发的React拖动效果组件。\n\n3.npm 安装 `npm install react-smooth-dnd`；\n\n4.鉴于可以查到的文档都是英文的，而且demo都残缺不全，本文进行了中文归纳和详细案例介绍；\n\n5.本文主要介绍基于react引入的方式来写的demo；\n\n![列表拖动排序.jpg](https://i.loli.net/2020/05/18/VpDJzQ4938yr5TO.jpg)\n\n6.目前该库还在维护中，有1.4k星，使用还不错，目前没发现bug，兼容Chrome浏览器\n![gitHubInfo.jpg](https://i.loli.net/2020/05/18/xhY1ElczrJBuidj.jpg)\n\n#### 二、一个简单的demo\n\n本案例是一个简单的引入和样式\n\n```javascript\nimport React, { Component } from 'react';\nimport { Container, Draggable } from 'react-smooth-dnd';\n\nclass SimpleDemo extends Component {\n  render() {\n    return (\n      <div>\n        <Container onDrop={this.onDrop}>\n            <Draggable key={id}>\n                <div>{`${我是一个可拖动的元素，拖拖试试看}`}</div>\n            </Draggable>\n        </Container>\n      </div>\n    );\n  }\n}\n\n```\n下面文章就介绍详细的使用方法。。。\n\n### 三、Dom引入\n\n引入标签解释：\n\n- Container 指的是拖动的容器，即可拖动的有效使用范围,它的内部可有有多个`<Draggable>`标签。\n\n- Draggable 指的是可拖动元素，在页面中把可拖动的内容用`<Draggable>`标签包裹后，该标签就可以脱离文档进行拖动。\n\n* 用map实现的拖动内部元素\n```javascript\n<Container onDrop={this.onDrop}>\n    {itemList.map(item => {\n    return (\n        <Draggable key={item.id}>\n        ...//你的拖动代码块\n        </Draggable>\n    );\n    })}\n</Container>\n```\n\n### 四、Container 常用API\n\n#### 1.groupName\n\n解释：定义当前拖动容器的名称（唯一性），如果代码中有多个`groupName=\"col\"` 则表示这几个拖动区域中的内容是相互之间可以拖动。比如我们要实现一个跨组拖动。\n\n```javascript\n<Container groupName=\"col\">\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 2.behaviour的使用\n\n解释：当前容器中的元素拖动后，本容器中的元素状态。标示当前容器状态；\n\n可选值：`move`（默认，移动）、`copy`（复制）、`drop-zone`（跌落）、`contain`（包含）\n\n```javascript\n//实现复制本容器中的内容而不是move拖动离开\n<Container behaviour=\"copy\">\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 3.lockAxis的使用\n\n解释：设置限制当前拖动的方向。\n\n可选值：`x`、`y`，表示只能x轴或者y轴方向拖动；\n\n```javascript\n//限制该拖动只能y轴方向进行拖动\n<Container lockAxis=\"y\">\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 4.dragClass的使用\n\n解释：拖动元素被拖动时可添加的样式，（拿起来样式）；可以使用react的Style进行引入css\n\n可以设置字体，缩放，旋转等`css`的样式实现拖动过程中的样式；\n\n```css\n.card_ghost{\n    background: #FFF;\n    transform:rotate(1.5deg);\n    -ms-transform:rotate(1.5deg); \t/* IE 9 */\n    -moz-transform:rotate(1.5deg); \t/* Firefox */\n    -webkit-transform:rotate(1.5deg); /* Safari 和 Chrome */\n    -o-transform:rotate(1.5deg); \t/* Opera */\n    box-shadow: 0 0 15px grey;\n    opacity: 0.8;\n}\n```\n\n```javascript\n<Container dragClass={style.card_ghost}>\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 5.dropClass的使用\n\n解释：拖动释放时的样式，写法如上；\n\n#### 6.dropPlaceholder的使用\n\n解释：拖动时的占位效果\n\n当拖动元素拖走时或进入其他位置时，用于占位当前阴影配置\n\n参数：`className`, `animationDuration`, `showOnTop`;\n\ncalssNmae： 占位元素的延时\nanimationDuration： 延时\nshowOnTop： （暂时还未知作用）\n\n```css\n.cards_drop_preview{\n    background: #DDDFE3;\n}\n```\n\n```javascript\n<Container \n    dropPlaceholder={{\n        animationDuration: 150,//动画延时\n        showOnTop: false,//暂时还不知道作用\n        className: style.cards_drop_preview, //占位元素样式\n    }}\n>\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 7.dragBeginDelay的使用\n\n解释：延时拖动，时间单位为毫秒。按下项目后延迟开始拖动。在延迟超过5px之前移动光标将取消拖动。\n\n防止有误操作的情况发生；也可用于该item上既有拖动又又其他事件，延时可以区分需要触发的是那种事件。\n\n#### 8.onDragStart、onDragEnd、onDropReady、onDrop的使用\n\n解释： \nonDragStart：拖动开始后出发该函数；\nonDragEnd：拖动结束；\nonDropReady：拖动ready；\nonDrop：拖动释放；\n\n参数：\n`isSource` : boolean (true/false) 如果是从其他容器中拖动来的则是false\n`payload` : object （ { removedIndex, addedIndex, payload } ）\n    - removedIndex移走元素的索引；\n    - addedIndex添加元素的索引；\n    - payload移动的元素数据，配合`getChildPayload`函数使用；\n`willAcceptDrop` : boolean 如果拖动的项可以放入容器中，则为true，否则为false。\n\n可以认为是辅助函数，用于获取动作结束后的一些状态事件获取。\n\n```javascript\n//拖动开始后出发\nonDragStart = ({isSource, payload, willAcceptDrop})=>{\n    const { removedIndex, addedIndex, payload } = dragResult;\n    if (removedIndex === null && addedIndex === null) return arr;\n    const result = [...arr];\n    let itemToAdd = payload;\n    if (removedIndex !== null) {\n      itemToAdd = result.splice(removedIndex, 1)[0];\n    }\n    if (addedIndex !== null) {\n      result.splice(addedIndex, 0, itemToAdd);\n    }\n    this.setState({ dataList: result });\n}\n<Container onDragStart={this.onDragStart}>\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 9.getChildPayload的使用\n\n解释：设置上述的payload的值\n\ngetChildPayload 函数return一个自定义的值；\n\n用来记录当前拖动元素的信息，参数是index即Container中dataList的索引，当释放（onDrop）函数触发是，payLoad会自动带入该参数，用于做数据处理。\n\n```javascript\n//拖动开始后出发\ngetChildPayload = (index)=>{\n    console.log(index);//当前拖动的索引\n    return {\n        ...\n    }\n}\n<Container getChildPayload={this.getChildPayload}>\n    <Draggable>....<Draggable>\n</Container>\n```\n\n#### 10.onDragEnter、onDragLeave的使用\n\n解释： 监控拖动进入或者离开响应区时的状态\n\n函数参数数据和和7一样，同上onDragStart；\n\n该功能可以在拖动的中间触发事件，进行一些业务逻辑处理\n\n### 五、Draggable API\n\nDraggable可以使用render进行渲染，默认情况下，Draggable对组件根使用div元素。\n如果设置了render函数，则Draggable的子属性将被忽略，而render的返回值将用于render Draggable。\n\nreturn 是一个React的dom元素集（React Element）；\n\ndemo\n```javascript\n<Draggable render={() => {\n  return (\n    <li>\n      ...\n    </li>\n  )\n}}/>\n```\n\n### 六、典型Demo\n\n我们最长使用的就是`dragClass`、`getChildPayload`、`onDrop`这些函数；\n\n下面来个拖动排序的demo实现拖动排序\n\n拖动排序最重要的时顺序的索引值，如果先删除了就会导致索引对应不上了，这点要特别注意\n\n```javascript\nimport React, { Component } from 'react';\nimport { Container, Draggable } from 'react-smooth-dnd';\n\n\nclass SimpleDemo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataList: [ //排序数组\n                {\n                    id: 1,\n                    name: '第1个'\n                },\n                {\n                    id: 1,\n                    name: '第2个'\n                },\n                {\n                    id: 1,\n                    name: '第3个'\n                },\n                {\n                    id: 1,\n                    name: '第4个'\n                }\n            ]\n        };\n    }\n    //设置拖动内容\n    getChildPayload = (index)=>{\n        const { dataList } = this.state;\n        return {\n            item:dataList[index]\n            index,\n        }\n    }\n    //拖动释放时出发重新排序事件\n    onDrop = (dragResult)=>{\n        const { removedIndex, addedIndex, payload } = dragResult;\n        const { dataList } = this.state;\n        let resutl = dataList;\n        let itemToAdd = null;\n        if (removedIndex !== null) {\n            itemToAdd = result.splice(removedIndex, 1)[0];\n        }\n        if (addedIndex !== null) {\n            result.splice(addedIndex, 0, itemToAdd);\n        }\n        this.setState({dataList: result})\n    }\n    render() {\n        const { dataList } = this.state;\n        return (\n        <div>\n            <Container \n                onDrop={this.onDrop}\n                getChildPayload={this.getChildPayload}\n            >{\n                dataList.map(k=>{\n                    return <Draggable key={k.id}>\n                        <div>{k.name}</div>\n                    </Draggable>\n                })\n            }\n                \n            </Container>\n        </div>\n        );\n    }\n}\nReactDOM.render(\n  <Clock />,\n  document.getElementById('root')\n);\n```\n\n更多详细使用请参考如下gitHub地址\ngithub demo地址：https://kutlugsahin.github.io/smooth-dnd-demo/\n\n","slug":"react-smooth-dnd","published":1,"updated":"2020-07-27T11:25:08.647Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcpx001hhi600cvf731o","content":"<h4 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h4><p>1.react-smooth-dnd是一个快速、轻量级的拖放、可排序的库，用于对覆盖许多设计与开发（d&amp;d）场景的许多配置选项进行响应。它使用css转换来制作动画，因此只要有可能，它的硬件就会加速，提高了拖动的动画效果。</p>\n<p>2.此库是在基于smooth-dnd库开发的React拖动效果组件。</p>\n<p>3.npm 安装 <code>npm install react-smooth-dnd</code>；</p>\n<p>4.鉴于可以查到的文档都是英文的，而且demo都残缺不全，本文进行了中文归纳和详细案例介绍；</p>\n<p>5.本文主要介绍基于react引入的方式来写的demo；</p>\n<p><img src=\"https://i.loli.net/2020/05/18/VpDJzQ4938yr5TO.jpg\" alt=\"列表拖动排序.jpg\"></p>\n<p>6.目前该库还在维护中，有1.4k星，使用还不错，目前没发现bug，兼容Chrome浏览器<br><img src=\"https://i.loli.net/2020/05/18/xhY1ElczrJBuidj.jpg\" alt=\"gitHubInfo.jpg\"></p>\n<h4 id=\"二、一个简单的demo\"><a href=\"#二、一个简单的demo\" class=\"headerlink\" title=\"二、一个简单的demo\"></a>二、一个简单的demo</h4><p>本案例是一个简单的引入和样式</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Container<span class=\"token punctuation\">,</span> Draggable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-smooth-dnd'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleDemo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Container onDrop<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onDrop<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Draggable key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>我是一个可拖动的元素，拖拖试试看<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Draggable<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>下面文章就介绍详细的使用方法。。。</p>\n<h3 id=\"三、Dom引入\"><a href=\"#三、Dom引入\" class=\"headerlink\" title=\"三、Dom引入\"></a>三、Dom引入</h3><p>引入标签解释：</p>\n<ul>\n<li><p>Container 指的是拖动的容器，即可拖动的有效使用范围,它的内部可有有多个<code>&lt;Draggable&gt;</code>标签。</p>\n</li>\n<li><p>Draggable 指的是可拖动元素，在页面中把可拖动的内容用<code>&lt;Draggable&gt;</code>标签包裹后，该标签就可以脱离文档进行拖动。</p>\n</li>\n</ul>\n<ul>\n<li>用map实现的拖动内部元素<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Container onDrop<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onDrop<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n  <span class=\"token punctuation\">{</span>itemList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>Draggable key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span><span class=\"token comment\" spellcheck=\"true\">//你的拖动代码块</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Draggable<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre>\n</li>\n</ul>\n<h3 id=\"四、Container-常用API\"><a href=\"#四、Container-常用API\" class=\"headerlink\" title=\"四、Container 常用API\"></a>四、Container 常用API</h3><h4 id=\"1-groupName\"><a href=\"#1-groupName\" class=\"headerlink\" title=\"1.groupName\"></a>1.groupName</h4><p>解释：定义当前拖动容器的名称（唯一性），如果代码中有多个<code>groupName=&quot;col&quot;</code> 则表示这几个拖动区域中的内容是相互之间可以拖动。比如我们要实现一个跨组拖动。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Container groupName<span class=\"token operator\">=</span><span class=\"token string\">\"col\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre>\n<h4 id=\"2-behaviour的使用\"><a href=\"#2-behaviour的使用\" class=\"headerlink\" title=\"2.behaviour的使用\"></a>2.behaviour的使用</h4><p>解释：当前容器中的元素拖动后，本容器中的元素状态。标示当前容器状态；</p>\n<p>可选值：<code>move</code>（默认，移动）、<code>copy</code>（复制）、<code>drop-zone</code>（跌落）、<code>contain</code>（包含）</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//实现复制本容器中的内容而不是move拖动离开</span>\n<span class=\"token operator\">&lt;</span>Container behaviour<span class=\"token operator\">=</span><span class=\"token string\">\"copy\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre>\n<h4 id=\"3-lockAxis的使用\"><a href=\"#3-lockAxis的使用\" class=\"headerlink\" title=\"3.lockAxis的使用\"></a>3.lockAxis的使用</h4><p>解释：设置限制当前拖动的方向。</p>\n<p>可选值：<code>x</code>、<code>y</code>，表示只能x轴或者y轴方向拖动；</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//限制该拖动只能y轴方向进行拖动</span>\n<span class=\"token operator\">&lt;</span>Container lockAxis<span class=\"token operator\">=</span><span class=\"token string\">\"y\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre>\n<h4 id=\"4-dragClass的使用\"><a href=\"#4-dragClass的使用\" class=\"headerlink\" title=\"4.dragClass的使用\"></a>4.dragClass的使用</h4><p>解释：拖动元素被拖动时可添加的样式，（拿起来样式）；可以使用react的Style进行引入css</p>\n<p>可以设置字体，缩放，旋转等<code>css</code>的样式实现拖动过程中的样式；</p>\n<pre class=\" language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.card_ghost</span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#FFF</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">-ms-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">/* IE 9 */</span>\n    <span class=\"token property\">-moz-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">/* Firefox */</span>\n    <span class=\"token property\">-webkit-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/* Safari 和 Chrome */</span>\n    <span class=\"token property\">-o-transform</span><span class=\"token punctuation\">:</span><span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span>deg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\" spellcheck=\"true\">/* Opera */</span>\n    <span class=\"token property\">box-shadow</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token number\">0</span> <span class=\"token number\">15</span>px grey<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">opacity</span><span class=\"token punctuation\">:</span> <span class=\"token number\">0.8</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Container dragClass<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">.</span>card_ghost<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre>\n<h4 id=\"5-dropClass的使用\"><a href=\"#5-dropClass的使用\" class=\"headerlink\" title=\"5.dropClass的使用\"></a>5.dropClass的使用</h4><p>解释：拖动释放时的样式，写法如上；</p>\n<h4 id=\"6-dropPlaceholder的使用\"><a href=\"#6-dropPlaceholder的使用\" class=\"headerlink\" title=\"6.dropPlaceholder的使用\"></a>6.dropPlaceholder的使用</h4><p>解释：拖动时的占位效果</p>\n<p>当拖动元素拖走时或进入其他位置时，用于占位当前阴影配置</p>\n<p>参数：<code>className</code>, <code>animationDuration</code>, <code>showOnTop</code>;</p>\n<p>calssNmae： 占位元素的延时<br>animationDuration： 延时<br>showOnTop： （暂时还未知作用）</p>\n<pre class=\" language-css\"><code class=\"language-css\"><span class=\"token selector\"><span class=\"token class\">.cards_drop_preview</span></span><span class=\"token punctuation\">{</span>\n    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> <span class=\"token hexcode\">#DDDFE3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Container \n    dropPlaceholder<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        animationDuration<span class=\"token punctuation\">:</span> <span class=\"token number\">150</span><span class=\"token punctuation\">,</span><span class=\"token comment\" spellcheck=\"true\">//动画延时</span>\n        showOnTop<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\" spellcheck=\"true\">//暂时还不知道作用</span>\n        className<span class=\"token punctuation\">:</span> style<span class=\"token punctuation\">.</span>cards_drop_preview<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//占位元素样式</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre>\n<h4 id=\"7-dragBeginDelay的使用\"><a href=\"#7-dragBeginDelay的使用\" class=\"headerlink\" title=\"7.dragBeginDelay的使用\"></a>7.dragBeginDelay的使用</h4><p>解释：延时拖动，时间单位为毫秒。按下项目后延迟开始拖动。在延迟超过5px之前移动光标将取消拖动。</p>\n<p>防止有误操作的情况发生；也可用于该item上既有拖动又又其他事件，延时可以区分需要触发的是那种事件。</p>\n<h4 id=\"8-onDragStart、onDragEnd、onDropReady、onDrop的使用\"><a href=\"#8-onDragStart、onDragEnd、onDropReady、onDrop的使用\" class=\"headerlink\" title=\"8.onDragStart、onDragEnd、onDropReady、onDrop的使用\"></a>8.onDragStart、onDragEnd、onDropReady、onDrop的使用</h4><p>解释：<br>onDragStart：拖动开始后出发该函数；<br>onDragEnd：拖动结束；<br>onDropReady：拖动ready；<br>onDrop：拖动释放；</p>\n<p>参数：<br><code>isSource</code> : boolean (true/false) 如果是从其他容器中拖动来的则是false<br><code>payload</code> : object （ { removedIndex, addedIndex, payload } ）<br>    - removedIndex移走元素的索引；<br>    - addedIndex添加元素的索引；<br>    - payload移动的元素数据，配合<code>getChildPayload</code>函数使用；<br><code>willAcceptDrop</code> : boolean 如果拖动的项可以放入容器中，则为true，否则为false。</p>\n<p>可以认为是辅助函数，用于获取动作结束后的一些状态事件获取。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//拖动开始后出发</span>\nonDragStart <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isSource<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">,</span> willAcceptDrop<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> removedIndex<span class=\"token punctuation\">,</span> addedIndex<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> dragResult<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>removedIndex <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> addedIndex <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> itemToAdd <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>removedIndex <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      itemToAdd <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>removedIndex<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addedIndex <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>addedIndex<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> itemToAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dataList<span class=\"token punctuation\">:</span> result <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Container onDragStart<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onDragStart<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre>\n<h4 id=\"9-getChildPayload的使用\"><a href=\"#9-getChildPayload的使用\" class=\"headerlink\" title=\"9.getChildPayload的使用\"></a>9.getChildPayload的使用</h4><p>解释：设置上述的payload的值</p>\n<p>getChildPayload 函数return一个自定义的值；</p>\n<p>用来记录当前拖动元素的信息，参数是index即Container中dataList的索引，当释放（onDrop）函数触发是，payLoad会自动带入该参数，用于做数据处理。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//拖动开始后出发</span>\ngetChildPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//当前拖动的索引</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span>Container getChildPayload<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getChildPayload<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token operator\">&lt;</span>Draggable<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span></code></pre>\n<h4 id=\"10-onDragEnter、onDragLeave的使用\"><a href=\"#10-onDragEnter、onDragLeave的使用\" class=\"headerlink\" title=\"10.onDragEnter、onDragLeave的使用\"></a>10.onDragEnter、onDragLeave的使用</h4><p>解释： 监控拖动进入或者离开响应区时的状态</p>\n<p>函数参数数据和和7一样，同上onDragStart；</p>\n<p>该功能可以在拖动的中间触发事件，进行一些业务逻辑处理</p>\n<h3 id=\"五、Draggable-API\"><a href=\"#五、Draggable-API\" class=\"headerlink\" title=\"五、Draggable API\"></a>五、Draggable API</h3><p>Draggable可以使用render进行渲染，默认情况下，Draggable对组件根使用div元素。<br>如果设置了render函数，则Draggable的子属性将被忽略，而render的返回值将用于render Draggable。</p>\n<p>return 是一个React的dom元素集（React Element）；</p>\n<p>demo</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">&lt;</span>Draggable render<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>li<span class=\"token operator\">></span>\n      <span class=\"token operator\">...</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>li<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre>\n<h3 id=\"六、典型Demo\"><a href=\"#六、典型Demo\" class=\"headerlink\" title=\"六、典型Demo\"></a>六、典型Demo</h3><p>我们最长使用的就是<code>dragClass</code>、<code>getChildPayload</code>、<code>onDrop</code>这些函数；</p>\n<p>下面来个拖动排序的demo实现拖动排序</p>\n<p>拖动排序最重要的时顺序的索引值，如果先删除了就会导致索引对应不上了，这点要特别注意</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Container<span class=\"token punctuation\">,</span> Draggable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-smooth-dnd'</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleDemo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            dataList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token comment\" spellcheck=\"true\">//排序数组</span>\n                <span class=\"token punctuation\">{</span>\n                    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'第1个'</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'第2个'</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'第3个'</span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">{</span>\n                    id<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n                    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'第4个'</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//设置拖动内容</span>\n    getChildPayload <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dataList <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            item<span class=\"token punctuation\">:</span>dataList<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span>\n            index<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\" spellcheck=\"true\">//拖动释放时出发重新排序事件</span>\n    onDrop <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>dragResult<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> removedIndex<span class=\"token punctuation\">,</span> addedIndex<span class=\"token punctuation\">,</span> payload <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> dragResult<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dataList <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> resutl <span class=\"token operator\">=</span> dataList<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> itemToAdd <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>removedIndex <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            itemToAdd <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>removedIndex<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addedIndex <span class=\"token operator\">!==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>addedIndex<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> itemToAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>dataList<span class=\"token punctuation\">:</span> result<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> dataList <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>Container \n                onDrop<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onDrop<span class=\"token punctuation\">}</span>\n                getChildPayload<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>getChildPayload<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n                dataList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>k<span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Draggable key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>k<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                        <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>k<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Draggable<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Container<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>Clock <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>更多详细使用请参考如下gitHub地址<br>github demo地址：<a href=\"https://kutlugsahin.github.io/smooth-dnd-demo/\">https://kutlugsahin.github.io/smooth-dnd-demo/</a></p>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h4 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h4><p>1.react-smooth-dnd是一个快速、轻量级的拖放、可排序的库，用于对覆盖许多设计与开发（d&amp;d）场景的许多配置选项进行响应。它使用css转换来制作动画，因此只要有可能，它的硬件就会加速，提高了拖动的动画效果。</p>\n<p>2.此库是在基于smooth-dnd库开发的React拖动效果组件。</p>\n<p>3.npm 安装 <code>npm install react-smooth-dnd</code>；</p>\n<p>4.鉴于可以查到的文档都是英文的，而且demo都残缺不全，本文进行了中文归纳和详细案例介绍；</p>\n<p>5.本文主要介绍基于react引入的方式来写的demo；</p>\n<p><img src=\"https://i.loli.net/2020/05/18/VpDJzQ4938yr5TO.jpg\" alt=\"列表拖动排序.jpg\"></p>\n<p>6.目前该库还在维护中，有1.4k星，使用还不错，目前没发现bug，兼容Chrome浏览器<br><img src=\"https://i.loli.net/2020/05/18/xhY1ElczrJBuidj.jpg\" alt=\"gitHubInfo.jpg\"></p>\n<h4 id=\"二、一个简单的demo\"><a href=\"#二、一个简单的demo\" class=\"headerlink\" title=\"二、一个简单的demo\"></a>二、一个简单的demo</h4><p>本案例是一个简单的引入和样式</p>\n<pre><code class=\"javascript\">import React, { Component } from &#39;react&#39;;\nimport { Container, Draggable } from &#39;react-smooth-dnd&#39;;\n\nclass SimpleDemo extends Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;Container onDrop={this.onDrop}&gt;\n            &lt;Draggable key={id}&gt;\n                &lt;div&gt;{`${我是一个可拖动的元素，拖拖试试看}`}&lt;/div&gt;\n            &lt;/Draggable&gt;\n        &lt;/Container&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>\n<p>下面文章就介绍详细的使用方法。。。</p>\n<h3 id=\"三、Dom引入\"><a href=\"#三、Dom引入\" class=\"headerlink\" title=\"三、Dom引入\"></a>三、Dom引入</h3><p>引入标签解释：</p>\n<ul>\n<li><p>Container 指的是拖动的容器，即可拖动的有效使用范围,它的内部可有有多个<code>&lt;Draggable&gt;</code>标签。</p>\n</li>\n<li><p>Draggable 指的是可拖动元素，在页面中把可拖动的内容用<code>&lt;Draggable&gt;</code>标签包裹后，该标签就可以脱离文档进行拖动。</p>\n</li>\n</ul>\n<ul>\n<li>用map实现的拖动内部元素<pre><code class=\"javascript\">&lt;Container onDrop={this.onDrop}&gt;\n  {itemList.map(item =&gt; {\n  return (\n      &lt;Draggable key={item.id}&gt;\n      ...//你的拖动代码块\n      &lt;/Draggable&gt;\n  );\n  })}\n&lt;/Container&gt;</code></pre>\n</li>\n</ul>\n<h3 id=\"四、Container-常用API\"><a href=\"#四、Container-常用API\" class=\"headerlink\" title=\"四、Container 常用API\"></a>四、Container 常用API</h3><h4 id=\"1-groupName\"><a href=\"#1-groupName\" class=\"headerlink\" title=\"1.groupName\"></a>1.groupName</h4><p>解释：定义当前拖动容器的名称（唯一性），如果代码中有多个<code>groupName=&quot;col&quot;</code> 则表示这几个拖动区域中的内容是相互之间可以拖动。比如我们要实现一个跨组拖动。</p>\n<pre><code class=\"javascript\">&lt;Container groupName=&quot;col&quot;&gt;\n    &lt;Draggable&gt;....&lt;Draggable&gt;\n&lt;/Container&gt;</code></pre>\n<h4 id=\"2-behaviour的使用\"><a href=\"#2-behaviour的使用\" class=\"headerlink\" title=\"2.behaviour的使用\"></a>2.behaviour的使用</h4><p>解释：当前容器中的元素拖动后，本容器中的元素状态。标示当前容器状态；</p>\n<p>可选值：<code>move</code>（默认，移动）、<code>copy</code>（复制）、<code>drop-zone</code>（跌落）、<code>contain</code>（包含）</p>\n<pre><code class=\"javascript\">//实现复制本容器中的内容而不是move拖动离开\n&lt;Container behaviour=&quot;copy&quot;&gt;\n    &lt;Draggable&gt;....&lt;Draggable&gt;\n&lt;/Container&gt;</code></pre>\n<h4 id=\"3-lockAxis的使用\"><a href=\"#3-lockAxis的使用\" class=\"headerlink\" title=\"3.lockAxis的使用\"></a>3.lockAxis的使用</h4><p>解释：设置限制当前拖动的方向。</p>\n<p>可选值：<code>x</code>、<code>y</code>，表示只能x轴或者y轴方向拖动；</p>\n<pre><code class=\"javascript\">//限制该拖动只能y轴方向进行拖动\n&lt;Container lockAxis=&quot;y&quot;&gt;\n    &lt;Draggable&gt;....&lt;Draggable&gt;\n&lt;/Container&gt;</code></pre>\n<h4 id=\"4-dragClass的使用\"><a href=\"#4-dragClass的使用\" class=\"headerlink\" title=\"4.dragClass的使用\"></a>4.dragClass的使用</h4><p>解释：拖动元素被拖动时可添加的样式，（拿起来样式）；可以使用react的Style进行引入css</p>\n<p>可以设置字体，缩放，旋转等<code>css</code>的样式实现拖动过程中的样式；</p>\n<pre><code class=\"css\">.card_ghost{\n    background: #FFF;\n    transform:rotate(1.5deg);\n    -ms-transform:rotate(1.5deg);     /* IE 9 */\n    -moz-transform:rotate(1.5deg);     /* Firefox */\n    -webkit-transform:rotate(1.5deg); /* Safari 和 Chrome */\n    -o-transform:rotate(1.5deg);     /* Opera */\n    box-shadow: 0 0 15px grey;\n    opacity: 0.8;\n}</code></pre>\n<pre><code class=\"javascript\">&lt;Container dragClass={style.card_ghost}&gt;\n    &lt;Draggable&gt;....&lt;Draggable&gt;\n&lt;/Container&gt;</code></pre>\n<h4 id=\"5-dropClass的使用\"><a href=\"#5-dropClass的使用\" class=\"headerlink\" title=\"5.dropClass的使用\"></a>5.dropClass的使用</h4><p>解释：拖动释放时的样式，写法如上；</p>\n<h4 id=\"6-dropPlaceholder的使用\"><a href=\"#6-dropPlaceholder的使用\" class=\"headerlink\" title=\"6.dropPlaceholder的使用\"></a>6.dropPlaceholder的使用</h4><p>解释：拖动时的占位效果</p>\n<p>当拖动元素拖走时或进入其他位置时，用于占位当前阴影配置</p>\n<p>参数：<code>className</code>, <code>animationDuration</code>, <code>showOnTop</code>;</p>\n<p>calssNmae： 占位元素的延时<br>animationDuration： 延时<br>showOnTop： （暂时还未知作用）</p>\n<pre><code class=\"css\">.cards_drop_preview{\n    background: #DDDFE3;\n}</code></pre>\n<pre><code class=\"javascript\">&lt;Container \n    dropPlaceholder={{\n        animationDuration: 150,//动画延时\n        showOnTop: false,//暂时还不知道作用\n        className: style.cards_drop_preview, //占位元素样式\n    }}\n&gt;\n    &lt;Draggable&gt;....&lt;Draggable&gt;\n&lt;/Container&gt;</code></pre>\n<h4 id=\"7-dragBeginDelay的使用\"><a href=\"#7-dragBeginDelay的使用\" class=\"headerlink\" title=\"7.dragBeginDelay的使用\"></a>7.dragBeginDelay的使用</h4><p>解释：延时拖动，时间单位为毫秒。按下项目后延迟开始拖动。在延迟超过5px之前移动光标将取消拖动。</p>\n<p>防止有误操作的情况发生；也可用于该item上既有拖动又又其他事件，延时可以区分需要触发的是那种事件。</p>\n<h4 id=\"8-onDragStart、onDragEnd、onDropReady、onDrop的使用\"><a href=\"#8-onDragStart、onDragEnd、onDropReady、onDrop的使用\" class=\"headerlink\" title=\"8.onDragStart、onDragEnd、onDropReady、onDrop的使用\"></a>8.onDragStart、onDragEnd、onDropReady、onDrop的使用</h4><p>解释：<br>onDragStart：拖动开始后出发该函数；<br>onDragEnd：拖动结束；<br>onDropReady：拖动ready；<br>onDrop：拖动释放；</p>\n<p>参数：<br><code>isSource</code> : boolean (true/false) 如果是从其他容器中拖动来的则是false<br><code>payload</code> : object （ { removedIndex, addedIndex, payload } ）<br>    - removedIndex移走元素的索引；<br>    - addedIndex添加元素的索引；<br>    - payload移动的元素数据，配合<code>getChildPayload</code>函数使用；<br><code>willAcceptDrop</code> : boolean 如果拖动的项可以放入容器中，则为true，否则为false。</p>\n<p>可以认为是辅助函数，用于获取动作结束后的一些状态事件获取。</p>\n<pre><code class=\"javascript\">//拖动开始后出发\nonDragStart = ({isSource, payload, willAcceptDrop})=&gt;{\n    const { removedIndex, addedIndex, payload } = dragResult;\n    if (removedIndex === null &amp;&amp; addedIndex === null) return arr;\n    const result = [...arr];\n    let itemToAdd = payload;\n    if (removedIndex !== null) {\n      itemToAdd = result.splice(removedIndex, 1)[0];\n    }\n    if (addedIndex !== null) {\n      result.splice(addedIndex, 0, itemToAdd);\n    }\n    this.setState({ dataList: result });\n}\n&lt;Container onDragStart={this.onDragStart}&gt;\n    &lt;Draggable&gt;....&lt;Draggable&gt;\n&lt;/Container&gt;</code></pre>\n<h4 id=\"9-getChildPayload的使用\"><a href=\"#9-getChildPayload的使用\" class=\"headerlink\" title=\"9.getChildPayload的使用\"></a>9.getChildPayload的使用</h4><p>解释：设置上述的payload的值</p>\n<p>getChildPayload 函数return一个自定义的值；</p>\n<p>用来记录当前拖动元素的信息，参数是index即Container中dataList的索引，当释放（onDrop）函数触发是，payLoad会自动带入该参数，用于做数据处理。</p>\n<pre><code class=\"javascript\">//拖动开始后出发\ngetChildPayload = (index)=&gt;{\n    console.log(index);//当前拖动的索引\n    return {\n        ...\n    }\n}\n&lt;Container getChildPayload={this.getChildPayload}&gt;\n    &lt;Draggable&gt;....&lt;Draggable&gt;\n&lt;/Container&gt;</code></pre>\n<h4 id=\"10-onDragEnter、onDragLeave的使用\"><a href=\"#10-onDragEnter、onDragLeave的使用\" class=\"headerlink\" title=\"10.onDragEnter、onDragLeave的使用\"></a>10.onDragEnter、onDragLeave的使用</h4><p>解释： 监控拖动进入或者离开响应区时的状态</p>\n<p>函数参数数据和和7一样，同上onDragStart；</p>\n<p>该功能可以在拖动的中间触发事件，进行一些业务逻辑处理</p>\n<h3 id=\"五、Draggable-API\"><a href=\"#五、Draggable-API\" class=\"headerlink\" title=\"五、Draggable API\"></a>五、Draggable API</h3><p>Draggable可以使用render进行渲染，默认情况下，Draggable对组件根使用div元素。<br>如果设置了render函数，则Draggable的子属性将被忽略，而render的返回值将用于render Draggable。</p>\n<p>return 是一个React的dom元素集（React Element）；</p>\n<p>demo</p>\n<pre><code class=\"javascript\">&lt;Draggable render={() =&gt; {\n  return (\n    &lt;li&gt;\n      ...\n    &lt;/li&gt;\n  )\n}}/&gt;</code></pre>\n<h3 id=\"六、典型Demo\"><a href=\"#六、典型Demo\" class=\"headerlink\" title=\"六、典型Demo\"></a>六、典型Demo</h3><p>我们最长使用的就是<code>dragClass</code>、<code>getChildPayload</code>、<code>onDrop</code>这些函数；</p>\n<p>下面来个拖动排序的demo实现拖动排序</p>\n<p>拖动排序最重要的时顺序的索引值，如果先删除了就会导致索引对应不上了，这点要特别注意</p>\n<pre><code class=\"javascript\">import React, { Component } from &#39;react&#39;;\nimport { Container, Draggable } from &#39;react-smooth-dnd&#39;;\n\n\nclass SimpleDemo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dataList: [ //排序数组\n                {\n                    id: 1,\n                    name: &#39;第1个&#39;\n                },\n                {\n                    id: 1,\n                    name: &#39;第2个&#39;\n                },\n                {\n                    id: 1,\n                    name: &#39;第3个&#39;\n                },\n                {\n                    id: 1,\n                    name: &#39;第4个&#39;\n                }\n            ]\n        };\n    }\n    //设置拖动内容\n    getChildPayload = (index)=&gt;{\n        const { dataList } = this.state;\n        return {\n            item:dataList[index]\n            index,\n        }\n    }\n    //拖动释放时出发重新排序事件\n    onDrop = (dragResult)=&gt;{\n        const { removedIndex, addedIndex, payload } = dragResult;\n        const { dataList } = this.state;\n        let resutl = dataList;\n        let itemToAdd = null;\n        if (removedIndex !== null) {\n            itemToAdd = result.splice(removedIndex, 1)[0];\n        }\n        if (addedIndex !== null) {\n            result.splice(addedIndex, 0, itemToAdd);\n        }\n        this.setState({dataList: result})\n    }\n    render() {\n        const { dataList } = this.state;\n        return (\n        &lt;div&gt;\n            &lt;Container \n                onDrop={this.onDrop}\n                getChildPayload={this.getChildPayload}\n            &gt;{\n                dataList.map(k=&gt;{\n                    return &lt;Draggable key={k.id}&gt;\n                        &lt;div&gt;{k.name}&lt;/div&gt;\n                    &lt;/Draggable&gt;\n                })\n            }\n\n            &lt;/Container&gt;\n        &lt;/div&gt;\n        );\n    }\n}\nReactDOM.render(\n  &lt;Clock /&gt;,\n  document.getElementById(&#39;root&#39;)\n);</code></pre>\n<p>更多详细使用请参考如下gitHub地址<br>github demo地址：<a href=\"https://kutlugsahin.github.io/smooth-dnd-demo/\">https://kutlugsahin.github.io/smooth-dnd-demo/</a></p>\n"},{"title":"react redux-dva简析","date":"2020-06-20T03:59:22.000Z","img":"/medias/featureimages/2.jpg","top":false,"cover":true,"coverImg":"/medias/featureimages/8.jpg","toc":true,"mathjax":false,"summary":"本文介绍关于react的state储存机制，以及state的隔离问题，使我们的state机制更加有效方便，降低组件之间状态的耦合度。","_content":"\n##### 简介 \n  React 是一个数据单项的JavaScript库，可以实现重复调用，全局修改全局生效，在这样的情况下我们就会涉及到数据的模块封装和数据隔离，由于react使用的是state的机制故而我们就想让react的state机制像闭包的数据隔离一样对不同组件的state进行单独封装，单独隔离，但是呢又可以全局引用，因此就出现了redux到dva等一系列的react的状态管理框架。\n\n#### 最初史的state介绍\n  react用的比较多的朋友应该知道，redux的思想是视图与状态是一一对应的；但是呢redux的所有的状态，都保存在一个对象state里面；\n\n  store：是一个数据池，redux会把所有的数据都放在里面，没有做数据隔离，而一个 State 对应一个 View。只要 State 相同，View 就相同。\n\n  redux-saga和dva非常相似，可以把触发条件理解为action，具体业务处理是是reducer，那么我们触发事件只能通过action去操作整个store的状态，对业务来说，我们可以不需要知道reducer的具体实现，更新reducer对业务来说也是无感的。这样就把数据的处理和更新与业务分离开来，相互没有直接的依赖关系。\n\n\n##### redux-saga:\n - 1.Redux 内里只需一个 Store,全局的数据都在这个大 Store 内里。Store 的 State 不能直接修正，每次只能返回一个新的 State。Redux 整了一个createStore函数来添加 Store。\n - 2.同一个state里不能有相同的key，即同一个state里不能有两个List，虽然两个list是在不同的页面里使用。\n\ndemo\n```javascript\n  import { createStore } from 'redux';\n  const store = createStore(fn);\n```\n\naction的代码如下：\n```javascript\n  import { takeEvery } from 'redux-saga';\n  \n  function* demo() {\n    yield takeEvery('actionName', function* (result) {\n      console.log(result);\n    });\n  }\n```\n如果有多个saga函数来监听不同的action事件的情况：\n\n``` javascript\n  import { takeEvery } from 'redux-saga/effects'\n\n  // action 1\n  function* demo1(action) { ... }\n\n  // action 2\n  function* demo2(action) { ... }\n\n  // 同时抛出它们\n  export default function* rootSaga() {\n    yield takeEvery('actionName1', demo1)\n    yield takeEvery('actionName2', demo2)\n  }\n  //yield 右边的任何表达式都会被求值，结果会被 yield 给调用者。\n```\n  - 我们也可以在action函数中写fetch-request对接口进行调用，同时可以吐出到组件，yield为异步api时使用saga提供call()方法，我们可以在触发业务代码的地方使用then函数来接受api的返回数据也可以在action函数这里进行state处理。\n  这里要说明的是，一般我们都会在action函数这里做一层数据校验，对接口返回数据进行一个初步的检测。\n\n##### 1.接口校验\n```javascript\nimport { call } from 'redux-saga/effects';\nimport Api from './path/to/api'\n\nfunction* fetchApi() {\n  const result = yield call(Api.fetch, '/products')\n  if(result.code===200||...){\n    alert('success');\n    return result.data\n  }else{\n    alert('error');\n    return null\n  }\n}\n```\n\n##### 2.使用try...catch来处理错误，并统一提示处理\n\n```javascript\n//错误统一处理\n\nimport Api from './path/to/api';\nimport { call, put } from 'redux-saga/effects';\n\n// ...\n\nfunction* fetchApi() {\n  try {\n    const result = yield call(Api.fetch, '/products')\n    yield put({ type: 'resultSuccess', products })\n  }\n  catch(error) {\n    yield put({ type: 'resultError', error })\n  }\n}\n```\n\n##### 3.使用throw来抛出一个错误\n```javascript\nimport { call, put } from 'redux-saga/effects'\nimport Api from '...'\n\nconst iterator = fetchProducts()\n\n// 期望一个 call 指令\nassert.deepEqual(\n  iterator.next().value,\n  call(Api.fetch, '/products'),\n  \"fetchProducts should yield an Effect call(Api.fetch, './products')\"\n)\n\n// 创建一个模拟的 error 对象\nconst error = {}\n\n// 期望一个 dispatch 指令\nassert.deepEqual(\n  iterator.throw(error).value,\n  put({ type: 'resultError', error }),\n  \"fetchProducts should yield an Effect put({ type: 'PRODUCTS_REQUEST_FAILED', error })\"\n)\n```\n##### redux-dva：\n学过React的都知道他的技术栈，各种库插件多的如天，所以每当你使用React的时候都需要引入很多的模块，配置好多数据，那么dva就是把这些用到的模块集成在一起，形成一定的架构规范。\n\n1.dva 是 framework，不是 library库；\n2.dva封装了redux，减少很多重复代码比如action reducers 等的重复编写。\n3.dva的核心是module模块，通过module我们可以实现结构上的多个store来储存数据，saga是所有的都写在一个里面，这样就可以对不同的业务组件或者模块来分别管理和引用。\n4.call, put其实是saga的写法，dva集成了集成了redux、redux-saga、react-router-redux、react-router。将initState、saga、reducer集成到一个model里面统一管理，对某个模块进行单独的维护，减少成本量。\n\n##### 引入图文说明\n<!-- ![dva.png](https://i.loli.net/2020/06/29/OkzifJLM7wGR1TZ.png) -->\n![dva.png](https://i.loli.net/2020/06/29/9Zkes2tvRAHMxLf.png)\n\n缺点：\n1.如现在react-router已经到了4.x了，但是dva内置的版本却还是2.x，如果react-router升级就要在使用 dva 和使用新版本的组件上做出选择了。\n2.可扩展性不强，后期升级也是个问题。\n\n##### 引入连接器：\n```javascript\nimport { connect } from 'dva';\n```\n\n```javascript\nimport queryString from 'query-string';\nimport * as todoService from '../services/todo'\n \nexport default {\n  namespace: 'storeA', //model的命名空间key，全局唯一，用来识别调用或引入的store\n   state: {  //状态的初始值\n     list: [],\n     message:\"ffff\"\n   },\n \n  //类似于redux的 reducer 是一个纯函数用来处理同步函数。\n  reducers: {   \n    setList(state, { payload: { list } }) {\n      return { ...state, list }\n    },\n \n    setState(state, { payload: { message } }) {     \n      return { ...state, message }\n    },\n  },\n  //处理请求等异步函数\n  effects: {\n    *addForm({ payload: value }, { call, put, select }) {\n      const data = yield call(todoService.query, value)\n      let tempList = yield select(state => state.todo.list);\n      yield put({ type: 'setList', payload: { list }}) \n    },\n \n    *test({ payload: message }, { call, put, select }) {\n      yield put({ type: 'setState', payload: { message } })\n      yield put({ type: 'namespaceB/setState', payload: { message } })//可控制其他model中的state\n    }\n  },\n \n  //用于订阅某些数据 如：监听路由的变化等\n  subscriptions: {\n    setup({ dispatch, history }) {\n      // 监听路由的变化，请求页面数据\n      return history.listen(({ pathname, search }) => {\n        const query = queryString.parse(search);\n        let list = []\n        if (pathname === 'addForm') {//路由名称\n          dispatch({ type: 'setList', payload: {list} }) //更新action\n        }\n      })\n    }\n  }\n ```\n  - namespace 代表命名空间，全局唯一\n  - state 代表初始化数据是一个对象，通过props调用\n  - reducer 就跟我们平时用的reducer一样，action事件触发的函数\n  - effects 处理Api等异步问题\n  - subscriptions 订阅，常用来监听\n\n##### 跨model的通信：\n```javascript\n  new Promise((resolve, reject) => {\n    dispatch({ type: 'storeA/addLog', payload: { ... } });\n  })\n  .then((data) => {\n    console.log(data);\n    // ...\n  });\n```\ndispatch中的type/前面的是model的key（namespace）后面的才是action。\n也可以在effects中通过key/action的方式来通知其他model更新state状态，达到跨model通行。\n\n```javascript\n  *test({ payload: message }, { call, put, select }) {\n    yield put({ type: 'setState', payload: { message } })\n    yield put({ type: 'namespaceB/setState', payload: { message } })//可控制其他model中的state\n  }\n```\n\n##### 多任务的情况：\n```javascript\n  const [result1, result2]  = yield all([\n    call(service1, param1),\n    call(service2, param2)\n  ])\n```\n\n##### model数据共享（共享state数据）\n\n在B的model中的effects中获取A的state，其中a为A的namespace，response 为A的state，如\n```javascript\neffects: {\n  *fetchResult({ callback }, { call, put, select }) {\n    const response = yield select(_ => _.a);\n    // response为A model中的state值\n    // ···其他操作\n    // yield put({ type: \"saveEvents\", payload:{response} });\n    // if (callback) callback(response);\n  }\n}\n```\n也可以在B页面中connect A model取值。\n\n#### 附：初始化:\n\n```javascript\n  // 1. Initialize\n  const app = dva({\n  history, // 指定给路由用的 history，默认是 hashHistory\n  initialState,  // 指定初始数据，优先级高于 model 中的 state\n  onError, // effect 执行错误或 subscription 通过 done 主动抛错时触发，可用于管理全局出错状态。\n  onAction, // 在 action 被 dispatch 时触发\n  onStateChange, // state 改变时触发，可用于同步 state 到 localStorage，服务器端等\n  onReducer, // 封装 reducer 执行。比如借助 redux-undo 实现 redo/undo\n  onEffect, // 封装 effect\n  onHmr, // 热替换相关\n  extraReducers, // 指定额外的 reducer，比如 redux-form 需要指定额外的 form reducer\n  extraEnhancers, // 指定额外的 StoreEnhancer ，比如结合 redux-persist 的使用\n});\n\n  // 2. Plugins\n  // app.use({});//也可以可配置hooks的相关\n\n  // 3. Model\n  // app.model(require('./models/example').default);\n\n  // 4. Router\n  app.router(require('./router').default);\n\n  // 5. Start\n  app.start('#root');\n```\n挂载组件时，dva中的state通过connect将model、状态数据与组件相连。通过dispatch 调用key/action来触发model。这样就形成一个完整的数据流向。\n\n#### 总结\ndva 帮你自动化了Redux 架构一些繁琐的设置，比如上面所说的redux store 的创建，中间件的配置，路由的初始化等都自动生成好了。\n\ndva 降低了组件之间数据之间的的耦合度，可以对单个模块进行封装单独的model通过connect来连接，模块数据单独设置清晰易维护。\n\ndva编写方便，基本不需要过多的配置，提高团队多人开发的效率。\n\ndva配合umi达到了开箱即用的状态\n","source":"_posts/redux-dva.md","raw":"---\ntitle: react redux-dva简析\ndate: 2020-06-20 11:59:22\nimg: /medias/featureimages/2.jpg\ntop: false\ncover: true\ncoverImg: /medias/featureimages/8.jpg\ntoc: true\nmathjax: false\nsummary: 本文介绍关于react的state储存机制，以及state的隔离问题，使我们的state机制更加有效方便，降低组件之间状态的耦合度。\ncategories: 前端\ntags:\n- React\n- 储存\n- 数据隔离\n---\n\n##### 简介 \n  React 是一个数据单项的JavaScript库，可以实现重复调用，全局修改全局生效，在这样的情况下我们就会涉及到数据的模块封装和数据隔离，由于react使用的是state的机制故而我们就想让react的state机制像闭包的数据隔离一样对不同组件的state进行单独封装，单独隔离，但是呢又可以全局引用，因此就出现了redux到dva等一系列的react的状态管理框架。\n\n#### 最初史的state介绍\n  react用的比较多的朋友应该知道，redux的思想是视图与状态是一一对应的；但是呢redux的所有的状态，都保存在一个对象state里面；\n\n  store：是一个数据池，redux会把所有的数据都放在里面，没有做数据隔离，而一个 State 对应一个 View。只要 State 相同，View 就相同。\n\n  redux-saga和dva非常相似，可以把触发条件理解为action，具体业务处理是是reducer，那么我们触发事件只能通过action去操作整个store的状态，对业务来说，我们可以不需要知道reducer的具体实现，更新reducer对业务来说也是无感的。这样就把数据的处理和更新与业务分离开来，相互没有直接的依赖关系。\n\n\n##### redux-saga:\n - 1.Redux 内里只需一个 Store,全局的数据都在这个大 Store 内里。Store 的 State 不能直接修正，每次只能返回一个新的 State。Redux 整了一个createStore函数来添加 Store。\n - 2.同一个state里不能有相同的key，即同一个state里不能有两个List，虽然两个list是在不同的页面里使用。\n\ndemo\n```javascript\n  import { createStore } from 'redux';\n  const store = createStore(fn);\n```\n\naction的代码如下：\n```javascript\n  import { takeEvery } from 'redux-saga';\n  \n  function* demo() {\n    yield takeEvery('actionName', function* (result) {\n      console.log(result);\n    });\n  }\n```\n如果有多个saga函数来监听不同的action事件的情况：\n\n``` javascript\n  import { takeEvery } from 'redux-saga/effects'\n\n  // action 1\n  function* demo1(action) { ... }\n\n  // action 2\n  function* demo2(action) { ... }\n\n  // 同时抛出它们\n  export default function* rootSaga() {\n    yield takeEvery('actionName1', demo1)\n    yield takeEvery('actionName2', demo2)\n  }\n  //yield 右边的任何表达式都会被求值，结果会被 yield 给调用者。\n```\n  - 我们也可以在action函数中写fetch-request对接口进行调用，同时可以吐出到组件，yield为异步api时使用saga提供call()方法，我们可以在触发业务代码的地方使用then函数来接受api的返回数据也可以在action函数这里进行state处理。\n  这里要说明的是，一般我们都会在action函数这里做一层数据校验，对接口返回数据进行一个初步的检测。\n\n##### 1.接口校验\n```javascript\nimport { call } from 'redux-saga/effects';\nimport Api from './path/to/api'\n\nfunction* fetchApi() {\n  const result = yield call(Api.fetch, '/products')\n  if(result.code===200||...){\n    alert('success');\n    return result.data\n  }else{\n    alert('error');\n    return null\n  }\n}\n```\n\n##### 2.使用try...catch来处理错误，并统一提示处理\n\n```javascript\n//错误统一处理\n\nimport Api from './path/to/api';\nimport { call, put } from 'redux-saga/effects';\n\n// ...\n\nfunction* fetchApi() {\n  try {\n    const result = yield call(Api.fetch, '/products')\n    yield put({ type: 'resultSuccess', products })\n  }\n  catch(error) {\n    yield put({ type: 'resultError', error })\n  }\n}\n```\n\n##### 3.使用throw来抛出一个错误\n```javascript\nimport { call, put } from 'redux-saga/effects'\nimport Api from '...'\n\nconst iterator = fetchProducts()\n\n// 期望一个 call 指令\nassert.deepEqual(\n  iterator.next().value,\n  call(Api.fetch, '/products'),\n  \"fetchProducts should yield an Effect call(Api.fetch, './products')\"\n)\n\n// 创建一个模拟的 error 对象\nconst error = {}\n\n// 期望一个 dispatch 指令\nassert.deepEqual(\n  iterator.throw(error).value,\n  put({ type: 'resultError', error }),\n  \"fetchProducts should yield an Effect put({ type: 'PRODUCTS_REQUEST_FAILED', error })\"\n)\n```\n##### redux-dva：\n学过React的都知道他的技术栈，各种库插件多的如天，所以每当你使用React的时候都需要引入很多的模块，配置好多数据，那么dva就是把这些用到的模块集成在一起，形成一定的架构规范。\n\n1.dva 是 framework，不是 library库；\n2.dva封装了redux，减少很多重复代码比如action reducers 等的重复编写。\n3.dva的核心是module模块，通过module我们可以实现结构上的多个store来储存数据，saga是所有的都写在一个里面，这样就可以对不同的业务组件或者模块来分别管理和引用。\n4.call, put其实是saga的写法，dva集成了集成了redux、redux-saga、react-router-redux、react-router。将initState、saga、reducer集成到一个model里面统一管理，对某个模块进行单独的维护，减少成本量。\n\n##### 引入图文说明\n<!-- ![dva.png](https://i.loli.net/2020/06/29/OkzifJLM7wGR1TZ.png) -->\n![dva.png](https://i.loli.net/2020/06/29/9Zkes2tvRAHMxLf.png)\n\n缺点：\n1.如现在react-router已经到了4.x了，但是dva内置的版本却还是2.x，如果react-router升级就要在使用 dva 和使用新版本的组件上做出选择了。\n2.可扩展性不强，后期升级也是个问题。\n\n##### 引入连接器：\n```javascript\nimport { connect } from 'dva';\n```\n\n```javascript\nimport queryString from 'query-string';\nimport * as todoService from '../services/todo'\n \nexport default {\n  namespace: 'storeA', //model的命名空间key，全局唯一，用来识别调用或引入的store\n   state: {  //状态的初始值\n     list: [],\n     message:\"ffff\"\n   },\n \n  //类似于redux的 reducer 是一个纯函数用来处理同步函数。\n  reducers: {   \n    setList(state, { payload: { list } }) {\n      return { ...state, list }\n    },\n \n    setState(state, { payload: { message } }) {     \n      return { ...state, message }\n    },\n  },\n  //处理请求等异步函数\n  effects: {\n    *addForm({ payload: value }, { call, put, select }) {\n      const data = yield call(todoService.query, value)\n      let tempList = yield select(state => state.todo.list);\n      yield put({ type: 'setList', payload: { list }}) \n    },\n \n    *test({ payload: message }, { call, put, select }) {\n      yield put({ type: 'setState', payload: { message } })\n      yield put({ type: 'namespaceB/setState', payload: { message } })//可控制其他model中的state\n    }\n  },\n \n  //用于订阅某些数据 如：监听路由的变化等\n  subscriptions: {\n    setup({ dispatch, history }) {\n      // 监听路由的变化，请求页面数据\n      return history.listen(({ pathname, search }) => {\n        const query = queryString.parse(search);\n        let list = []\n        if (pathname === 'addForm') {//路由名称\n          dispatch({ type: 'setList', payload: {list} }) //更新action\n        }\n      })\n    }\n  }\n ```\n  - namespace 代表命名空间，全局唯一\n  - state 代表初始化数据是一个对象，通过props调用\n  - reducer 就跟我们平时用的reducer一样，action事件触发的函数\n  - effects 处理Api等异步问题\n  - subscriptions 订阅，常用来监听\n\n##### 跨model的通信：\n```javascript\n  new Promise((resolve, reject) => {\n    dispatch({ type: 'storeA/addLog', payload: { ... } });\n  })\n  .then((data) => {\n    console.log(data);\n    // ...\n  });\n```\ndispatch中的type/前面的是model的key（namespace）后面的才是action。\n也可以在effects中通过key/action的方式来通知其他model更新state状态，达到跨model通行。\n\n```javascript\n  *test({ payload: message }, { call, put, select }) {\n    yield put({ type: 'setState', payload: { message } })\n    yield put({ type: 'namespaceB/setState', payload: { message } })//可控制其他model中的state\n  }\n```\n\n##### 多任务的情况：\n```javascript\n  const [result1, result2]  = yield all([\n    call(service1, param1),\n    call(service2, param2)\n  ])\n```\n\n##### model数据共享（共享state数据）\n\n在B的model中的effects中获取A的state，其中a为A的namespace，response 为A的state，如\n```javascript\neffects: {\n  *fetchResult({ callback }, { call, put, select }) {\n    const response = yield select(_ => _.a);\n    // response为A model中的state值\n    // ···其他操作\n    // yield put({ type: \"saveEvents\", payload:{response} });\n    // if (callback) callback(response);\n  }\n}\n```\n也可以在B页面中connect A model取值。\n\n#### 附：初始化:\n\n```javascript\n  // 1. Initialize\n  const app = dva({\n  history, // 指定给路由用的 history，默认是 hashHistory\n  initialState,  // 指定初始数据，优先级高于 model 中的 state\n  onError, // effect 执行错误或 subscription 通过 done 主动抛错时触发，可用于管理全局出错状态。\n  onAction, // 在 action 被 dispatch 时触发\n  onStateChange, // state 改变时触发，可用于同步 state 到 localStorage，服务器端等\n  onReducer, // 封装 reducer 执行。比如借助 redux-undo 实现 redo/undo\n  onEffect, // 封装 effect\n  onHmr, // 热替换相关\n  extraReducers, // 指定额外的 reducer，比如 redux-form 需要指定额外的 form reducer\n  extraEnhancers, // 指定额外的 StoreEnhancer ，比如结合 redux-persist 的使用\n});\n\n  // 2. Plugins\n  // app.use({});//也可以可配置hooks的相关\n\n  // 3. Model\n  // app.model(require('./models/example').default);\n\n  // 4. Router\n  app.router(require('./router').default);\n\n  // 5. Start\n  app.start('#root');\n```\n挂载组件时，dva中的state通过connect将model、状态数据与组件相连。通过dispatch 调用key/action来触发model。这样就形成一个完整的数据流向。\n\n#### 总结\ndva 帮你自动化了Redux 架构一些繁琐的设置，比如上面所说的redux store 的创建，中间件的配置，路由的初始化等都自动生成好了。\n\ndva 降低了组件之间数据之间的的耦合度，可以对单个模块进行封装单独的model通过connect来连接，模块数据单独设置清晰易维护。\n\ndva编写方便，基本不需要过多的配置，提高团队多人开发的效率。\n\ndva配合umi达到了开箱即用的状态\n","slug":"redux-dva","published":1,"updated":"2020-06-29T08:30:10.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcqb001khi603mik9pe8","content":"<h5 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h5><p>  React 是一个数据单项的JavaScript库，可以实现重复调用，全局修改全局生效，在这样的情况下我们就会涉及到数据的模块封装和数据隔离，由于react使用的是state的机制故而我们就想让react的state机制像闭包的数据隔离一样对不同组件的state进行单独封装，单独隔离，但是呢又可以全局引用，因此就出现了redux到dva等一系列的react的状态管理框架。</p>\n<h4 id=\"最初史的state介绍\"><a href=\"#最初史的state介绍\" class=\"headerlink\" title=\"最初史的state介绍\"></a>最初史的state介绍</h4><p>  react用的比较多的朋友应该知道，redux的思想是视图与状态是一一对应的；但是呢redux的所有的状态，都保存在一个对象state里面；</p>\n<p>  store：是一个数据池，redux会把所有的数据都放在里面，没有做数据隔离，而一个 State 对应一个 View。只要 State 相同，View 就相同。</p>\n<p>  redux-saga和dva非常相似，可以把触发条件理解为action，具体业务处理是是reducer，那么我们触发事件只能通过action去操作整个store的状态，对业务来说，我们可以不需要知道reducer的具体实现，更新reducer对业务来说也是无感的。这样就把数据的处理和更新与业务分离开来，相互没有直接的依赖关系。</p>\n<h5 id=\"redux-saga\"><a href=\"#redux-saga\" class=\"headerlink\" title=\"redux-saga:\"></a>redux-saga:</h5><ul>\n<li>1.Redux 内里只需一个 Store,全局的数据都在这个大 Store 内里。Store 的 State 不能直接修正，每次只能返回一个新的 State。Redux 整了一个createStore函数来添加 Store。</li>\n<li>2.同一个state里不能有相同的key，即同一个state里不能有两个List，虽然两个list是在不同的页面里使用。</li>\n</ul>\n<p>demo</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> createStore <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>action的代码如下：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> takeEvery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">takeEvery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'actionName'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>如果有多个saga函数来监听不同的action事件的情况：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> takeEvery <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga/effects'</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// action 1</span>\n  <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">demo1</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// action 2</span>\n  <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">demo2</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 同时抛出它们</span>\n  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">rootSaga</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">takeEvery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'actionName1'</span><span class=\"token punctuation\">,</span> demo1<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">takeEvery</span><span class=\"token punctuation\">(</span><span class=\"token string\">'actionName2'</span><span class=\"token punctuation\">,</span> demo2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\" spellcheck=\"true\">//yield 右边的任何表达式都会被求值，结果会被 yield 给调用者。</span></code></pre>\n<ul>\n<li>我们也可以在action函数中写fetch-request对接口进行调用，同时可以吐出到组件，yield为异步api时使用saga提供call()方法，我们可以在触发业务代码的地方使用then函数来接受api的返回数据也可以在action函数这里进行state处理。<br>这里要说明的是，一般我们都会在action函数这里做一层数据校验，对接口返回数据进行一个初步的检测。</li>\n</ul>\n<h5 id=\"1-接口校验\"><a href=\"#1-接口校验\" class=\"headerlink\" title=\"1.接口校验\"></a>1.接口校验</h5><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> call <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga/effects'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Api <span class=\"token keyword\">from</span> <span class=\"token string\">'./path/to/api'</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Api<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">,</span> <span class=\"token string\">'/products'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>code<span class=\"token operator\">===</span><span class=\"token number\">200</span><span class=\"token operator\">||</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'success'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"2-使用try…catch来处理错误，并统一提示处理\"><a href=\"#2-使用try…catch来处理错误，并统一提示处理\" class=\"headerlink\" title=\"2.使用try…catch来处理错误，并统一提示处理\"></a>2.使用try…catch来处理错误，并统一提示处理</h5><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//错误统一处理</span>\n\n<span class=\"token keyword\">import</span> Api <span class=\"token keyword\">from</span> <span class=\"token string\">'./path/to/api'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga/effects'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// ...</span>\n\n<span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">fetchApi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Api<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">,</span> <span class=\"token string\">'/products'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'resultSuccess'</span><span class=\"token punctuation\">,</span> products <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'resultError'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"3-使用throw来抛出一个错误\"><a href=\"#3-使用throw来抛出一个错误\" class=\"headerlink\" title=\"3.使用throw来抛出一个错误\"></a>3.使用throw来抛出一个错误</h5><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux-saga/effects'</span>\n<span class=\"token keyword\">import</span> Api <span class=\"token keyword\">from</span> <span class=\"token string\">'...'</span>\n\n<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">fetchProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 期望一个 call 指令</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>Api<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">,</span> <span class=\"token string\">'/products'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"fetchProducts should yield an Effect call(Api.fetch, './products')\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 创建一个模拟的 error 对象</span>\n<span class=\"token keyword\">const</span> error <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// 期望一个 dispatch 指令</span>\nassert<span class=\"token punctuation\">.</span><span class=\"token function\">deepEqual</span><span class=\"token punctuation\">(</span>\n  iterator<span class=\"token punctuation\">.</span><span class=\"token keyword\">throw</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span>\n  <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'resultError'</span><span class=\"token punctuation\">,</span> error <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"fetchProducts should yield an Effect put({ type: 'PRODUCTS_REQUEST_FAILED', error })\"</span>\n<span class=\"token punctuation\">)</span></code></pre>\n<h5 id=\"redux-dva：\"><a href=\"#redux-dva：\" class=\"headerlink\" title=\"redux-dva：\"></a>redux-dva：</h5><p>学过React的都知道他的技术栈，各种库插件多的如天，所以每当你使用React的时候都需要引入很多的模块，配置好多数据，那么dva就是把这些用到的模块集成在一起，形成一定的架构规范。</p>\n<p>1.dva 是 framework，不是 library库；<br>2.dva封装了redux，减少很多重复代码比如action reducers 等的重复编写。<br>3.dva的核心是module模块，通过module我们可以实现结构上的多个store来储存数据，saga是所有的都写在一个里面，这样就可以对不同的业务组件或者模块来分别管理和引用。<br>4.call, put其实是saga的写法，dva集成了集成了redux、redux-saga、react-router-redux、react-router。将initState、saga、reducer集成到一个model里面统一管理，对某个模块进行单独的维护，减少成本量。</p>\n<h5 id=\"引入图文说明\"><a href=\"#引入图文说明\" class=\"headerlink\" title=\"引入图文说明\"></a>引入图文说明</h5><!-- ![dva.png](https://i.loli.net/2020/06/29/OkzifJLM7wGR1TZ.png) -->\n<p><img src=\"https://i.loli.net/2020/06/29/9Zkes2tvRAHMxLf.png\" alt=\"dva.png\"></p>\n<p>缺点：<br>1.如现在react-router已经到了4.x了，但是dva内置的版本却还是2.x，如果react-router升级就要在使用 dva 和使用新版本的组件上做出选择了。<br>2.可扩展性不强，后期升级也是个问题。</p>\n<h5 id=\"引入连接器：\"><a href=\"#引入连接器：\" class=\"headerlink\" title=\"引入连接器：\"></a>引入连接器：</h5><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'dva'</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> queryString <span class=\"token keyword\">from</span> <span class=\"token string\">'query-string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> todoService <span class=\"token keyword\">from</span> <span class=\"token string\">'../services/todo'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">{</span>\n  namespace<span class=\"token punctuation\">:</span> <span class=\"token string\">'storeA'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">//model的命名空间key，全局唯一，用来识别调用或引入的store</span>\n   state<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\" spellcheck=\"true\">//状态的初始值</span>\n     list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n     message<span class=\"token punctuation\">:</span><span class=\"token string\">\"ffff\"</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">//类似于redux的 reducer 是一个纯函数用来处理同步函数。</span>\n  reducers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>   \n    <span class=\"token function\">setList</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> list <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>     \n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\" spellcheck=\"true\">//处理请求等异步函数</span>\n  effects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span><span class=\"token function\">addForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> payload<span class=\"token punctuation\">:</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put<span class=\"token punctuation\">,</span> select <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>todoService<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> tempList <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=</span><span class=\"token operator\">></span> state<span class=\"token punctuation\">.</span>todo<span class=\"token punctuation\">.</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'setList'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> list <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token operator\">*</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> payload<span class=\"token punctuation\">:</span> message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put<span class=\"token punctuation\">,</span> select <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'setState'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'namespaceB/setState'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//可控制其他model中的state</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">//用于订阅某些数据 如：监听路由的变化等</span>\n  subscriptions<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dispatch<span class=\"token punctuation\">,</span> history <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">// 监听路由的变化，请求页面数据</span>\n      <span class=\"token keyword\">return</span> history<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> pathname<span class=\"token punctuation\">,</span> search <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> queryString<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pathname <span class=\"token operator\">===</span> <span class=\"token string\">'addForm'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//路由名称</span>\n          <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'setList'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>list<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//更新action</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>namespace 代表命名空间，全局唯一</li>\n<li>state 代表初始化数据是一个对象，通过props调用</li>\n<li>reducer 就跟我们平时用的reducer一样，action事件触发的函数</li>\n<li>effects 处理Api等异步问题</li>\n<li>subscriptions 订阅，常用来监听</li>\n</ul>\n<h5 id=\"跨model的通信：\"><a href=\"#跨model的通信：\" class=\"headerlink\" title=\"跨model的通信：\"></a>跨model的通信：</h5><pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'storeA/addLog'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ...</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>dispatch中的type/前面的是model的key（namespace）后面的才是action。<br>也可以在effects中通过key/action的方式来通知其他model更新state状态，达到跨model通行。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token operator\">*</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> payload<span class=\"token punctuation\">:</span> message <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put<span class=\"token punctuation\">,</span> select <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'setState'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'namespaceB/setState'</span><span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//可控制其他model中的state</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<h5 id=\"多任务的情况：\"><a href=\"#多任务的情况：\" class=\"headerlink\" title=\"多任务的情况：\"></a>多任务的情况：</h5><pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>result1<span class=\"token punctuation\">,</span> result2<span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n    <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>service1<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">call</span><span class=\"token punctuation\">(</span>service2<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre>\n<h5 id=\"model数据共享（共享state数据）\"><a href=\"#model数据共享（共享state数据）\" class=\"headerlink\" title=\"model数据共享（共享state数据）\"></a>model数据共享（共享state数据）</h5><p>在B的model中的effects中获取A的state，其中a为A的namespace，response 为A的state，如</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">effects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">*</span><span class=\"token function\">fetchResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> callback <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> call<span class=\"token punctuation\">,</span> put<span class=\"token punctuation\">,</span> select <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">yield</span> <span class=\"token function\">select</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=</span><span class=\"token operator\">></span> _<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// response为A model中的state值</span>\n    <span class=\"token comment\" spellcheck=\"true\">// ···其他操作</span>\n    <span class=\"token comment\" spellcheck=\"true\">// yield put({ type: \"saveEvents\", payload:{response} });</span>\n    <span class=\"token comment\" spellcheck=\"true\">// if (callback) callback(response);</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>也可以在B页面中connect A model取值。</p>\n<h4 id=\"附：初始化\"><a href=\"#附：初始化\" class=\"headerlink\" title=\"附：初始化:\"></a>附：初始化:</h4><pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\" spellcheck=\"true\">// 1. Initialize</span>\n  <span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">dva</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  history<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 指定给路由用的 history，默认是 hashHistory</span>\n  initialState<span class=\"token punctuation\">,</span>  <span class=\"token comment\" spellcheck=\"true\">// 指定初始数据，优先级高于 model 中的 state</span>\n  onError<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// effect 执行错误或 subscription 通过 done 主动抛错时触发，可用于管理全局出错状态。</span>\n  onAction<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 在 action 被 dispatch 时触发</span>\n  onStateChange<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// state 改变时触发，可用于同步 state 到 localStorage，服务器端等</span>\n  onReducer<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 封装 reducer 执行。比如借助 redux-undo 实现 redo/undo</span>\n  onEffect<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 封装 effect</span>\n  onHmr<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 热替换相关</span>\n  extraReducers<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 指定额外的 reducer，比如 redux-form 需要指定额外的 form reducer</span>\n  extraEnhancers<span class=\"token punctuation\">,</span> <span class=\"token comment\" spellcheck=\"true\">// 指定额外的 StoreEnhancer ，比如结合 redux-persist 的使用</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 2. Plugins</span>\n  <span class=\"token comment\" spellcheck=\"true\">// app.use({});//也可以可配置hooks的相关</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 3. Model</span>\n  <span class=\"token comment\" spellcheck=\"true\">// app.model(require('./models/example').default);</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 4. Router</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">router</span><span class=\"token punctuation\">(</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./router'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 5. Start</span>\n  app<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>挂载组件时，dva中的state通过connect将model、状态数据与组件相连。通过dispatch 调用key/action来触发model。这样就形成一个完整的数据流向。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>dva 帮你自动化了Redux 架构一些繁琐的设置，比如上面所说的redux store 的创建，中间件的配置，路由的初始化等都自动生成好了。</p>\n<p>dva 降低了组件之间数据之间的的耦合度，可以对单个模块进行封装单独的model通过connect来连接，模块数据单独设置清晰易维护。</p>\n<p>dva编写方便，基本不需要过多的配置，提高团队多人开发的效率。</p>\n<p>dva配合umi达到了开箱即用的状态</p>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h5 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h5><p>  React 是一个数据单项的JavaScript库，可以实现重复调用，全局修改全局生效，在这样的情况下我们就会涉及到数据的模块封装和数据隔离，由于react使用的是state的机制故而我们就想让react的state机制像闭包的数据隔离一样对不同组件的state进行单独封装，单独隔离，但是呢又可以全局引用，因此就出现了redux到dva等一系列的react的状态管理框架。</p>\n<h4 id=\"最初史的state介绍\"><a href=\"#最初史的state介绍\" class=\"headerlink\" title=\"最初史的state介绍\"></a>最初史的state介绍</h4><p>  react用的比较多的朋友应该知道，redux的思想是视图与状态是一一对应的；但是呢redux的所有的状态，都保存在一个对象state里面；</p>\n<p>  store：是一个数据池，redux会把所有的数据都放在里面，没有做数据隔离，而一个 State 对应一个 View。只要 State 相同，View 就相同。</p>\n<p>  redux-saga和dva非常相似，可以把触发条件理解为action，具体业务处理是是reducer，那么我们触发事件只能通过action去操作整个store的状态，对业务来说，我们可以不需要知道reducer的具体实现，更新reducer对业务来说也是无感的。这样就把数据的处理和更新与业务分离开来，相互没有直接的依赖关系。</p>\n<h5 id=\"redux-saga\"><a href=\"#redux-saga\" class=\"headerlink\" title=\"redux-saga:\"></a>redux-saga:</h5><ul>\n<li>1.Redux 内里只需一个 Store,全局的数据都在这个大 Store 内里。Store 的 State 不能直接修正，每次只能返回一个新的 State。Redux 整了一个createStore函数来添加 Store。</li>\n<li>2.同一个state里不能有相同的key，即同一个state里不能有两个List，虽然两个list是在不同的页面里使用。</li>\n</ul>\n<p>demo</p>\n<pre><code class=\"javascript\">  import { createStore } from &#39;redux&#39;;\n  const store = createStore(fn);</code></pre>\n<p>action的代码如下：</p>\n<pre><code class=\"javascript\">  import { takeEvery } from &#39;redux-saga&#39;;\n\n  function* demo() {\n    yield takeEvery(&#39;actionName&#39;, function* (result) {\n      console.log(result);\n    });\n  }</code></pre>\n<p>如果有多个saga函数来监听不同的action事件的情况：</p>\n<pre><code class=\"javascript\">  import { takeEvery } from &#39;redux-saga/effects&#39;\n\n  // action 1\n  function* demo1(action) { ... }\n\n  // action 2\n  function* demo2(action) { ... }\n\n  // 同时抛出它们\n  export default function* rootSaga() {\n    yield takeEvery(&#39;actionName1&#39;, demo1)\n    yield takeEvery(&#39;actionName2&#39;, demo2)\n  }\n  //yield 右边的任何表达式都会被求值，结果会被 yield 给调用者。</code></pre>\n<ul>\n<li>我们也可以在action函数中写fetch-request对接口进行调用，同时可以吐出到组件，yield为异步api时使用saga提供call()方法，我们可以在触发业务代码的地方使用then函数来接受api的返回数据也可以在action函数这里进行state处理。<br>这里要说明的是，一般我们都会在action函数这里做一层数据校验，对接口返回数据进行一个初步的检测。</li>\n</ul>\n<h5 id=\"1-接口校验\"><a href=\"#1-接口校验\" class=\"headerlink\" title=\"1.接口校验\"></a>1.接口校验</h5><pre><code class=\"javascript\">import { call } from &#39;redux-saga/effects&#39;;\nimport Api from &#39;./path/to/api&#39;\n\nfunction* fetchApi() {\n  const result = yield call(Api.fetch, &#39;/products&#39;)\n  if(result.code===200||...){\n    alert(&#39;success&#39;);\n    return result.data\n  }else{\n    alert(&#39;error&#39;);\n    return null\n  }\n}</code></pre>\n<h5 id=\"2-使用try…catch来处理错误，并统一提示处理\"><a href=\"#2-使用try…catch来处理错误，并统一提示处理\" class=\"headerlink\" title=\"2.使用try…catch来处理错误，并统一提示处理\"></a>2.使用try…catch来处理错误，并统一提示处理</h5><pre><code class=\"javascript\">//错误统一处理\n\nimport Api from &#39;./path/to/api&#39;;\nimport { call, put } from &#39;redux-saga/effects&#39;;\n\n// ...\n\nfunction* fetchApi() {\n  try {\n    const result = yield call(Api.fetch, &#39;/products&#39;)\n    yield put({ type: &#39;resultSuccess&#39;, products })\n  }\n  catch(error) {\n    yield put({ type: &#39;resultError&#39;, error })\n  }\n}</code></pre>\n<h5 id=\"3-使用throw来抛出一个错误\"><a href=\"#3-使用throw来抛出一个错误\" class=\"headerlink\" title=\"3.使用throw来抛出一个错误\"></a>3.使用throw来抛出一个错误</h5><pre><code class=\"javascript\">import { call, put } from &#39;redux-saga/effects&#39;\nimport Api from &#39;...&#39;\n\nconst iterator = fetchProducts()\n\n// 期望一个 call 指令\nassert.deepEqual(\n  iterator.next().value,\n  call(Api.fetch, &#39;/products&#39;),\n  &quot;fetchProducts should yield an Effect call(Api.fetch, &#39;./products&#39;)&quot;\n)\n\n// 创建一个模拟的 error 对象\nconst error = {}\n\n// 期望一个 dispatch 指令\nassert.deepEqual(\n  iterator.throw(error).value,\n  put({ type: &#39;resultError&#39;, error }),\n  &quot;fetchProducts should yield an Effect put({ type: &#39;PRODUCTS_REQUEST_FAILED&#39;, error })&quot;\n)</code></pre>\n<h5 id=\"redux-dva：\"><a href=\"#redux-dva：\" class=\"headerlink\" title=\"redux-dva：\"></a>redux-dva：</h5><p>学过React的都知道他的技术栈，各种库插件多的如天，所以每当你使用React的时候都需要引入很多的模块，配置好多数据，那么dva就是把这些用到的模块集成在一起，形成一定的架构规范。</p>\n<p>1.dva 是 framework，不是 library库；<br>2.dva封装了redux，减少很多重复代码比如action reducers 等的重复编写。<br>3.dva的核心是module模块，通过module我们可以实现结构上的多个store来储存数据，saga是所有的都写在一个里面，这样就可以对不同的业务组件或者模块来分别管理和引用。<br>4.call, put其实是saga的写法，dva集成了集成了redux、redux-saga、react-router-redux、react-router。将initState、saga、reducer集成到一个model里面统一管理，对某个模块进行单独的维护，减少成本量。</p>\n<h5 id=\"引入图文说明\"><a href=\"#引入图文说明\" class=\"headerlink\" title=\"引入图文说明\"></a>引入图文说明</h5><!-- ![dva.png](https://i.loli.net/2020/06/29/OkzifJLM7wGR1TZ.png) -->\n<p><img src=\"https://i.loli.net/2020/06/29/9Zkes2tvRAHMxLf.png\" alt=\"dva.png\"></p>\n<p>缺点：<br>1.如现在react-router已经到了4.x了，但是dva内置的版本却还是2.x，如果react-router升级就要在使用 dva 和使用新版本的组件上做出选择了。<br>2.可扩展性不强，后期升级也是个问题。</p>\n<h5 id=\"引入连接器：\"><a href=\"#引入连接器：\" class=\"headerlink\" title=\"引入连接器：\"></a>引入连接器：</h5><pre><code class=\"javascript\">import { connect } from &#39;dva&#39;;</code></pre>\n<pre><code class=\"javascript\">import queryString from &#39;query-string&#39;;\nimport * as todoService from &#39;../services/todo&#39;\n\nexport default {\n  namespace: &#39;storeA&#39;, //model的命名空间key，全局唯一，用来识别调用或引入的store\n   state: {  //状态的初始值\n     list: [],\n     message:&quot;ffff&quot;\n   },\n\n  //类似于redux的 reducer 是一个纯函数用来处理同步函数。\n  reducers: {   \n    setList(state, { payload: { list } }) {\n      return { ...state, list }\n    },\n\n    setState(state, { payload: { message } }) {     \n      return { ...state, message }\n    },\n  },\n  //处理请求等异步函数\n  effects: {\n    *addForm({ payload: value }, { call, put, select }) {\n      const data = yield call(todoService.query, value)\n      let tempList = yield select(state =&gt; state.todo.list);\n      yield put({ type: &#39;setList&#39;, payload: { list }}) \n    },\n\n    *test({ payload: message }, { call, put, select }) {\n      yield put({ type: &#39;setState&#39;, payload: { message } })\n      yield put({ type: &#39;namespaceB/setState&#39;, payload: { message } })//可控制其他model中的state\n    }\n  },\n\n  //用于订阅某些数据 如：监听路由的变化等\n  subscriptions: {\n    setup({ dispatch, history }) {\n      // 监听路由的变化，请求页面数据\n      return history.listen(({ pathname, search }) =&gt; {\n        const query = queryString.parse(search);\n        let list = []\n        if (pathname === &#39;addForm&#39;) {//路由名称\n          dispatch({ type: &#39;setList&#39;, payload: {list} }) //更新action\n        }\n      })\n    }\n  }</code></pre>\n<ul>\n<li>namespace 代表命名空间，全局唯一</li>\n<li>state 代表初始化数据是一个对象，通过props调用</li>\n<li>reducer 就跟我们平时用的reducer一样，action事件触发的函数</li>\n<li>effects 处理Api等异步问题</li>\n<li>subscriptions 订阅，常用来监听</li>\n</ul>\n<h5 id=\"跨model的通信：\"><a href=\"#跨model的通信：\" class=\"headerlink\" title=\"跨model的通信：\"></a>跨model的通信：</h5><pre><code class=\"javascript\">  new Promise((resolve, reject) =&gt; {\n    dispatch({ type: &#39;storeA/addLog&#39;, payload: { ... } });\n  })\n  .then((data) =&gt; {\n    console.log(data);\n    // ...\n  });</code></pre>\n<p>dispatch中的type/前面的是model的key（namespace）后面的才是action。<br>也可以在effects中通过key/action的方式来通知其他model更新state状态，达到跨model通行。</p>\n<pre><code class=\"javascript\">  *test({ payload: message }, { call, put, select }) {\n    yield put({ type: &#39;setState&#39;, payload: { message } })\n    yield put({ type: &#39;namespaceB/setState&#39;, payload: { message } })//可控制其他model中的state\n  }</code></pre>\n<h5 id=\"多任务的情况：\"><a href=\"#多任务的情况：\" class=\"headerlink\" title=\"多任务的情况：\"></a>多任务的情况：</h5><pre><code class=\"javascript\">  const [result1, result2]  = yield all([\n    call(service1, param1),\n    call(service2, param2)\n  ])</code></pre>\n<h5 id=\"model数据共享（共享state数据）\"><a href=\"#model数据共享（共享state数据）\" class=\"headerlink\" title=\"model数据共享（共享state数据）\"></a>model数据共享（共享state数据）</h5><p>在B的model中的effects中获取A的state，其中a为A的namespace，response 为A的state，如</p>\n<pre><code class=\"javascript\">effects: {\n  *fetchResult({ callback }, { call, put, select }) {\n    const response = yield select(_ =&gt; _.a);\n    // response为A model中的state值\n    // ···其他操作\n    // yield put({ type: &quot;saveEvents&quot;, payload:{response} });\n    // if (callback) callback(response);\n  }\n}</code></pre>\n<p>也可以在B页面中connect A model取值。</p>\n<h4 id=\"附：初始化\"><a href=\"#附：初始化\" class=\"headerlink\" title=\"附：初始化:\"></a>附：初始化:</h4><pre><code class=\"javascript\">  // 1. Initialize\n  const app = dva({\n  history, // 指定给路由用的 history，默认是 hashHistory\n  initialState,  // 指定初始数据，优先级高于 model 中的 state\n  onError, // effect 执行错误或 subscription 通过 done 主动抛错时触发，可用于管理全局出错状态。\n  onAction, // 在 action 被 dispatch 时触发\n  onStateChange, // state 改变时触发，可用于同步 state 到 localStorage，服务器端等\n  onReducer, // 封装 reducer 执行。比如借助 redux-undo 实现 redo/undo\n  onEffect, // 封装 effect\n  onHmr, // 热替换相关\n  extraReducers, // 指定额外的 reducer，比如 redux-form 需要指定额外的 form reducer\n  extraEnhancers, // 指定额外的 StoreEnhancer ，比如结合 redux-persist 的使用\n});\n\n  // 2. Plugins\n  // app.use({});//也可以可配置hooks的相关\n\n  // 3. Model\n  // app.model(require(&#39;./models/example&#39;).default);\n\n  // 4. Router\n  app.router(require(&#39;./router&#39;).default);\n\n  // 5. Start\n  app.start(&#39;#root&#39;);</code></pre>\n<p>挂载组件时，dva中的state通过connect将model、状态数据与组件相连。通过dispatch 调用key/action来触发model。这样就形成一个完整的数据流向。</p>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>dva 帮你自动化了Redux 架构一些繁琐的设置，比如上面所说的redux store 的创建，中间件的配置，路由的初始化等都自动生成好了。</p>\n<p>dva 降低了组件之间数据之间的的耦合度，可以对单个模块进行封装单独的model通过connect来连接，模块数据单独设置清晰易维护。</p>\n<p>dva编写方便，基本不需要过多的配置，提高团队多人开发的效率。</p>\n<p>dva配合umi达到了开箱即用的状态</p>\n"},{"title":"浏览器储存的前世今生","date":"2020-08-22T13:12:57.000Z","img":"/medias/featureimages/3.jpg","top":false,"cover":true,"coverImg":"/medias/featureimages3.jpg","toc":true,"mathjax":false,"summary":"本文章总结浏览器发展以来的各种储存方式，客户端的储存方式也在逐渐进步，总结各种常用或者可用的储存方式，详细介绍储存的使用和注意点兼容性等。","_content":"\n### 浏览器储存\n\n1.在代码中我们为了提高性能会请求一次数据储存起来然后在相应的页面进行读取，而不是多次去请求这样是为了提高性能。\n2.那么常用的浏览器端存储技术有哪些？在我们工作中会经常遇到需要前端来储存一些数据，除了react model等工具，浏览器也为我们提供来一些可用的储存，那么这些储存都有哪些特点，需要我们怎么注意呢，我们接下来就详细的看看具体的用法。\n3.在未来客户端可能会和服务起一样有自己的数据库，提供各种数据的查询方式，提供各种API来提高查询性能。\n\n\n### 常用的储存方式\n\n- cookie （也叫 Web Cookie 或浏览器 Cookie） \n- userData  比较早历史\n- globalStorage  历史\n- sessionStorage/localStorage  主流\n- IndexedDB  主流或未来主流\n\n\n#### cookie\n\n- 以下是cookie的官方解释、\n\n```javascript\nHTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的HTTP协议记录稳定的状态信息成为了可能。\n\nCookie 主要用于以下三个方面：\n\n会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n个性化设置（如用户自定义设置、主题等）\n浏览器行为跟踪（如跟踪分析用户行为等）\n```\n\n- 用法：\n\n用来设置http请求的一些规定，但已目前前端来说，更多的是储存用户的登录信息，和后端接口保持通信。\n\n- 简单的demo\n\n```javascript\n  Set-Cookie: <cookie名>=<cookie值>\n```\n服务器通过该头部告知客户端保存 Cookie 信息。\n```javascript\n  HTTP/1.0 200 OK\n  Content-type: text/html\n  Set-Cookie: yummy_cookie=choco\n  Set-Cookie: tasty_cookie=strawberry\n```\n但是cookie所能储存的数据是有限的，而且在关闭或者跨域的情况下都是无法访问到的，我们聪明的程序发明者就研究了这一种可以userData保存数据的方式。\n\n\n\n#### userData\n\nuserData 是IE浏览器专有的数据储存。我们常用这种方式来兼容ie的老版浏览器，最低版本支持到IE5.0版本，最高到IE9以上。现在有H5基本兼容了更优的一些储存APi，这种用法基本快废弃了。\n  当时他的出现是为了解决cookie的数据局限性。当浏览器关闭时，他的数据也是可以保留的。\n  用户数据允许每个文档最多128KB数据，每个域名最多1MB数据。\n  储存格式以xml的形式储存在客户端上。\n\n- 使用方式\n\n给div添加behavior属性（或者动态生成一个behavior的dom标签）\n```css\n  <div style=\"behavior:url(#default#userData)\" id=\"dataInfoStore\"></div>\n```\n```javascript\n  var dataStore = document.getElementById(\"dataInfoStore\");\n  //使用setAttribute()方法保存数据 这是使用的是div的attr元素的道理\n  dataStore.setAttribute(\"oldBool\", \"true\");\n  //使用save添加到自定义的变量名空间下\n  dataStore.save(\"listInfo\");\n```\n\n读取数据\n```javascript\n  dataStore.load(\"listInfo\"); //load储存数据\n  dataStore.getAttribute(\"oldBool\"); //获取key值\n```\n\n删除数据 \n\n```javascript\n  dataStore.removeAttribute(\"listInfo\") //删除attr信息\n```\n\n\n#### globalStorage\n\nglobalStorage也是H5比较老的一种储存方式，他是继userData之后出现的一种储存方式，一个域名下罪错可以储存5120k的数据，也可以跨页面读取。\n\n```javascript\n  globalStorage['core.mokahr.com'] 所有core.mokahr.com下面的页面都可以使用这块空间\n  globalStorage['mokahr.com'] mokahr.com下面的页面都可以使用这块空间\n  globalStorage['com']：所有com域名都可以 共享的使用这一块空间\n  globalStorage[''] ：所有页面都可以使用的空间\n```\n使用方法：\n\n- 设置\n```javascript\n  globalStorage[\"mokahr.com\"].employName = '张三';\n```\n- 取值\n```javascript\n  globalStorage[\"mokahr.com\"].getItem(\"employName\");\n  // 张三\n```\n- 删除\n```javascript\n  globalStorage[\"mokahr.com\"].removeItem(\"employName\");\n```\n\n😊是不是和我们的sessionStorage/localStorage很像啊，其实接下来就发展成sessionStorage/localStorage的形式了。\n\n\n\n\n#### sessionStorage/localStorage\n\n`sessionStorage`对象是存储特定于某个会话的数据，也就是数据只保存到浏览器关闭，这个对象就像会话cookie，也会在浏览器关后消失，存储在`sessionStorage`中的数据可以跨越页面刷新而存在。而`localStorage`的数据是永久性的，他不随着浏览器的关闭而清除。用这种方法我们可以储存一些需要保留的数据，希望下次打开后直接显示出来（比如用户的习惯行为）；\n这两种是我们目前常用的储存数据的方式；\n\n支持`sessionStorage/localStorage`的浏览器最小版本：IE8、Chrome 5。所以现在主流的浏览器都支持这个写法，我们基本现在都用这种写法来实现会话数据的储存。最多储存5M数据。\n\n注意：`sessionStorage/localStorage` 的数据是可见的，一些敏感的数据不建议储存在这里。\n\n\n- 设值：\n```javascript\n  //  使用方法存储数据 json对象要使用JSON.Stringify()方法转换成文本格式\n  sessionStorage.setItem(\"userData\", \"这是一个测试数据可以是json string\");\n  //  使用属性存储数据\n  sessionStorage.userData = \"这是一个测试数据可以是json string\";\n  sessionStorage['userData'] = \"这是一个测试数据可以是json string\";\n```\n- 取值\n```javascript\n  //通过getItem（）方法取值\n  const userData = sessionStorage.getItem('userData'); //这里是key名\n  //通过属性取值\n  const userData = sessionStorage['userData']; \n\n  //如果储存的是一个json字符串需要通过JSON.parse()来序列化成对象\n  const JsonUserdata = JSON.parse(userData);\n```\n- 删除属性\n```javascript\n  //通过removeItem()来删除\n  sessionStorage.removeItem('userData');//移除userData属性的数据\n```\n\n#### IndexedDB\n\n官方解释：IndexedDB 是一种可以让你在用户的浏览器内持久化存储数据的方法。IndexedDB 为生成 Web Application 提供了丰富的查询能力，使我们的应用在在线和离线时都可以正常工作。\n\nIndexedDB兼容支持浏览器情况：\n  fireFox: 50+;\n  chrome: 57+;\n  safari: 10+;\n  opera: 45+\n\n查询支持情况：\n```javascript\n  if (!window.indexedDB) {\n    window.alert(\"不支持\")\n  }\n```\n具体使用：\n\n- 引入\n\n```javascript\n  // 打开我们的数据库\n  var MokaDataStore = window.indexedDB.open(\"mokaDataStore\",'1200');//储存空间和版本号\n  // 打开数据库成功后，自动调用onsuccess事件回调。\n  MokaDataStore.onsuccess = function(e) {};\n\n  // 打开数据库失败\n  MokaDataStore.onerror = function(e) {\n    console.log(e.currentTarget.error.message);\n  };\n\n  // 第一次打开成功后或者版本有变化自动执行以下事件：一般用于初始化数据库。\n  MokaDataStore.onupgradeneeded = function(e) {\n    let dv = e.target.result; // 获取到 demoDB对应的 MokaDataStore,也就是我们的数据库。\n\n    if (!db.objectStoreNames.contains(employeeStore)) {\n      //如果表格不存在，创建一个新的表格（keyPath，主键 ； autoIncrement,是否自增），会返回一个对象（objectStore）\n      // objectStore就相当于数据库中的一张表。IDBObjectStore类型。\n      var objectStore = db.createObjectStore(employeeStore, {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n\n      //指定可以被索引的字段，unique字段是否唯一。类型： IDBIndex\n      objectStore.createIndex('employeeId', 'employeeId', {\n        unique: true\n      });\n      objectStore.createIndex('employeeName', 'employeeName', {\n        unique: false\n      });\n    }\n    console.log('数据库版本更改为： ' + dbVersion);\n  };\n```\n\n- 向数据库中增加数据\n\n```javascript\n  var transaction = db.transaction(employeeStore, \"readwrite\");\n  // 在所有数据添加完毕后的处理\n  transaction.oncomplete = function(event) {\n    alert(\"添加完成\");\n  };\n\n  transaction.onerror = function(event) {\n    // 错误处理！\n  };\n\n  var objectStore = transaction.objectStore(employeeStore);\n  var addEmployeeRequest = objectStore.add({\n    employeeId: 6758,\n    employeeName: '张三',\n  });\n\n```\ntransaction() 方法接受两个参数（一个是可选的）并返回一个事务对象。第一个参数是事务希望跨越的对象存储空间的列表。如果你希望事务能够跨越所有的对象存储空间你可以传入一个空数组，但请不要这样做，因为标准规定传入一个空数组会导致一个InvalidAccessError（可以使用属性db.objectStoreNames）。如果你没有为第二个参数指定任何内容，你得到的是只读事务。如果你想写入数据，你需要传入 \"readwrite\" 标识。\n\n\n- 从数据库中获取数据\n\n```javascript\n  var transaction = db.transaction(employeeStore);\n  var objectStore = transaction.objectStore(employeeStore);\n  var request = objectStore.get(6758); // IDBIndex\n  request.onerror = function(event) {\n    // 错误处理!\n  };\n  request.onsuccess = function(event) {\n    // 对 request.result 做些操作！\n    alert(\"employeeId === 6758的数据是\" + request.result.name);\n  };\n```\n\n- 从数据库中删除数据\n\n```javascript\n  var request = db.transaction([\"customers\"], \"readwrite\")\n                  .objectStore(\"customers\")\n                  .delete(6758);\n  request.onsuccess = function(event) {\n    // 删除employeeId是6758的数据成功！\n  };\n```","source":"_posts/web-储存.md","raw":"---\ntitle: 浏览器储存的前世今生\ndate: 2020-08-22 21:12:57\nimg: /medias/featureimages/3.jpg\ntop: false\ncover: true\ncoverImg: /medias/featureimages3.jpg\ntoc: true\nmathjax: false\nsummary: 本文章总结浏览器发展以来的各种储存方式，客户端的储存方式也在逐渐进步，总结各种常用或者可用的储存方式，详细介绍储存的使用和注意点兼容性等。\ncategories: 前端\ntags:\n- web\n- chrome\n- Storage\n---\n\n### 浏览器储存\n\n1.在代码中我们为了提高性能会请求一次数据储存起来然后在相应的页面进行读取，而不是多次去请求这样是为了提高性能。\n2.那么常用的浏览器端存储技术有哪些？在我们工作中会经常遇到需要前端来储存一些数据，除了react model等工具，浏览器也为我们提供来一些可用的储存，那么这些储存都有哪些特点，需要我们怎么注意呢，我们接下来就详细的看看具体的用法。\n3.在未来客户端可能会和服务起一样有自己的数据库，提供各种数据的查询方式，提供各种API来提高查询性能。\n\n\n### 常用的储存方式\n\n- cookie （也叫 Web Cookie 或浏览器 Cookie） \n- userData  比较早历史\n- globalStorage  历史\n- sessionStorage/localStorage  主流\n- IndexedDB  主流或未来主流\n\n\n#### cookie\n\n- 以下是cookie的官方解释、\n\n```javascript\nHTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的HTTP协议记录稳定的状态信息成为了可能。\n\nCookie 主要用于以下三个方面：\n\n会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n个性化设置（如用户自定义设置、主题等）\n浏览器行为跟踪（如跟踪分析用户行为等）\n```\n\n- 用法：\n\n用来设置http请求的一些规定，但已目前前端来说，更多的是储存用户的登录信息，和后端接口保持通信。\n\n- 简单的demo\n\n```javascript\n  Set-Cookie: <cookie名>=<cookie值>\n```\n服务器通过该头部告知客户端保存 Cookie 信息。\n```javascript\n  HTTP/1.0 200 OK\n  Content-type: text/html\n  Set-Cookie: yummy_cookie=choco\n  Set-Cookie: tasty_cookie=strawberry\n```\n但是cookie所能储存的数据是有限的，而且在关闭或者跨域的情况下都是无法访问到的，我们聪明的程序发明者就研究了这一种可以userData保存数据的方式。\n\n\n\n#### userData\n\nuserData 是IE浏览器专有的数据储存。我们常用这种方式来兼容ie的老版浏览器，最低版本支持到IE5.0版本，最高到IE9以上。现在有H5基本兼容了更优的一些储存APi，这种用法基本快废弃了。\n  当时他的出现是为了解决cookie的数据局限性。当浏览器关闭时，他的数据也是可以保留的。\n  用户数据允许每个文档最多128KB数据，每个域名最多1MB数据。\n  储存格式以xml的形式储存在客户端上。\n\n- 使用方式\n\n给div添加behavior属性（或者动态生成一个behavior的dom标签）\n```css\n  <div style=\"behavior:url(#default#userData)\" id=\"dataInfoStore\"></div>\n```\n```javascript\n  var dataStore = document.getElementById(\"dataInfoStore\");\n  //使用setAttribute()方法保存数据 这是使用的是div的attr元素的道理\n  dataStore.setAttribute(\"oldBool\", \"true\");\n  //使用save添加到自定义的变量名空间下\n  dataStore.save(\"listInfo\");\n```\n\n读取数据\n```javascript\n  dataStore.load(\"listInfo\"); //load储存数据\n  dataStore.getAttribute(\"oldBool\"); //获取key值\n```\n\n删除数据 \n\n```javascript\n  dataStore.removeAttribute(\"listInfo\") //删除attr信息\n```\n\n\n#### globalStorage\n\nglobalStorage也是H5比较老的一种储存方式，他是继userData之后出现的一种储存方式，一个域名下罪错可以储存5120k的数据，也可以跨页面读取。\n\n```javascript\n  globalStorage['core.mokahr.com'] 所有core.mokahr.com下面的页面都可以使用这块空间\n  globalStorage['mokahr.com'] mokahr.com下面的页面都可以使用这块空间\n  globalStorage['com']：所有com域名都可以 共享的使用这一块空间\n  globalStorage[''] ：所有页面都可以使用的空间\n```\n使用方法：\n\n- 设置\n```javascript\n  globalStorage[\"mokahr.com\"].employName = '张三';\n```\n- 取值\n```javascript\n  globalStorage[\"mokahr.com\"].getItem(\"employName\");\n  // 张三\n```\n- 删除\n```javascript\n  globalStorage[\"mokahr.com\"].removeItem(\"employName\");\n```\n\n😊是不是和我们的sessionStorage/localStorage很像啊，其实接下来就发展成sessionStorage/localStorage的形式了。\n\n\n\n\n#### sessionStorage/localStorage\n\n`sessionStorage`对象是存储特定于某个会话的数据，也就是数据只保存到浏览器关闭，这个对象就像会话cookie，也会在浏览器关后消失，存储在`sessionStorage`中的数据可以跨越页面刷新而存在。而`localStorage`的数据是永久性的，他不随着浏览器的关闭而清除。用这种方法我们可以储存一些需要保留的数据，希望下次打开后直接显示出来（比如用户的习惯行为）；\n这两种是我们目前常用的储存数据的方式；\n\n支持`sessionStorage/localStorage`的浏览器最小版本：IE8、Chrome 5。所以现在主流的浏览器都支持这个写法，我们基本现在都用这种写法来实现会话数据的储存。最多储存5M数据。\n\n注意：`sessionStorage/localStorage` 的数据是可见的，一些敏感的数据不建议储存在这里。\n\n\n- 设值：\n```javascript\n  //  使用方法存储数据 json对象要使用JSON.Stringify()方法转换成文本格式\n  sessionStorage.setItem(\"userData\", \"这是一个测试数据可以是json string\");\n  //  使用属性存储数据\n  sessionStorage.userData = \"这是一个测试数据可以是json string\";\n  sessionStorage['userData'] = \"这是一个测试数据可以是json string\";\n```\n- 取值\n```javascript\n  //通过getItem（）方法取值\n  const userData = sessionStorage.getItem('userData'); //这里是key名\n  //通过属性取值\n  const userData = sessionStorage['userData']; \n\n  //如果储存的是一个json字符串需要通过JSON.parse()来序列化成对象\n  const JsonUserdata = JSON.parse(userData);\n```\n- 删除属性\n```javascript\n  //通过removeItem()来删除\n  sessionStorage.removeItem('userData');//移除userData属性的数据\n```\n\n#### IndexedDB\n\n官方解释：IndexedDB 是一种可以让你在用户的浏览器内持久化存储数据的方法。IndexedDB 为生成 Web Application 提供了丰富的查询能力，使我们的应用在在线和离线时都可以正常工作。\n\nIndexedDB兼容支持浏览器情况：\n  fireFox: 50+;\n  chrome: 57+;\n  safari: 10+;\n  opera: 45+\n\n查询支持情况：\n```javascript\n  if (!window.indexedDB) {\n    window.alert(\"不支持\")\n  }\n```\n具体使用：\n\n- 引入\n\n```javascript\n  // 打开我们的数据库\n  var MokaDataStore = window.indexedDB.open(\"mokaDataStore\",'1200');//储存空间和版本号\n  // 打开数据库成功后，自动调用onsuccess事件回调。\n  MokaDataStore.onsuccess = function(e) {};\n\n  // 打开数据库失败\n  MokaDataStore.onerror = function(e) {\n    console.log(e.currentTarget.error.message);\n  };\n\n  // 第一次打开成功后或者版本有变化自动执行以下事件：一般用于初始化数据库。\n  MokaDataStore.onupgradeneeded = function(e) {\n    let dv = e.target.result; // 获取到 demoDB对应的 MokaDataStore,也就是我们的数据库。\n\n    if (!db.objectStoreNames.contains(employeeStore)) {\n      //如果表格不存在，创建一个新的表格（keyPath，主键 ； autoIncrement,是否自增），会返回一个对象（objectStore）\n      // objectStore就相当于数据库中的一张表。IDBObjectStore类型。\n      var objectStore = db.createObjectStore(employeeStore, {\n        keyPath: 'id',\n        autoIncrement: true\n      });\n\n      //指定可以被索引的字段，unique字段是否唯一。类型： IDBIndex\n      objectStore.createIndex('employeeId', 'employeeId', {\n        unique: true\n      });\n      objectStore.createIndex('employeeName', 'employeeName', {\n        unique: false\n      });\n    }\n    console.log('数据库版本更改为： ' + dbVersion);\n  };\n```\n\n- 向数据库中增加数据\n\n```javascript\n  var transaction = db.transaction(employeeStore, \"readwrite\");\n  // 在所有数据添加完毕后的处理\n  transaction.oncomplete = function(event) {\n    alert(\"添加完成\");\n  };\n\n  transaction.onerror = function(event) {\n    // 错误处理！\n  };\n\n  var objectStore = transaction.objectStore(employeeStore);\n  var addEmployeeRequest = objectStore.add({\n    employeeId: 6758,\n    employeeName: '张三',\n  });\n\n```\ntransaction() 方法接受两个参数（一个是可选的）并返回一个事务对象。第一个参数是事务希望跨越的对象存储空间的列表。如果你希望事务能够跨越所有的对象存储空间你可以传入一个空数组，但请不要这样做，因为标准规定传入一个空数组会导致一个InvalidAccessError（可以使用属性db.objectStoreNames）。如果你没有为第二个参数指定任何内容，你得到的是只读事务。如果你想写入数据，你需要传入 \"readwrite\" 标识。\n\n\n- 从数据库中获取数据\n\n```javascript\n  var transaction = db.transaction(employeeStore);\n  var objectStore = transaction.objectStore(employeeStore);\n  var request = objectStore.get(6758); // IDBIndex\n  request.onerror = function(event) {\n    // 错误处理!\n  };\n  request.onsuccess = function(event) {\n    // 对 request.result 做些操作！\n    alert(\"employeeId === 6758的数据是\" + request.result.name);\n  };\n```\n\n- 从数据库中删除数据\n\n```javascript\n  var request = db.transaction([\"customers\"], \"readwrite\")\n                  .objectStore(\"customers\")\n                  .delete(6758);\n  request.onsuccess = function(event) {\n    // 删除employeeId是6758的数据成功！\n  };\n```","slug":"web-储存","published":1,"updated":"2020-09-21T13:38:43.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcqg001ohi60bz458k4u","content":"<h3 id=\"浏览器储存\"><a href=\"#浏览器储存\" class=\"headerlink\" title=\"浏览器储存\"></a>浏览器储存</h3><p>1.在代码中我们为了提高性能会请求一次数据储存起来然后在相应的页面进行读取，而不是多次去请求这样是为了提高性能。<br>2.那么常用的浏览器端存储技术有哪些？在我们工作中会经常遇到需要前端来储存一些数据，除了react model等工具，浏览器也为我们提供来一些可用的储存，那么这些储存都有哪些特点，需要我们怎么注意呢，我们接下来就详细的看看具体的用法。<br>3.在未来客户端可能会和服务起一样有自己的数据库，提供各种数据的查询方式，提供各种API来提高查询性能。</p>\n<h3 id=\"常用的储存方式\"><a href=\"#常用的储存方式\" class=\"headerlink\" title=\"常用的储存方式\"></a>常用的储存方式</h3><ul>\n<li>cookie （也叫 Web Cookie 或浏览器 Cookie） </li>\n<li>userData  比较早历史</li>\n<li>globalStorage  历史</li>\n<li>sessionStorage/localStorage  主流</li>\n<li>IndexedDB  主流或未来主流</li>\n</ul>\n<h4 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h4><ul>\n<li>以下是cookie的官方解释、</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的HTTP协议记录稳定的状态信息成为了可能。\n\nCookie 主要用于以下三个方面：\n\n会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n个性化设置（如用户自定义设置、主题等）\n浏览器行为跟踪（如跟踪分析用户行为等）</code></pre>\n<ul>\n<li>用法：</li>\n</ul>\n<p>用来设置http请求的一些规定，但已目前前端来说，更多的是储存用户的登录信息，和后端接口保持通信。</p>\n<ul>\n<li>简单的demo</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  Set<span class=\"token operator\">-</span>Cookie<span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>cookie名<span class=\"token operator\">>=</span><span class=\"token operator\">&lt;</span>cookie值<span class=\"token operator\">></span></code></pre>\n<p>服务器通过该头部告知客户端保存 Cookie 信息。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  HTTP<span class=\"token operator\">/</span><span class=\"token number\">1.0</span> <span class=\"token number\">200</span> OK\n  Content<span class=\"token operator\">-</span>type<span class=\"token punctuation\">:</span> text<span class=\"token operator\">/</span>html\n  Set<span class=\"token operator\">-</span>Cookie<span class=\"token punctuation\">:</span> yummy_cookie<span class=\"token operator\">=</span>choco\n  Set<span class=\"token operator\">-</span>Cookie<span class=\"token punctuation\">:</span> tasty_cookie<span class=\"token operator\">=</span>strawberry</code></pre>\n<p>但是cookie所能储存的数据是有限的，而且在关闭或者跨域的情况下都是无法访问到的，我们聪明的程序发明者就研究了这一种可以userData保存数据的方式。</p>\n<h4 id=\"userData\"><a href=\"#userData\" class=\"headerlink\" title=\"userData\"></a>userData</h4><p>userData 是IE浏览器专有的数据储存。我们常用这种方式来兼容ie的老版浏览器，最低版本支持到IE5.0版本，最高到IE9以上。现在有H5基本兼容了更优的一些储存APi，这种用法基本快废弃了。<br>  当时他的出现是为了解决cookie的数据局限性。当浏览器关闭时，他的数据也是可以保留的。<br>  用户数据允许每个文档最多128KB数据，每个域名最多1MB数据。<br>  储存格式以xml的形式储存在客户端上。</p>\n<ul>\n<li>使用方式</li>\n</ul>\n<p>给div添加behavior属性（或者动态生成一个behavior的dom标签）</p>\n<pre class=\" language-css\"><code class=\"language-css\">  &lt;div style=<span class=\"token string\">\"behavior:url(#default#userData)\"</span> id=<span class=\"token string\">\"dataInfoStore\"</span>>&lt;/div></code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> dataStore <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"dataInfoStore\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">//使用setAttribute()方法保存数据 这是使用的是div的attr元素的道理</span>\n  dataStore<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oldBool\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">//使用save添加到自定义的变量名空间下</span>\n  dataStore<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>读取数据</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  dataStore<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listInfo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//load储存数据</span>\n  dataStore<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"oldBool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//获取key值</span></code></pre>\n<p>删除数据 </p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  dataStore<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listInfo\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//删除attr信息</span></code></pre>\n<h4 id=\"globalStorage\"><a href=\"#globalStorage\" class=\"headerlink\" title=\"globalStorage\"></a>globalStorage</h4><p>globalStorage也是H5比较老的一种储存方式，他是继userData之后出现的一种储存方式，一个域名下罪错可以储存5120k的数据，也可以跨页面读取。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  globalStorage<span class=\"token punctuation\">[</span><span class=\"token string\">'core.mokahr.com'</span><span class=\"token punctuation\">]</span> 所有core<span class=\"token punctuation\">.</span>mokahr<span class=\"token punctuation\">.</span>com下面的页面都可以使用这块空间\n  globalStorage<span class=\"token punctuation\">[</span><span class=\"token string\">'mokahr.com'</span><span class=\"token punctuation\">]</span> mokahr<span class=\"token punctuation\">.</span>com下面的页面都可以使用这块空间\n  globalStorage<span class=\"token punctuation\">[</span><span class=\"token string\">'com'</span><span class=\"token punctuation\">]</span>：所有com域名都可以 共享的使用这一块空间\n  globalStorage<span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span> ：所有页面都可以使用的空间</code></pre>\n<p>使用方法：</p>\n<ul>\n<li>设置<pre class=\" language-javascript\"><code class=\"language-javascript\">globalStorage<span class=\"token punctuation\">[</span><span class=\"token string\">\"mokahr.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>employName <span class=\"token operator\">=</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li>取值<pre class=\" language-javascript\"><code class=\"language-javascript\">globalStorage<span class=\"token punctuation\">[</span><span class=\"token string\">\"mokahr.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// 张三</span></code></pre>\n</li>\n<li>删除<pre class=\" language-javascript\"><code class=\"language-javascript\">globalStorage<span class=\"token punctuation\">[</span><span class=\"token string\">\"mokahr.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n</ul>\n<p>😊是不是和我们的sessionStorage/localStorage很像啊，其实接下来就发展成sessionStorage/localStorage的形式了。</p>\n<h4 id=\"sessionStorage-localStorage\"><a href=\"#sessionStorage-localStorage\" class=\"headerlink\" title=\"sessionStorage/localStorage\"></a>sessionStorage/localStorage</h4><p><code>sessionStorage</code>对象是存储特定于某个会话的数据，也就是数据只保存到浏览器关闭，这个对象就像会话cookie，也会在浏览器关后消失，存储在<code>sessionStorage</code>中的数据可以跨越页面刷新而存在。而<code>localStorage</code>的数据是永久性的，他不随着浏览器的关闭而清除。用这种方法我们可以储存一些需要保留的数据，希望下次打开后直接显示出来（比如用户的习惯行为）；<br>这两种是我们目前常用的储存数据的方式；</p>\n<p>支持<code>sessionStorage/localStorage</code>的浏览器最小版本：IE8、Chrome 5。所以现在主流的浏览器都支持这个写法，我们基本现在都用这种写法来实现会话数据的储存。最多储存5M数据。</p>\n<p>注意：<code>sessionStorage/localStorage</code> 的数据是可见的，一些敏感的数据不建议储存在这里。</p>\n<ul>\n<li><p>设值：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//  使用方法存储数据 json对象要使用JSON.Stringify()方法转换成文本格式</span>\nsessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userData\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"这是一个测试数据可以是json string\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//  使用属性存储数据</span>\nsessionStorage<span class=\"token punctuation\">.</span>userData <span class=\"token operator\">=</span> <span class=\"token string\">\"这是一个测试数据可以是json string\"</span><span class=\"token punctuation\">;</span>\nsessionStorage<span class=\"token punctuation\">[</span><span class=\"token string\">'userData'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"这是一个测试数据可以是json string\"</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>取值</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//通过getItem（）方法取值</span>\n<span class=\"token keyword\">const</span> userData <span class=\"token operator\">=</span> sessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userData'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//这里是key名</span>\n<span class=\"token comment\" spellcheck=\"true\">//通过属性取值</span>\n<span class=\"token keyword\">const</span> userData <span class=\"token operator\">=</span> sessionStorage<span class=\"token punctuation\">[</span><span class=\"token string\">'userData'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\" spellcheck=\"true\">//如果储存的是一个json字符串需要通过JSON.parse()来序列化成对象</span>\n<span class=\"token keyword\">const</span> JsonUserdata <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>userData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n</li>\n<li><p>删除属性</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//通过removeItem()来删除</span>\nsessionStorage<span class=\"token punctuation\">.</span><span class=\"token function\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'userData'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//移除userData属性的数据</span></code></pre>\n</li>\n</ul>\n<h4 id=\"IndexedDB\"><a href=\"#IndexedDB\" class=\"headerlink\" title=\"IndexedDB\"></a>IndexedDB</h4><p>官方解释：IndexedDB 是一种可以让你在用户的浏览器内持久化存储数据的方法。IndexedDB 为生成 Web Application 提供了丰富的查询能力，使我们的应用在在线和离线时都可以正常工作。</p>\n<p>IndexedDB兼容支持浏览器情况：<br>  fireFox: 50+;<br>  chrome: 57+;<br>  safari: 10+;<br>  opera: 45+</p>\n<p>查询支持情况：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>window<span class=\"token punctuation\">.</span>indexedDB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不支持\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n<p>具体使用：</p>\n<ul>\n<li>引入</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\" spellcheck=\"true\">// 打开我们的数据库</span>\n  <span class=\"token keyword\">var</span> MokaDataStore <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span>indexedDB<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mokaDataStore\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1200'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//储存空间和版本号</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 打开数据库成功后，自动调用onsuccess事件回调。</span>\n  MokaDataStore<span class=\"token punctuation\">.</span>onsuccess <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 打开数据库失败</span>\n  MokaDataStore<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>currentTarget<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\" spellcheck=\"true\">// 第一次打开成功后或者版本有变化自动执行以下事件：一般用于初始化数据库。</span>\n  MokaDataStore<span class=\"token punctuation\">.</span>onupgradeneeded <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> dv <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 获取到 demoDB对应的 MokaDataStore,也就是我们的数据库。</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>db<span class=\"token punctuation\">.</span>objectStoreNames<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span>employeeStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//如果表格不存在，创建一个新的表格（keyPath，主键 ； autoIncrement,是否自增），会返回一个对象（objectStore）</span>\n      <span class=\"token comment\" spellcheck=\"true\">// objectStore就相当于数据库中的一张表。IDBObjectStore类型。</span>\n      <span class=\"token keyword\">var</span> objectStore <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">createObjectStore</span><span class=\"token punctuation\">(</span>employeeStore<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        keyPath<span class=\"token punctuation\">:</span> <span class=\"token string\">'id'</span><span class=\"token punctuation\">,</span>\n        autoIncrement<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">//指定可以被索引的字段，unique字段是否唯一。类型： IDBIndex</span>\n      objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">'employeeId'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'employeeId'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        unique<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">createIndex</span><span class=\"token punctuation\">(</span><span class=\"token string\">'employeeName'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'employeeName'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        unique<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'数据库版本更改为： '</span> <span class=\"token operator\">+</span> dbVersion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>向数据库中增加数据</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> transaction <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span>employeeStore<span class=\"token punctuation\">,</span> <span class=\"token string\">\"readwrite\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">// 在所有数据添加完毕后的处理</span>\n  transaction<span class=\"token punctuation\">.</span>oncomplete <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"添加完成\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  transaction<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 错误处理！</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> objectStore <span class=\"token operator\">=</span> transaction<span class=\"token punctuation\">.</span><span class=\"token function\">objectStore</span><span class=\"token punctuation\">(</span>employeeStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> addEmployeeRequest <span class=\"token operator\">=</span> objectStore<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    employeeId<span class=\"token punctuation\">:</span> <span class=\"token number\">6758</span><span class=\"token punctuation\">,</span>\n    employeeName<span class=\"token punctuation\">:</span> <span class=\"token string\">'张三'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>transaction() 方法接受两个参数（一个是可选的）并返回一个事务对象。第一个参数是事务希望跨越的对象存储空间的列表。如果你希望事务能够跨越所有的对象存储空间你可以传入一个空数组，但请不要这样做，因为标准规定传入一个空数组会导致一个InvalidAccessError（可以使用属性db.objectStoreNames）。如果你没有为第二个参数指定任何内容，你得到的是只读事务。如果你想写入数据，你需要传入 “readwrite” 标识。</p>\n<ul>\n<li>从数据库中获取数据</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> transaction <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span>employeeStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> objectStore <span class=\"token operator\">=</span> transaction<span class=\"token punctuation\">.</span><span class=\"token function\">objectStore</span><span class=\"token punctuation\">(</span>employeeStore<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> objectStore<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">6758</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// IDBIndex</span>\n  request<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 错误处理!</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  request<span class=\"token punctuation\">.</span>onsuccess <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 对 request.result 做些操作！</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"employeeId === 6758的数据是\"</span> <span class=\"token operator\">+</span> request<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>从数据库中删除数据</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">transaction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"customers\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"readwrite\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token function\">objectStore</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"customers\"</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token number\">6758</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  request<span class=\"token punctuation\">.</span>onsuccess <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 删除employeeId是6758的数据成功！</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h3 id=\"浏览器储存\"><a href=\"#浏览器储存\" class=\"headerlink\" title=\"浏览器储存\"></a>浏览器储存</h3><p>1.在代码中我们为了提高性能会请求一次数据储存起来然后在相应的页面进行读取，而不是多次去请求这样是为了提高性能。<br>2.那么常用的浏览器端存储技术有哪些？在我们工作中会经常遇到需要前端来储存一些数据，除了react model等工具，浏览器也为我们提供来一些可用的储存，那么这些储存都有哪些特点，需要我们怎么注意呢，我们接下来就详细的看看具体的用法。<br>3.在未来客户端可能会和服务起一样有自己的数据库，提供各种数据的查询方式，提供各种API来提高查询性能。</p>\n<h3 id=\"常用的储存方式\"><a href=\"#常用的储存方式\" class=\"headerlink\" title=\"常用的储存方式\"></a>常用的储存方式</h3><ul>\n<li>cookie （也叫 Web Cookie 或浏览器 Cookie） </li>\n<li>userData  比较早历史</li>\n<li>globalStorage  历史</li>\n<li>sessionStorage/localStorage  主流</li>\n<li>IndexedDB  主流或未来主流</li>\n</ul>\n<h4 id=\"cookie\"><a href=\"#cookie\" class=\"headerlink\" title=\"cookie\"></a>cookie</h4><ul>\n<li>以下是cookie的官方解释、</li>\n</ul>\n<pre><code class=\"javascript\">HTTP Cookie（也叫 Web Cookie 或浏览器 Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie 使基于无状态的HTTP协议记录稳定的状态信息成为了可能。\n\nCookie 主要用于以下三个方面：\n\n会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\n个性化设置（如用户自定义设置、主题等）\n浏览器行为跟踪（如跟踪分析用户行为等）</code></pre>\n<ul>\n<li>用法：</li>\n</ul>\n<p>用来设置http请求的一些规定，但已目前前端来说，更多的是储存用户的登录信息，和后端接口保持通信。</p>\n<ul>\n<li>简单的demo</li>\n</ul>\n<pre><code class=\"javascript\">  Set-Cookie: &lt;cookie名&gt;=&lt;cookie值&gt;</code></pre>\n<p>服务器通过该头部告知客户端保存 Cookie 信息。</p>\n<pre><code class=\"javascript\">  HTTP/1.0 200 OK\n  Content-type: text/html\n  Set-Cookie: yummy_cookie=choco\n  Set-Cookie: tasty_cookie=strawberry</code></pre>\n<p>但是cookie所能储存的数据是有限的，而且在关闭或者跨域的情况下都是无法访问到的，我们聪明的程序发明者就研究了这一种可以userData保存数据的方式。</p>\n<h4 id=\"userData\"><a href=\"#userData\" class=\"headerlink\" title=\"userData\"></a>userData</h4><p>userData 是IE浏览器专有的数据储存。我们常用这种方式来兼容ie的老版浏览器，最低版本支持到IE5.0版本，最高到IE9以上。现在有H5基本兼容了更优的一些储存APi，这种用法基本快废弃了。<br>  当时他的出现是为了解决cookie的数据局限性。当浏览器关闭时，他的数据也是可以保留的。<br>  用户数据允许每个文档最多128KB数据，每个域名最多1MB数据。<br>  储存格式以xml的形式储存在客户端上。</p>\n<ul>\n<li>使用方式</li>\n</ul>\n<p>给div添加behavior属性（或者动态生成一个behavior的dom标签）</p>\n<pre><code class=\"css\">  &lt;div style=&quot;behavior:url(#default#userData)&quot; id=&quot;dataInfoStore&quot;&gt;&lt;/div&gt;</code></pre>\n<pre><code class=\"javascript\">  var dataStore = document.getElementById(&quot;dataInfoStore&quot;);\n  //使用setAttribute()方法保存数据 这是使用的是div的attr元素的道理\n  dataStore.setAttribute(&quot;oldBool&quot;, &quot;true&quot;);\n  //使用save添加到自定义的变量名空间下\n  dataStore.save(&quot;listInfo&quot;);</code></pre>\n<p>读取数据</p>\n<pre><code class=\"javascript\">  dataStore.load(&quot;listInfo&quot;); //load储存数据\n  dataStore.getAttribute(&quot;oldBool&quot;); //获取key值</code></pre>\n<p>删除数据 </p>\n<pre><code class=\"javascript\">  dataStore.removeAttribute(&quot;listInfo&quot;) //删除attr信息</code></pre>\n<h4 id=\"globalStorage\"><a href=\"#globalStorage\" class=\"headerlink\" title=\"globalStorage\"></a>globalStorage</h4><p>globalStorage也是H5比较老的一种储存方式，他是继userData之后出现的一种储存方式，一个域名下罪错可以储存5120k的数据，也可以跨页面读取。</p>\n<pre><code class=\"javascript\">  globalStorage[&#39;core.mokahr.com&#39;] 所有core.mokahr.com下面的页面都可以使用这块空间\n  globalStorage[&#39;mokahr.com&#39;] mokahr.com下面的页面都可以使用这块空间\n  globalStorage[&#39;com&#39;]：所有com域名都可以 共享的使用这一块空间\n  globalStorage[&#39;&#39;] ：所有页面都可以使用的空间</code></pre>\n<p>使用方法：</p>\n<ul>\n<li>设置<pre><code class=\"javascript\">globalStorage[&quot;mokahr.com&quot;].employName = &#39;张三&#39;;</code></pre>\n</li>\n<li>取值<pre><code class=\"javascript\">globalStorage[&quot;mokahr.com&quot;].getItem(&quot;employName&quot;);\n// 张三</code></pre>\n</li>\n<li>删除<pre><code class=\"javascript\">globalStorage[&quot;mokahr.com&quot;].removeItem(&quot;employName&quot;);</code></pre>\n</li>\n</ul>\n<p>😊是不是和我们的sessionStorage/localStorage很像啊，其实接下来就发展成sessionStorage/localStorage的形式了。</p>\n<h4 id=\"sessionStorage-localStorage\"><a href=\"#sessionStorage-localStorage\" class=\"headerlink\" title=\"sessionStorage/localStorage\"></a>sessionStorage/localStorage</h4><p><code>sessionStorage</code>对象是存储特定于某个会话的数据，也就是数据只保存到浏览器关闭，这个对象就像会话cookie，也会在浏览器关后消失，存储在<code>sessionStorage</code>中的数据可以跨越页面刷新而存在。而<code>localStorage</code>的数据是永久性的，他不随着浏览器的关闭而清除。用这种方法我们可以储存一些需要保留的数据，希望下次打开后直接显示出来（比如用户的习惯行为）；<br>这两种是我们目前常用的储存数据的方式；</p>\n<p>支持<code>sessionStorage/localStorage</code>的浏览器最小版本：IE8、Chrome 5。所以现在主流的浏览器都支持这个写法，我们基本现在都用这种写法来实现会话数据的储存。最多储存5M数据。</p>\n<p>注意：<code>sessionStorage/localStorage</code> 的数据是可见的，一些敏感的数据不建议储存在这里。</p>\n<ul>\n<li><p>设值：</p>\n<pre><code class=\"javascript\">//  使用方法存储数据 json对象要使用JSON.Stringify()方法转换成文本格式\nsessionStorage.setItem(&quot;userData&quot;, &quot;这是一个测试数据可以是json string&quot;);\n//  使用属性存储数据\nsessionStorage.userData = &quot;这是一个测试数据可以是json string&quot;;\nsessionStorage[&#39;userData&#39;] = &quot;这是一个测试数据可以是json string&quot;;</code></pre>\n</li>\n<li><p>取值</p>\n<pre><code class=\"javascript\">//通过getItem（）方法取值\nconst userData = sessionStorage.getItem(&#39;userData&#39;); //这里是key名\n//通过属性取值\nconst userData = sessionStorage[&#39;userData&#39;]; \n\n//如果储存的是一个json字符串需要通过JSON.parse()来序列化成对象\nconst JsonUserdata = JSON.parse(userData);</code></pre>\n</li>\n<li><p>删除属性</p>\n<pre><code class=\"javascript\">//通过removeItem()来删除\nsessionStorage.removeItem(&#39;userData&#39;);//移除userData属性的数据</code></pre>\n</li>\n</ul>\n<h4 id=\"IndexedDB\"><a href=\"#IndexedDB\" class=\"headerlink\" title=\"IndexedDB\"></a>IndexedDB</h4><p>官方解释：IndexedDB 是一种可以让你在用户的浏览器内持久化存储数据的方法。IndexedDB 为生成 Web Application 提供了丰富的查询能力，使我们的应用在在线和离线时都可以正常工作。</p>\n<p>IndexedDB兼容支持浏览器情况：<br>  fireFox: 50+;<br>  chrome: 57+;<br>  safari: 10+;<br>  opera: 45+</p>\n<p>查询支持情况：</p>\n<pre><code class=\"javascript\">  if (!window.indexedDB) {\n    window.alert(&quot;不支持&quot;)\n  }</code></pre>\n<p>具体使用：</p>\n<ul>\n<li>引入</li>\n</ul>\n<pre><code class=\"javascript\">  // 打开我们的数据库\n  var MokaDataStore = window.indexedDB.open(&quot;mokaDataStore&quot;,&#39;1200&#39;);//储存空间和版本号\n  // 打开数据库成功后，自动调用onsuccess事件回调。\n  MokaDataStore.onsuccess = function(e) {};\n\n  // 打开数据库失败\n  MokaDataStore.onerror = function(e) {\n    console.log(e.currentTarget.error.message);\n  };\n\n  // 第一次打开成功后或者版本有变化自动执行以下事件：一般用于初始化数据库。\n  MokaDataStore.onupgradeneeded = function(e) {\n    let dv = e.target.result; // 获取到 demoDB对应的 MokaDataStore,也就是我们的数据库。\n\n    if (!db.objectStoreNames.contains(employeeStore)) {\n      //如果表格不存在，创建一个新的表格（keyPath，主键 ； autoIncrement,是否自增），会返回一个对象（objectStore）\n      // objectStore就相当于数据库中的一张表。IDBObjectStore类型。\n      var objectStore = db.createObjectStore(employeeStore, {\n        keyPath: &#39;id&#39;,\n        autoIncrement: true\n      });\n\n      //指定可以被索引的字段，unique字段是否唯一。类型： IDBIndex\n      objectStore.createIndex(&#39;employeeId&#39;, &#39;employeeId&#39;, {\n        unique: true\n      });\n      objectStore.createIndex(&#39;employeeName&#39;, &#39;employeeName&#39;, {\n        unique: false\n      });\n    }\n    console.log(&#39;数据库版本更改为： &#39; + dbVersion);\n  };</code></pre>\n<ul>\n<li>向数据库中增加数据</li>\n</ul>\n<pre><code class=\"javascript\">  var transaction = db.transaction(employeeStore, &quot;readwrite&quot;);\n  // 在所有数据添加完毕后的处理\n  transaction.oncomplete = function(event) {\n    alert(&quot;添加完成&quot;);\n  };\n\n  transaction.onerror = function(event) {\n    // 错误处理！\n  };\n\n  var objectStore = transaction.objectStore(employeeStore);\n  var addEmployeeRequest = objectStore.add({\n    employeeId: 6758,\n    employeeName: &#39;张三&#39;,\n  });\n</code></pre>\n<p>transaction() 方法接受两个参数（一个是可选的）并返回一个事务对象。第一个参数是事务希望跨越的对象存储空间的列表。如果你希望事务能够跨越所有的对象存储空间你可以传入一个空数组，但请不要这样做，因为标准规定传入一个空数组会导致一个InvalidAccessError（可以使用属性db.objectStoreNames）。如果你没有为第二个参数指定任何内容，你得到的是只读事务。如果你想写入数据，你需要传入 “readwrite” 标识。</p>\n<ul>\n<li>从数据库中获取数据</li>\n</ul>\n<pre><code class=\"javascript\">  var transaction = db.transaction(employeeStore);\n  var objectStore = transaction.objectStore(employeeStore);\n  var request = objectStore.get(6758); // IDBIndex\n  request.onerror = function(event) {\n    // 错误处理!\n  };\n  request.onsuccess = function(event) {\n    // 对 request.result 做些操作！\n    alert(&quot;employeeId === 6758的数据是&quot; + request.result.name);\n  };</code></pre>\n<ul>\n<li>从数据库中删除数据</li>\n</ul>\n<pre><code class=\"javascript\">  var request = db.transaction([&quot;customers&quot;], &quot;readwrite&quot;)\n                  .objectStore(&quot;customers&quot;)\n                  .delete(6758);\n  request.onsuccess = function(event) {\n    // 删除employeeId是6758的数据成功！\n  };</code></pre>\n"},{"title":"论坛评论@功能","date":"2020-04-26T03:59:22.000Z","img":"http://ww1.sinaimg.cn/large/987eaf20ly1geanhftcmlj20dw09040x.jpg","top":false,"cover":true,"coverImg":"http://ww1.sinaimg.cn/large/987eaf20ly1geanhftcmlj20dw09040x.jpg","toc":true,"mathjax":false,"summary":"通用评论中输入@符号后可以调出人员名单进行@某人，本文使用原生dom操作，不借助任何库或第三方框架","_content":"\n# 页面@功能实现\n\n本文demo： [gitHub地址](https://github.com/duanweiqiang/atPerson \"gitHub\")\n\n需要用到的知识：\n\n### 1.将div设置成可输入状态 \n- contentEditable 属性用于设置或返回元素的内容是否可编辑。\n- 这样就可以在div中使用标签来表示@中的人（只是为了可以在输入框中使用标签）\n\n```html\n<div contentEditable=\"true\"\n    id=\"textArea\"\n    onInput={this.onChangeAtPerson} \n    className={style.testArea}\n    placeholder=\"请输入评论，可以@其他人\"\n    />\n</div>\n```\n\n### 2.创建range 对象\n- 用来控制光标是否可以进入@的dom\n\n```javascript\n    const range = document.createRange();\n```\n\n### 3.操作range对象\n- 用来控制光标是否可以进入@的dom\n\n**选择节点**\n\n`selectNode()` :选择整个节点，包括子节点\n\n`selectNodeContents()`  选择节点的子节点\n\n- example:\n    ```html\n    <!-- html -->\n    <p id=\"p1\">\n        <b>Hello</b> \n        world!\n    </p>\n    ```\n    ```javascript\n    var range1 = document.createRange(),\n        range2 = document.createRange(),\n        p1 = document.getElementById(\"p1\");\n    range1.selectNode(p1); //<p id=\"p1\"><b>Hello</b> world!</p>\n    range2.selectNodeContents(p1); //<b>Hello</b> world!\n    ```\n\n`setStart()`、`setEnd()`：这里选择节点和鼠标选中一样，这个是自动选中\n\n>方法都接受两个参数：一个参照节点，一个节点偏移量\n\n- example\n    ```html\n    <!-- html -->\n    <p id=\"p1\">Hello world!</p> \n    ```\n    ```javascript\n    //js\n    range = document.createRange();\n    p1 = document.getElementById(\"p1\").childNodes[0];\n    range.setStart(p1,2);\n    range.setEnd(p1,8);\n    //选中的将会是 llo wo（注意！以0为基数，空格也算一个文本字符，占1个偏移量）\n    ```\n\n**操作节点**\n\n`deleteContents()`: 这个方法能够从文档中删除范围缩包含的内容\n\n`extractContents()`: 会删除并返回文档片段\n\n`CloneContents()`: 创建范围对象的一个副本，不会影响原来的节点\n>复制 DOM 范围  ： 可以使用 cloneRange()方法复制范围。这个方法会创建调用它的范围的一个副本。\n>`var newRange = range.cloneRange();`\n\n`insertNode()`: 向范围选区的开始处插入一个节点\n\n`surroundContents()`: 环绕范围插入内容 \n\n在使用完范围之后，最好是调用 `detach()` 方法，以便从创建范围的文档中分离出该范围。调用\n`detach()`之后，就可以放心地解除对范围的引用，从而让垃圾回收机制回收其内存了。来看下面的\n例子\n\n`range.detach();` //从文档中分离\n`range = null;` //解除引用\n推荐在使用范围的最后再执行这两个步骤。一旦分离范围，就不能再恢复使用了。\n\n### 4.Selection 对象\n\n- 这是一个window对象\n- 返回一个 `Selection` 对象，表示用户选择的文本范围或光标的当前位置。\n- 这里使用它来获取当前光标所处的dom\n\n用法:\n\n```javascript\n    const selection = window.getSelection() ;//非react使用\n    const selection = document.getSelection();\n    this.anchorNode = selection.anchorNode;//获取当前贯标所在位置的dom（使用anchorNode子方法）\n```\n\n### 5.dom中设置@人员的演示\n\n- 本文通过`<span>`标签来实现\n\n```html\n    <span \n        style=\"background-color:#F4F4F6;padding: 3px 5px;border-radius: 3px;\" \n        id=${item.id} name=${item.name}> //react方法\n        @${item.name}\n    </span>\n```\n\n### 6.通过selection来替换原来的@字符\n\n>1.先获取当前光标的位置\n>2.再获取当前输入框的dom\n>3.分析dom里的结构\n>4.将dom中的光标位置的@替换成`atPresonDom`中的结构\n>5.将生成的`reasonDom`插入到dom中\n>6.再将光标置于当前替换的`<span>`标签之后\n\n```javascript\nselectPerson = item => {\n    const anchorNode = this.anchorNode;\n    const selectStartIndex = this.selectStartIndex;\n    const atPresonDom = `&nbsp;<span style=\"background-color:#F4F4F6;padding: 3px 5px;border-radius: 3px;\" id=${item.id} name=${item.name}>@${item.name}</span>&nbsp;`;\n    let reasonDom = '';\n    const range = document.createRange();\n    let targetDomIndex = 0;\n    [...textDom.childNodes].forEach((each, index) => {\n      if (each.nodeName === 'SPAN') {\n        reasonDom += each.outerHTML;\n      } else if (anchorNode === each) {\n        targetDomIndex = index;\n        const tempEachDom = each;\n        const dom1 = tempEachDom.data.substring(0, selectStartIndex - 1);\n        const dom2 = atPresonDom;\n        const dom3 = tempEachDom.data.substring(\n          selectStartIndex + this.selectText.length,\n          each.data.length,\n        );\n        reasonDom += dom1 + dom2 + dom3;\n      } else {\n        reasonDom += each.data;\n      }\n    });\n    textDom.innerHTML = reasonDom;//插入dom\n    const textDomChildList = [...textDom.childNodes];\n    const textDomLastIndex =\n      textDomChildList.length - 1 > -1 ? textDomChildList.length - 1 : 0;\n    const targetIndex =\n      targetDomIndex + 2 > textDomLastIndex\n        ? textDomLastIndex\n        : targetDomIndex + 2;\n    const targetAnchorNode = textDomChildList[targetIndex];\n    const selection = document.getSelection();\n    range.setStart(targetAnchorNode, 1);\n    range.setEnd(targetAnchorNode, 1);\n    selection.removeAllRanges();\n    selection.addRange(range);\n    this.selectText = '';\n    this.setState({ personDataList: [] });\n    this.selectStartIndex = -1;\n};\n```\n\n### 7.键盘控制选中(后边附录键盘事件)\n\n- 通过键盘来控制循环选中下拉人员列表\n- 键盘控制删除整体模块\n- 键盘控制光标进入空能\n\n```javascript\nkeydownEvent = e => {//键盘事件\n    if (e.keyCode === 8) {\n      const selection = document.getSelection();\n      this.anchorNode = selection.anchorNode;\n      const range = selection.getRangeAt(0);\n\n      // 删除@模块\n      if (selection.focusNode.parentNode.nodeName === 'SPAN') {\n        textDom?.removeChild(range.startContainer.parentElement);\n      }\n    }\n    if ([38, 40].indexOf(e.keyCode) > -1) {\n      //up&down\n      const { personDataList, curSelectItem } = this.state;\n      personDataList.length > 0 && e.preventDefault(); //有下拉是阻止冒泡\n      let targetIndex = 0;\n      personDataList.forEach((item, index) => {\n        targetIndex = item.id === curSelectItem.id ? index : targetIndex;\n      });\n      if (e.keyCode === 40) { //down\n        targetIndex = targetIndex === personDataList.length - 1 ? 0 : targetIndex + 1;\n      }\n      if (e.keyCode === 38) { //up\n        targetIndex = targetIndex === 0 ? personDataList.length - 1 : targetIndex - 1;\n      }\n      this.setState({ curSelectItem: personDataList[targetIndex] });\n    }\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const { curSelectItem } = this.state;\n      curSelectItem && this.selectPerson(curSelectItem);\n      this.setState({ curSelectItem: null });\n    }\n  };\n```\n\n### 8.当光标删除到整体模块处理\n\n当光标识别到进入@整体模块时，需要整体删除\n\n这里使用的时`<span>`标签来表示的\n\n```javascript\nif (selection.focusNode.parentNode.nodeName === 'SPAN') {\n    //不允许编辑@人员\n    textDom?.removeChild(selection.focusNode.parentNode);\n    this.setState({ personDataList: [] });\n    this.selectStartIndex = -1;\n}\n```\n\n### 9.效果图\n\n![demo2.png](http://ww1.sinaimg.cn/large/987eaf20gy1ge7m81xiq0j21dq0m8n17.jpg)\n\n# 附：js键盘事件全面控制详解\n\n主要分四个部分\n第一部分：浏览器的按键事件\n第二部分：兼容浏览器\n第三部分：代码实现和优化\n第四部分：总结\n\n## 第一部分：浏览器的按键事件\n\n1.用js实现键盘记录，要关注浏览器的三种按键事件类型，即`keydown`，`keypress`和`keyup`，它们分别对应`onkeydown`、`onkeypress`和`onkeyup`这三个事件句柄。一个典型的按键会产生所有这三种事件，依次是`keydown`，`keypress`，然后是按键释放时候的`keyup`。\n\n2.在这3种事件类型中，`keydown`和`keyup`比较底层，而`keypress`比较高级。这里所谓的高级是指，当用户按下`shift + 1`时，`keypress`是对这个按键事件进行解析后返回一个可打印的“!”字符，而`keydown`和`keyup`只是记录了`shift + 1`这个事件。\n\n3.但是`keypress`只能针对一些可以打印出来的字符有效，而对于功能按键，如`F1-F12`、`Backspace`、`Enter`、`Escape`、`PageUP`、`PageDown`和箭头方向等，就不会产生`keypress`事件，但是可以产生`keydown`和`keyup`事件。然而在FireFox中，功能按键是可以产生`keypress`事件的。\n\n4.传递给`keydown`、`keypress`和`keyup`事件句柄的事件对象有一些通用的属性。如果`Alt`、`Ctrl`或`Shift`和一个按键一起按下，这通过事件的`altKey`、`ctrlKey`和`shiftKey`属性表示，这些属性在FireFox和IE中是通用的。\n\n## 第二部分：兼容浏览器\n\n- 凡是涉及浏览器的js，就都要考虑浏览器兼容的问题。\n- 目前常用的浏览器主要有基于IE和基于Mozilla两大类。Maxthon是基于IE内核的，而FireFox和Opera是基于Mozilla内核的。\n\n### 2.1 事件的初始化\n\n首先需要了解的是如何初始化该事件，基本语句如下：\n\n```javascript\n    function keyDown(){}\n    document.onkeydown = keyDown;\n```\n\n***react 绑定***\n\n```javascript\n    //直接绑定在原生事件上，这个一般是用来捕捉编辑的时候的事件，用的不多\n    <textarea onKeyDown={e=> console.log( e.keyCode ) } />\n    //通过声明周期直接绑定到document的事件上，这个方式一般用来做快捷键比较多\n    export class KeyBind extends React.Component {\n        componentDidMount(){\n            document.addEventListener(\"keydown\", this.onKeyDown)\n        }\n\n        componentWillUnmount(){\n            document.removeEventListener(\"keydown\", this.onKeyDown)\n        }\n\n        onKeyDown = (e) => {\n            switch( e.keyCode) {\n            case 13://回车事件\n                break\n            }\n        }\n    }\n```\n\n当浏览器读到这个语句时，无论按下键盘上的哪个键，都将呼叫KeyDown()函数。\n\n### 2.2 FireFox和Opera的实现方法\n\nFireFox和Opera等程序实现要比IE麻烦，所以这里先描述一下。\n\n`keyDown()`函数有一个隐藏的变量--一般的，我们使用字母“e”来表示这个变量。  \n\n```javascript\n    function keyDown(e)  \n```\n\n变量e表示发生击键事件，寻找是哪个键被按下，要使用which这个属性：  \n\n```javascript\n    e.which  \n```\n\n`e.which`将给出该键的索引值，把索引值转化成该键的字母或数字值的方法需要用到静态函数`String.fromCharCode()`，如下： \n\n```javascript\n    String.fromCharCode(e.which)\n```\n\n把上面的语句放在一起，我们可以在FireFox中得到被按下的是哪一个键：  \n\n```javascript\n    function keyDown(e) {  \n        var keycode = e.which;  \n        var realkey = String.fromCharCode(e.which);  \n    　　alert(\"按键码: \" + keycode + \" 字符: \" + realkey);  \n    }\n    document.onkeydown = keyDown;\n```\n\n### 2.3 IE的实现方法\n\nIE的程序不需要e变量，用`window.event.keyCode`来代替`e.which`，把键的索引值转化为真实键值方法类似：`String.fromCharCode(event.keyCode)`，程序如下：\n\n```javascript\n    function keyDown() {  \n        var keycode = event.keyCode;  \n        var realkey = String.fromCharCode(event.keyCode);  \n        alert(\"按键码: \" + keycode + \" 字符: \" + realkey);  \n    }  \n    document.onkeydown = keyDown;\n```\n\n### 2.4 判断浏览器类型\n\n上面了解了在各种浏览器里是如何实现获取按键事件对象的方法，那么下面需要判断浏览器类型，这个方法很多，有比较方便理解的，也有很巧妙的办法，先说一般的方法：就是利用`navigator`对象的`appName属性`，当然也可以用`userAgent`属性，这里用`appName`来实现判断浏览器类型，IE和Maxthon的appName是“Microsoft Internet Explorer” ,而FireFox和Opera的appName是“Netscape”，所以一个功能比较简单的代码如下：\n\n```javascript\n    function keyUp(e) {   \n        if(navigator.appName == \"Microsoft Internet Explorer\"){\n            var keycode = event.keyCode;  \n            var realkey = String.fromCharCode(event.keyCode);  \n        }else{\n            var keycode = e.which;  \n            var realkey = String.fromCharCode(e.which);  \n        }\n        alert(\"按键码: \" + keycode + \" 字符: \" + realkey);\n    }\n    document.onkeyup = keyUp;\n```\n\n比较简洁的方法是：\n\n```javascript\n    function keyUp(e) {\n        var currKey=0, e=e||event;\n        currKey=e.keyCode||e.which||e.charCode;\n        var keyName = String.fromCharCode(currKey);\n        alert(\"按键码: \" + currKey + \" 字符: \" + keyName);\n    }\n    document.onkeyup = keyUp;\n```\n\n上面这种方法比较巧妙，简单地解释一下：\n\n> 首先，e=e||event;这句代码是为了进行浏览器事件对象获取的兼容。js中这句代码的意思是，如果在FireFox或Opera中，隐藏的变量e是存在的，那么e||event返回e，如果在IE中，隐藏变量e是不存在，则返回event。\n> 其次，`currKey=e.keyCode||e.which||e.charCode`;这句是为了兼容浏览器按键事件对象的按键码属性（详见第三部分），如IE中，只有keyCode属性，而FireFox中有which和charCode属性，Opera中有keyCode和which属性等。\n> 上述代码只是兼容了浏览器，获取了keyup事件对象，简单的弹出了按键码和按键的字符，但是问题出现了，当你按键时，字符键都是大写的，而按shift键时，显示的字符很奇怪，所以就需要优化一下代码了。\n\n## 第三部分：代码实现和优化\n\n### 3.1 按键事件的按键码和字符码\n\n在IE中，只有一个`keyCode`属性，并且它的解释取决于事件类型。对于`keydown`来说，`keyCode`存储的是按键码，对于 `keypress`事件来说，`keyCode`存储的是一个字符码。而IE中没有`which`和`charCode`属性，所以`which和charCode`属性始终为`undefined`。\n\nFireFox中keyCode始终为0，时间`keydown`/`keyup`时，`charCode`=0，which为按键码。事件`keypress`时，which和charCode二者的值相同，存储了字符码。\n\n在Opera中，`keyCode`和`which`二者的值始终相同，在`keydown/keyup`事件中，它们存储按键码，在`keypress`时间中，它们存储字符码，而charCode没有定义，始终是undefined。\n\n### 3.2 用keydown/keyup还是keypress\n\n第一部分已经介绍了`keydown/keyup`和`keypress`的区别，有一条比较通用的规则，`keydown`事件对于功能按键来说是最有用的，而`keypress`事件对于可打印按键来说是最有用的。\n\n键盘记录主要是针对于可打印字符和部分功能按键，所以`keypress`是首选，然而正如第一部分提到的，IE中`keypress`不支持功能按键，所以应该用`keydown/keyup`事件来进行补充。\n\n### 3.3 代码的实现\n总体思路，用keypress事件对象获取按键字符，用keydown事件获取功能字符，如`Enter`，`Backspace`等。\n\n代码实现如下所示\n\n``` javascript\n!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0Transitional//EN\">\n<html>\n<head>\n    <title>js 按键记录</title>\n    <meta name=\"Generator\" CONTENT=\"EditPlus\">\n    <meta name=\"Author\" CONTENT=\"Duke\">\n    <meta name=\"Keywords\" CONTENT=\"js 按键记录\">\n    <meta name=\"Description\" CONTENT=\"js 按键 记录\">\n</head>\n<script type=\"text/javascript\">\n    var keystring = \"\";//记录按键的字符串\n    \n    function $(s){\n        return document.getElementByIdx_x(s)?document.getElementByIdx_x(s):s;\n    }\n    \n    function keypress(e){\n        var currKey=0,CapsLock=0,e=e||event;\n　      currKey=e.keyCode||e.which||e.charCode;\n　      CapsLock=currKey>=65&&currKey<=90;\n　      \n　      switch(currKey){//屏蔽了退格、制表、回车、空格、方向键、删除键\n            case 8: \n            case 9: \n            case 13: \n            case 32: \n            case 37: \n            case 38: \n            case 39: \n            case 40: \n            case 46:\n                keyName = \"\";\n                break;\n            default:\n                keyName = String.fromCharCode(currKey); break;\n        }\n        keystring += keyName;\n    }\n    \n    function keydown(e){\n        var e=e||event;\n        var currKey=e.keyCode||e.which||e.charCode;\n        if((currKey>7&&currKey<14)||(currKey>31&&currKey<47)){\n            switch(currKey) {\n                case 8: keyName = \"[退格]\"; break;\n                case 9: keyName = \"[制表]\"; break;\n                case 13:keyName = \"[回车]\"; break;\n                case 32:keyName = \"[空格]\"; break;\n                case 33:keyName = \"[PageUp]\"; break;\n                case 34:keyName = \"[PageDown]\"; break;\n                case 35:keyName = \"[End]\"; break;\n                case 36:keyName = \"[Home]\"; break;\n                case 37:keyName = \"[方向键左]\"; break;\n                case 38:keyName = \"[方向键上]\"; break;\n                case 39:keyName = \"[方向键右]\";break;\n                case 40:keyName = \"[方向键下]\";break;\n                case 46:keyName = \"[删除]\";break;\n                default:keyName = \"\";break;\n            }\n            keystring += keyName;\n        }\n        $(\"content\").innerHTML=keystring;\n    }\n    \n    function keyup(e){\n        $(\"content\").innerHTML=keystring;\n    }\n    document.onkeypress=keypress;\n    document.onkeydown =keydown;\n    document.onkeyup =keyup;\n</script>\n<body>\n    <input type=\"text\" />\n    <input type=\"button\" value=\"清空记录\" onclick=\"$('content').innerHTML = '';keystring = '';\"/>\n    <br/>请按下任意键查看键盘响应键值：<span id=\"content\"></span>\n</body>\n</html>\n```\n\n代码分析：\n`$()`：根据ID获取dom\n`keypress(e)`：实现对字符码的截获，由于功能按键要用keydown获取，所以在keypress中屏蔽了这些功能按键。\n`keydown(e)`：主要是实现了对功能按键的获取。\n`keyup(e)`：展示截获的字符串。\n\n代码基本上就算实现完成了！呵呵\n\n## 第四部分：总结\n1.H5端键盘keyCode有部分缺失，使用是要特别注意一下\n2.编写代码的最初目的是能够通过js记录按键，并返回一个字符串。\n\n上述代码只是用js实现了基本的英文按键记录，对于汉字是无能为力，记录汉字，我能想到的办法，当然是用js，是用keydown和keyup记录底层按键事件，汉字解析当然无能为力。当然你可以用DOM的方式直接获取input中的汉字，但这已经离开了本文讨论的用按键事件实现按键记录的本意。\n\n\n本文demo： [gitHub地址](https://github.com/duanweiqiang/atPerson \"gitHub\")\n\n>上述代码还可以实现添加剪切板的功能，监控删除的功能等等。。。\n","source":"_posts/atPerson.md","raw":"---\ntitle: 论坛评论@功能\ndate: 2020-04-26 11:59:22\nimg: http://ww1.sinaimg.cn/large/987eaf20ly1geanhftcmlj20dw09040x.jpg\ntop: false\ncover: true\ncoverImg: http://ww1.sinaimg.cn/large/987eaf20ly1geanhftcmlj20dw09040x.jpg\ntoc: true\nmathjax: false\nsummary: 通用评论中输入@符号后可以调出人员名单进行@某人，本文使用原生dom操作，不借助任何库或第三方框架\ncategories: 前端\ntags:\n- React\n- keyEvent\n---\n\n# 页面@功能实现\n\n本文demo： [gitHub地址](https://github.com/duanweiqiang/atPerson \"gitHub\")\n\n需要用到的知识：\n\n### 1.将div设置成可输入状态 \n- contentEditable 属性用于设置或返回元素的内容是否可编辑。\n- 这样就可以在div中使用标签来表示@中的人（只是为了可以在输入框中使用标签）\n\n```html\n<div contentEditable=\"true\"\n    id=\"textArea\"\n    onInput={this.onChangeAtPerson} \n    className={style.testArea}\n    placeholder=\"请输入评论，可以@其他人\"\n    />\n</div>\n```\n\n### 2.创建range 对象\n- 用来控制光标是否可以进入@的dom\n\n```javascript\n    const range = document.createRange();\n```\n\n### 3.操作range对象\n- 用来控制光标是否可以进入@的dom\n\n**选择节点**\n\n`selectNode()` :选择整个节点，包括子节点\n\n`selectNodeContents()`  选择节点的子节点\n\n- example:\n    ```html\n    <!-- html -->\n    <p id=\"p1\">\n        <b>Hello</b> \n        world!\n    </p>\n    ```\n    ```javascript\n    var range1 = document.createRange(),\n        range2 = document.createRange(),\n        p1 = document.getElementById(\"p1\");\n    range1.selectNode(p1); //<p id=\"p1\"><b>Hello</b> world!</p>\n    range2.selectNodeContents(p1); //<b>Hello</b> world!\n    ```\n\n`setStart()`、`setEnd()`：这里选择节点和鼠标选中一样，这个是自动选中\n\n>方法都接受两个参数：一个参照节点，一个节点偏移量\n\n- example\n    ```html\n    <!-- html -->\n    <p id=\"p1\">Hello world!</p> \n    ```\n    ```javascript\n    //js\n    range = document.createRange();\n    p1 = document.getElementById(\"p1\").childNodes[0];\n    range.setStart(p1,2);\n    range.setEnd(p1,8);\n    //选中的将会是 llo wo（注意！以0为基数，空格也算一个文本字符，占1个偏移量）\n    ```\n\n**操作节点**\n\n`deleteContents()`: 这个方法能够从文档中删除范围缩包含的内容\n\n`extractContents()`: 会删除并返回文档片段\n\n`CloneContents()`: 创建范围对象的一个副本，不会影响原来的节点\n>复制 DOM 范围  ： 可以使用 cloneRange()方法复制范围。这个方法会创建调用它的范围的一个副本。\n>`var newRange = range.cloneRange();`\n\n`insertNode()`: 向范围选区的开始处插入一个节点\n\n`surroundContents()`: 环绕范围插入内容 \n\n在使用完范围之后，最好是调用 `detach()` 方法，以便从创建范围的文档中分离出该范围。调用\n`detach()`之后，就可以放心地解除对范围的引用，从而让垃圾回收机制回收其内存了。来看下面的\n例子\n\n`range.detach();` //从文档中分离\n`range = null;` //解除引用\n推荐在使用范围的最后再执行这两个步骤。一旦分离范围，就不能再恢复使用了。\n\n### 4.Selection 对象\n\n- 这是一个window对象\n- 返回一个 `Selection` 对象，表示用户选择的文本范围或光标的当前位置。\n- 这里使用它来获取当前光标所处的dom\n\n用法:\n\n```javascript\n    const selection = window.getSelection() ;//非react使用\n    const selection = document.getSelection();\n    this.anchorNode = selection.anchorNode;//获取当前贯标所在位置的dom（使用anchorNode子方法）\n```\n\n### 5.dom中设置@人员的演示\n\n- 本文通过`<span>`标签来实现\n\n```html\n    <span \n        style=\"background-color:#F4F4F6;padding: 3px 5px;border-radius: 3px;\" \n        id=${item.id} name=${item.name}> //react方法\n        @${item.name}\n    </span>\n```\n\n### 6.通过selection来替换原来的@字符\n\n>1.先获取当前光标的位置\n>2.再获取当前输入框的dom\n>3.分析dom里的结构\n>4.将dom中的光标位置的@替换成`atPresonDom`中的结构\n>5.将生成的`reasonDom`插入到dom中\n>6.再将光标置于当前替换的`<span>`标签之后\n\n```javascript\nselectPerson = item => {\n    const anchorNode = this.anchorNode;\n    const selectStartIndex = this.selectStartIndex;\n    const atPresonDom = `&nbsp;<span style=\"background-color:#F4F4F6;padding: 3px 5px;border-radius: 3px;\" id=${item.id} name=${item.name}>@${item.name}</span>&nbsp;`;\n    let reasonDom = '';\n    const range = document.createRange();\n    let targetDomIndex = 0;\n    [...textDom.childNodes].forEach((each, index) => {\n      if (each.nodeName === 'SPAN') {\n        reasonDom += each.outerHTML;\n      } else if (anchorNode === each) {\n        targetDomIndex = index;\n        const tempEachDom = each;\n        const dom1 = tempEachDom.data.substring(0, selectStartIndex - 1);\n        const dom2 = atPresonDom;\n        const dom3 = tempEachDom.data.substring(\n          selectStartIndex + this.selectText.length,\n          each.data.length,\n        );\n        reasonDom += dom1 + dom2 + dom3;\n      } else {\n        reasonDom += each.data;\n      }\n    });\n    textDom.innerHTML = reasonDom;//插入dom\n    const textDomChildList = [...textDom.childNodes];\n    const textDomLastIndex =\n      textDomChildList.length - 1 > -1 ? textDomChildList.length - 1 : 0;\n    const targetIndex =\n      targetDomIndex + 2 > textDomLastIndex\n        ? textDomLastIndex\n        : targetDomIndex + 2;\n    const targetAnchorNode = textDomChildList[targetIndex];\n    const selection = document.getSelection();\n    range.setStart(targetAnchorNode, 1);\n    range.setEnd(targetAnchorNode, 1);\n    selection.removeAllRanges();\n    selection.addRange(range);\n    this.selectText = '';\n    this.setState({ personDataList: [] });\n    this.selectStartIndex = -1;\n};\n```\n\n### 7.键盘控制选中(后边附录键盘事件)\n\n- 通过键盘来控制循环选中下拉人员列表\n- 键盘控制删除整体模块\n- 键盘控制光标进入空能\n\n```javascript\nkeydownEvent = e => {//键盘事件\n    if (e.keyCode === 8) {\n      const selection = document.getSelection();\n      this.anchorNode = selection.anchorNode;\n      const range = selection.getRangeAt(0);\n\n      // 删除@模块\n      if (selection.focusNode.parentNode.nodeName === 'SPAN') {\n        textDom?.removeChild(range.startContainer.parentElement);\n      }\n    }\n    if ([38, 40].indexOf(e.keyCode) > -1) {\n      //up&down\n      const { personDataList, curSelectItem } = this.state;\n      personDataList.length > 0 && e.preventDefault(); //有下拉是阻止冒泡\n      let targetIndex = 0;\n      personDataList.forEach((item, index) => {\n        targetIndex = item.id === curSelectItem.id ? index : targetIndex;\n      });\n      if (e.keyCode === 40) { //down\n        targetIndex = targetIndex === personDataList.length - 1 ? 0 : targetIndex + 1;\n      }\n      if (e.keyCode === 38) { //up\n        targetIndex = targetIndex === 0 ? personDataList.length - 1 : targetIndex - 1;\n      }\n      this.setState({ curSelectItem: personDataList[targetIndex] });\n    }\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const { curSelectItem } = this.state;\n      curSelectItem && this.selectPerson(curSelectItem);\n      this.setState({ curSelectItem: null });\n    }\n  };\n```\n\n### 8.当光标删除到整体模块处理\n\n当光标识别到进入@整体模块时，需要整体删除\n\n这里使用的时`<span>`标签来表示的\n\n```javascript\nif (selection.focusNode.parentNode.nodeName === 'SPAN') {\n    //不允许编辑@人员\n    textDom?.removeChild(selection.focusNode.parentNode);\n    this.setState({ personDataList: [] });\n    this.selectStartIndex = -1;\n}\n```\n\n### 9.效果图\n\n![demo2.png](http://ww1.sinaimg.cn/large/987eaf20gy1ge7m81xiq0j21dq0m8n17.jpg)\n\n# 附：js键盘事件全面控制详解\n\n主要分四个部分\n第一部分：浏览器的按键事件\n第二部分：兼容浏览器\n第三部分：代码实现和优化\n第四部分：总结\n\n## 第一部分：浏览器的按键事件\n\n1.用js实现键盘记录，要关注浏览器的三种按键事件类型，即`keydown`，`keypress`和`keyup`，它们分别对应`onkeydown`、`onkeypress`和`onkeyup`这三个事件句柄。一个典型的按键会产生所有这三种事件，依次是`keydown`，`keypress`，然后是按键释放时候的`keyup`。\n\n2.在这3种事件类型中，`keydown`和`keyup`比较底层，而`keypress`比较高级。这里所谓的高级是指，当用户按下`shift + 1`时，`keypress`是对这个按键事件进行解析后返回一个可打印的“!”字符，而`keydown`和`keyup`只是记录了`shift + 1`这个事件。\n\n3.但是`keypress`只能针对一些可以打印出来的字符有效，而对于功能按键，如`F1-F12`、`Backspace`、`Enter`、`Escape`、`PageUP`、`PageDown`和箭头方向等，就不会产生`keypress`事件，但是可以产生`keydown`和`keyup`事件。然而在FireFox中，功能按键是可以产生`keypress`事件的。\n\n4.传递给`keydown`、`keypress`和`keyup`事件句柄的事件对象有一些通用的属性。如果`Alt`、`Ctrl`或`Shift`和一个按键一起按下，这通过事件的`altKey`、`ctrlKey`和`shiftKey`属性表示，这些属性在FireFox和IE中是通用的。\n\n## 第二部分：兼容浏览器\n\n- 凡是涉及浏览器的js，就都要考虑浏览器兼容的问题。\n- 目前常用的浏览器主要有基于IE和基于Mozilla两大类。Maxthon是基于IE内核的，而FireFox和Opera是基于Mozilla内核的。\n\n### 2.1 事件的初始化\n\n首先需要了解的是如何初始化该事件，基本语句如下：\n\n```javascript\n    function keyDown(){}\n    document.onkeydown = keyDown;\n```\n\n***react 绑定***\n\n```javascript\n    //直接绑定在原生事件上，这个一般是用来捕捉编辑的时候的事件，用的不多\n    <textarea onKeyDown={e=> console.log( e.keyCode ) } />\n    //通过声明周期直接绑定到document的事件上，这个方式一般用来做快捷键比较多\n    export class KeyBind extends React.Component {\n        componentDidMount(){\n            document.addEventListener(\"keydown\", this.onKeyDown)\n        }\n\n        componentWillUnmount(){\n            document.removeEventListener(\"keydown\", this.onKeyDown)\n        }\n\n        onKeyDown = (e) => {\n            switch( e.keyCode) {\n            case 13://回车事件\n                break\n            }\n        }\n    }\n```\n\n当浏览器读到这个语句时，无论按下键盘上的哪个键，都将呼叫KeyDown()函数。\n\n### 2.2 FireFox和Opera的实现方法\n\nFireFox和Opera等程序实现要比IE麻烦，所以这里先描述一下。\n\n`keyDown()`函数有一个隐藏的变量--一般的，我们使用字母“e”来表示这个变量。  \n\n```javascript\n    function keyDown(e)  \n```\n\n变量e表示发生击键事件，寻找是哪个键被按下，要使用which这个属性：  \n\n```javascript\n    e.which  \n```\n\n`e.which`将给出该键的索引值，把索引值转化成该键的字母或数字值的方法需要用到静态函数`String.fromCharCode()`，如下： \n\n```javascript\n    String.fromCharCode(e.which)\n```\n\n把上面的语句放在一起，我们可以在FireFox中得到被按下的是哪一个键：  \n\n```javascript\n    function keyDown(e) {  \n        var keycode = e.which;  \n        var realkey = String.fromCharCode(e.which);  \n    　　alert(\"按键码: \" + keycode + \" 字符: \" + realkey);  \n    }\n    document.onkeydown = keyDown;\n```\n\n### 2.3 IE的实现方法\n\nIE的程序不需要e变量，用`window.event.keyCode`来代替`e.which`，把键的索引值转化为真实键值方法类似：`String.fromCharCode(event.keyCode)`，程序如下：\n\n```javascript\n    function keyDown() {  \n        var keycode = event.keyCode;  \n        var realkey = String.fromCharCode(event.keyCode);  \n        alert(\"按键码: \" + keycode + \" 字符: \" + realkey);  \n    }  \n    document.onkeydown = keyDown;\n```\n\n### 2.4 判断浏览器类型\n\n上面了解了在各种浏览器里是如何实现获取按键事件对象的方法，那么下面需要判断浏览器类型，这个方法很多，有比较方便理解的，也有很巧妙的办法，先说一般的方法：就是利用`navigator`对象的`appName属性`，当然也可以用`userAgent`属性，这里用`appName`来实现判断浏览器类型，IE和Maxthon的appName是“Microsoft Internet Explorer” ,而FireFox和Opera的appName是“Netscape”，所以一个功能比较简单的代码如下：\n\n```javascript\n    function keyUp(e) {   \n        if(navigator.appName == \"Microsoft Internet Explorer\"){\n            var keycode = event.keyCode;  \n            var realkey = String.fromCharCode(event.keyCode);  \n        }else{\n            var keycode = e.which;  \n            var realkey = String.fromCharCode(e.which);  \n        }\n        alert(\"按键码: \" + keycode + \" 字符: \" + realkey);\n    }\n    document.onkeyup = keyUp;\n```\n\n比较简洁的方法是：\n\n```javascript\n    function keyUp(e) {\n        var currKey=0, e=e||event;\n        currKey=e.keyCode||e.which||e.charCode;\n        var keyName = String.fromCharCode(currKey);\n        alert(\"按键码: \" + currKey + \" 字符: \" + keyName);\n    }\n    document.onkeyup = keyUp;\n```\n\n上面这种方法比较巧妙，简单地解释一下：\n\n> 首先，e=e||event;这句代码是为了进行浏览器事件对象获取的兼容。js中这句代码的意思是，如果在FireFox或Opera中，隐藏的变量e是存在的，那么e||event返回e，如果在IE中，隐藏变量e是不存在，则返回event。\n> 其次，`currKey=e.keyCode||e.which||e.charCode`;这句是为了兼容浏览器按键事件对象的按键码属性（详见第三部分），如IE中，只有keyCode属性，而FireFox中有which和charCode属性，Opera中有keyCode和which属性等。\n> 上述代码只是兼容了浏览器，获取了keyup事件对象，简单的弹出了按键码和按键的字符，但是问题出现了，当你按键时，字符键都是大写的，而按shift键时，显示的字符很奇怪，所以就需要优化一下代码了。\n\n## 第三部分：代码实现和优化\n\n### 3.1 按键事件的按键码和字符码\n\n在IE中，只有一个`keyCode`属性，并且它的解释取决于事件类型。对于`keydown`来说，`keyCode`存储的是按键码，对于 `keypress`事件来说，`keyCode`存储的是一个字符码。而IE中没有`which`和`charCode`属性，所以`which和charCode`属性始终为`undefined`。\n\nFireFox中keyCode始终为0，时间`keydown`/`keyup`时，`charCode`=0，which为按键码。事件`keypress`时，which和charCode二者的值相同，存储了字符码。\n\n在Opera中，`keyCode`和`which`二者的值始终相同，在`keydown/keyup`事件中，它们存储按键码，在`keypress`时间中，它们存储字符码，而charCode没有定义，始终是undefined。\n\n### 3.2 用keydown/keyup还是keypress\n\n第一部分已经介绍了`keydown/keyup`和`keypress`的区别，有一条比较通用的规则，`keydown`事件对于功能按键来说是最有用的，而`keypress`事件对于可打印按键来说是最有用的。\n\n键盘记录主要是针对于可打印字符和部分功能按键，所以`keypress`是首选，然而正如第一部分提到的，IE中`keypress`不支持功能按键，所以应该用`keydown/keyup`事件来进行补充。\n\n### 3.3 代码的实现\n总体思路，用keypress事件对象获取按键字符，用keydown事件获取功能字符，如`Enter`，`Backspace`等。\n\n代码实现如下所示\n\n``` javascript\n!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0Transitional//EN\">\n<html>\n<head>\n    <title>js 按键记录</title>\n    <meta name=\"Generator\" CONTENT=\"EditPlus\">\n    <meta name=\"Author\" CONTENT=\"Duke\">\n    <meta name=\"Keywords\" CONTENT=\"js 按键记录\">\n    <meta name=\"Description\" CONTENT=\"js 按键 记录\">\n</head>\n<script type=\"text/javascript\">\n    var keystring = \"\";//记录按键的字符串\n    \n    function $(s){\n        return document.getElementByIdx_x(s)?document.getElementByIdx_x(s):s;\n    }\n    \n    function keypress(e){\n        var currKey=0,CapsLock=0,e=e||event;\n　      currKey=e.keyCode||e.which||e.charCode;\n　      CapsLock=currKey>=65&&currKey<=90;\n　      \n　      switch(currKey){//屏蔽了退格、制表、回车、空格、方向键、删除键\n            case 8: \n            case 9: \n            case 13: \n            case 32: \n            case 37: \n            case 38: \n            case 39: \n            case 40: \n            case 46:\n                keyName = \"\";\n                break;\n            default:\n                keyName = String.fromCharCode(currKey); break;\n        }\n        keystring += keyName;\n    }\n    \n    function keydown(e){\n        var e=e||event;\n        var currKey=e.keyCode||e.which||e.charCode;\n        if((currKey>7&&currKey<14)||(currKey>31&&currKey<47)){\n            switch(currKey) {\n                case 8: keyName = \"[退格]\"; break;\n                case 9: keyName = \"[制表]\"; break;\n                case 13:keyName = \"[回车]\"; break;\n                case 32:keyName = \"[空格]\"; break;\n                case 33:keyName = \"[PageUp]\"; break;\n                case 34:keyName = \"[PageDown]\"; break;\n                case 35:keyName = \"[End]\"; break;\n                case 36:keyName = \"[Home]\"; break;\n                case 37:keyName = \"[方向键左]\"; break;\n                case 38:keyName = \"[方向键上]\"; break;\n                case 39:keyName = \"[方向键右]\";break;\n                case 40:keyName = \"[方向键下]\";break;\n                case 46:keyName = \"[删除]\";break;\n                default:keyName = \"\";break;\n            }\n            keystring += keyName;\n        }\n        $(\"content\").innerHTML=keystring;\n    }\n    \n    function keyup(e){\n        $(\"content\").innerHTML=keystring;\n    }\n    document.onkeypress=keypress;\n    document.onkeydown =keydown;\n    document.onkeyup =keyup;\n</script>\n<body>\n    <input type=\"text\" />\n    <input type=\"button\" value=\"清空记录\" onclick=\"$('content').innerHTML = '';keystring = '';\"/>\n    <br/>请按下任意键查看键盘响应键值：<span id=\"content\"></span>\n</body>\n</html>\n```\n\n代码分析：\n`$()`：根据ID获取dom\n`keypress(e)`：实现对字符码的截获，由于功能按键要用keydown获取，所以在keypress中屏蔽了这些功能按键。\n`keydown(e)`：主要是实现了对功能按键的获取。\n`keyup(e)`：展示截获的字符串。\n\n代码基本上就算实现完成了！呵呵\n\n## 第四部分：总结\n1.H5端键盘keyCode有部分缺失，使用是要特别注意一下\n2.编写代码的最初目的是能够通过js记录按键，并返回一个字符串。\n\n上述代码只是用js实现了基本的英文按键记录，对于汉字是无能为力，记录汉字，我能想到的办法，当然是用js，是用keydown和keyup记录底层按键事件，汉字解析当然无能为力。当然你可以用DOM的方式直接获取input中的汉字，但这已经离开了本文讨论的用按键事件实现按键记录的本意。\n\n\n本文demo： [gitHub地址](https://github.com/duanweiqiang/atPerson \"gitHub\")\n\n>上述代码还可以实现添加剪切板的功能，监控删除的功能等等。。。\n","slug":"atPerson","published":1,"updated":"2020-05-18T06:59:10.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckj8txcs1002hhi60a1ft74te","content":"<h1 id=\"页面-功能实现\"><a href=\"#页面-功能实现\" class=\"headerlink\" title=\"页面@功能实现\"></a>页面@功能实现</h1><p>本文demo： <a href=\"https://github.com/duanweiqiang/atPerson\" title=\"gitHub\">gitHub地址</a></p>\n<p>需要用到的知识：</p>\n<h3 id=\"1-将div设置成可输入状态\"><a href=\"#1-将div设置成可输入状态\" class=\"headerlink\" title=\"1.将div设置成可输入状态\"></a>1.将div设置成可输入状态</h3><ul>\n<li>contentEditable 属性用于设置或返回元素的内容是否可编辑。</li>\n<li>这样就可以在div中使用标签来表示@中的人（只是为了可以在输入框中使用标签）</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">contentEditable</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>textArea<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token attr-name\">onInput</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{this.onChangeAtPerson}</span> \n    <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>{style.testArea}</span>\n    <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>请输入评论，可以@其他人<span class=\"token punctuation\">\"</span></span>\n    <span class=\"token punctuation\">/></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"2-创建range-对象\"><a href=\"#2-创建range-对象\" class=\"headerlink\" title=\"2.创建range 对象\"></a>2.创建range 对象</h3><ul>\n<li>用来控制光标是否可以进入@的dom</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> range <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"3-操作range对象\"><a href=\"#3-操作range对象\" class=\"headerlink\" title=\"3.操作range对象\"></a>3.操作range对象</h3><ul>\n<li>用来控制光标是否可以进入@的dom</li>\n</ul>\n<p><strong>选择节点</strong></p>\n<p><code>selectNode()</code> :选择整个节点，包括子节点</p>\n<p><code>selectNodeContents()</code>  选择节点的子节点</p>\n<ul>\n<li>example:<pre class=\" language-html\"><code class=\"language-html\">  <span class=\"token comment\" spellcheck=\"true\">&lt;!-- html --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>p1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>Hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span> \n      world!\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token keyword\">var</span> range1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      range2 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      p1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  range1<span class=\"token punctuation\">.</span><span class=\"token function\">selectNode</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//&lt;p id=\"p1\">&lt;b>Hello&lt;/b> world!&lt;/p></span>\n  range2<span class=\"token punctuation\">.</span><span class=\"token function\">selectNodeContents</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//&lt;b>Hello&lt;/b> world!</span></code></pre>\n</li>\n</ul>\n<p><code>setStart()</code>、<code>setEnd()</code>：这里选择节点和鼠标选中一样，这个是自动选中</p>\n<blockquote>\n<p>方法都接受两个参数：一个参照节点，一个节点偏移量</p>\n</blockquote>\n<ul>\n<li>example<pre class=\" language-html\"><code class=\"language-html\">  <span class=\"token comment\" spellcheck=\"true\">&lt;!-- html --></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>p1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Hello world!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span> </code></pre>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">  <span class=\"token comment\" spellcheck=\"true\">//js</span>\n  range <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p1 <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  range<span class=\"token punctuation\">.</span><span class=\"token function\">setStart</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  range<span class=\"token punctuation\">.</span><span class=\"token function\">setEnd</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\" spellcheck=\"true\">//选中的将会是 llo wo（注意！以0为基数，空格也算一个文本字符，占1个偏移量）</span></code></pre>\n</li>\n</ul>\n<p><strong>操作节点</strong></p>\n<p><code>deleteContents()</code>: 这个方法能够从文档中删除范围缩包含的内容</p>\n<p><code>extractContents()</code>: 会删除并返回文档片段</p>\n<p><code>CloneContents()</code>: 创建范围对象的一个副本，不会影响原来的节点</p>\n<blockquote>\n<p>复制 DOM 范围  ： 可以使用 cloneRange()方法复制范围。这个方法会创建调用它的范围的一个副本。<br><code>var newRange = range.cloneRange();</code></p>\n</blockquote>\n<p><code>insertNode()</code>: 向范围选区的开始处插入一个节点</p>\n<p><code>surroundContents()</code>: 环绕范围插入内容 </p>\n<p>在使用完范围之后，最好是调用 <code>detach()</code> 方法，以便从创建范围的文档中分离出该范围。调用<br><code>detach()</code>之后，就可以放心地解除对范围的引用，从而让垃圾回收机制回收其内存了。来看下面的<br>例子</p>\n<p><code>range.detach();</code> //从文档中分离<br><code>range = null;</code> //解除引用<br>推荐在使用范围的最后再执行这两个步骤。一旦分离范围，就不能再恢复使用了。</p>\n<h3 id=\"4-Selection-对象\"><a href=\"#4-Selection-对象\" class=\"headerlink\" title=\"4.Selection 对象\"></a>4.Selection 对象</h3><ul>\n<li>这是一个window对象</li>\n<li>返回一个 <code>Selection</code> 对象，表示用户选择的文本范围或光标的当前位置。</li>\n<li>这里使用它来获取当前光标所处的dom</li>\n</ul>\n<p>用法:</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> window<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//非react使用</span>\n    <span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>anchorNode <span class=\"token operator\">=</span> selection<span class=\"token punctuation\">.</span>anchorNode<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取当前贯标所在位置的dom（使用anchorNode子方法）</span></code></pre>\n<h3 id=\"5-dom中设置-人员的演示\"><a href=\"#5-dom中设置-人员的演示\" class=\"headerlink\" title=\"5.dom中设置@人员的演示\"></a>5.dom中设置@人员的演示</h3><ul>\n<li>本文通过<code>&lt;span&gt;</code>标签来实现</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> \n        <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span><span class=\"token hexcode\">#F4F4F6</span><span class=\"token punctuation\">;</span><span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>px <span class=\"token number\">5</span>px<span class=\"token punctuation\">;</span><span class=\"token property\">border-radius</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span> \n        <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>${item.id}</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span>${item.name}</span><span class=\"token punctuation\">></span></span> //react方法\n        @${item.name}\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"6-通过selection来替换原来的-字符\"><a href=\"#6-通过selection来替换原来的-字符\" class=\"headerlink\" title=\"6.通过selection来替换原来的@字符\"></a>6.通过selection来替换原来的@字符</h3><blockquote>\n<p>1.先获取当前光标的位置<br>2.再获取当前输入框的dom<br>3.分析dom里的结构<br>4.将dom中的光标位置的@替换成<code>atPresonDom</code>中的结构<br>5.将生成的<code>reasonDom</code>插入到dom中<br>6.再将光标置于当前替换的<code>&lt;span&gt;</code>标签之后</p>\n</blockquote>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">selectPerson <span class=\"token operator\">=</span> item <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> anchorNode <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>anchorNode<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> selectStartIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selectStartIndex<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> atPresonDom <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`&amp;nbsp;&lt;span style=\"background-color:#F4F4F6;padding: 3px 5px;border-radius: 3px;\" id=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> name=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">>@</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/span>&amp;nbsp;`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> reasonDom <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> range <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createRange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> targetDomIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>textDom<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>each<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">===</span> <span class=\"token string\">'SPAN'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        reasonDom <span class=\"token operator\">+</span><span class=\"token operator\">=</span> each<span class=\"token punctuation\">.</span>outerHTML<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>anchorNode <span class=\"token operator\">===</span> each<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        targetDomIndex <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> tempEachDom <span class=\"token operator\">=</span> each<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> dom1 <span class=\"token operator\">=</span> tempEachDom<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> selectStartIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> dom2 <span class=\"token operator\">=</span> atPresonDom<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> dom3 <span class=\"token operator\">=</span> tempEachDom<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>\n          selectStartIndex <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selectText<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n          each<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        reasonDom <span class=\"token operator\">+</span><span class=\"token operator\">=</span> dom1 <span class=\"token operator\">+</span> dom2 <span class=\"token operator\">+</span> dom3<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        reasonDom <span class=\"token operator\">+</span><span class=\"token operator\">=</span> each<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    textDom<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> reasonDom<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//插入dom</span>\n    <span class=\"token keyword\">const</span> textDomChildList <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>textDom<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> textDomLastIndex <span class=\"token operator\">=</span>\n      textDomChildList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> textDomChildList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> targetIndex <span class=\"token operator\">=</span>\n      targetDomIndex <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token operator\">></span> textDomLastIndex\n        <span class=\"token operator\">?</span> textDomLastIndex\n        <span class=\"token punctuation\">:</span> targetDomIndex <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> targetAnchorNode <span class=\"token operator\">=</span> textDomChildList<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    range<span class=\"token punctuation\">.</span><span class=\"token function\">setStart</span><span class=\"token punctuation\">(</span>targetAnchorNode<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    range<span class=\"token punctuation\">.</span><span class=\"token function\">setEnd</span><span class=\"token punctuation\">(</span>targetAnchorNode<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    selection<span class=\"token punctuation\">.</span><span class=\"token function\">removeAllRanges</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    selection<span class=\"token punctuation\">.</span><span class=\"token function\">addRange</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selectText <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> personDataList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selectStartIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"7-键盘控制选中-后边附录键盘事件\"><a href=\"#7-键盘控制选中-后边附录键盘事件\" class=\"headerlink\" title=\"7.键盘控制选中(后边附录键盘事件)\"></a>7.键盘控制选中(后边附录键盘事件)</h3><ul>\n<li>通过键盘来控制循环选中下拉人员列表</li>\n<li>键盘控制删除整体模块</li>\n<li>键盘控制光标进入空能</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">keydownEvent <span class=\"token operator\">=</span> e <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//键盘事件</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> selection <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getSelection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>anchorNode <span class=\"token operator\">=</span> selection<span class=\"token punctuation\">.</span>anchorNode<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> range <span class=\"token operator\">=</span> selection<span class=\"token punctuation\">.</span><span class=\"token function\">getRangeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\" spellcheck=\"true\">// 删除@模块</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">.</span>focusNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">===</span> <span class=\"token string\">'SPAN'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        textDom<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">.</span>startContainer<span class=\"token punctuation\">.</span>parentElement<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\" spellcheck=\"true\">//up&amp;down</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> personDataList<span class=\"token punctuation\">,</span> curSelectItem <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n      personDataList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//有下拉是阻止冒泡</span>\n      <span class=\"token keyword\">let</span> targetIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      personDataList<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        targetIndex <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span>id <span class=\"token operator\">===</span> curSelectItem<span class=\"token punctuation\">.</span>id <span class=\"token operator\">?</span> index <span class=\"token punctuation\">:</span> targetIndex<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//down</span>\n        targetIndex <span class=\"token operator\">=</span> targetIndex <span class=\"token operator\">===</span> personDataList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">:</span> targetIndex <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">38</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">//up</span>\n        targetIndex <span class=\"token operator\">=</span> targetIndex <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> personDataList<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> targetIndex <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> curSelectItem<span class=\"token punctuation\">:</span> personDataList<span class=\"token punctuation\">[</span>targetIndex<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> <span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      e<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> curSelectItem <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n      curSelectItem <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">selectPerson</span><span class=\"token punctuation\">(</span>curSelectItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> curSelectItem<span class=\"token punctuation\">:</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"8-当光标删除到整体模块处理\"><a href=\"#8-当光标删除到整体模块处理\" class=\"headerlink\" title=\"8.当光标删除到整体模块处理\"></a>8.当光标删除到整体模块处理</h3><p>当光标识别到进入@整体模块时，需要整体删除</p>\n<p>这里使用的时<code>&lt;span&gt;</code>标签来表示的</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">.</span>focusNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">.</span>nodeName <span class=\"token operator\">===</span> <span class=\"token string\">'SPAN'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\" spellcheck=\"true\">//不允许编辑@人员</span>\n    textDom<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>selection<span class=\"token punctuation\">.</span>focusNode<span class=\"token punctuation\">.</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> personDataList<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>selectStartIndex <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"9-效果图\"><a href=\"#9-效果图\" class=\"headerlink\" title=\"9.效果图\"></a>9.效果图</h3><p><img src=\"http://ww1.sinaimg.cn/large/987eaf20gy1ge7m81xiq0j21dq0m8n17.jpg\" alt=\"demo2.png\"></p>\n<h1 id=\"附：js键盘事件全面控制详解\"><a href=\"#附：js键盘事件全面控制详解\" class=\"headerlink\" title=\"附：js键盘事件全面控制详解\"></a>附：js键盘事件全面控制详解</h1><p>主要分四个部分<br>第一部分：浏览器的按键事件<br>第二部分：兼容浏览器<br>第三部分：代码实现和优化<br>第四部分：总结</p>\n<h2 id=\"第一部分：浏览器的按键事件\"><a href=\"#第一部分：浏览器的按键事件\" class=\"headerlink\" title=\"第一部分：浏览器的按键事件\"></a>第一部分：浏览器的按键事件</h2><p>1.用js实现键盘记录，要关注浏览器的三种按键事件类型，即<code>keydown</code>，<code>keypress</code>和<code>keyup</code>，它们分别对应<code>onkeydown</code>、<code>onkeypress</code>和<code>onkeyup</code>这三个事件句柄。一个典型的按键会产生所有这三种事件，依次是<code>keydown</code>，<code>keypress</code>，然后是按键释放时候的<code>keyup</code>。</p>\n<p>2.在这3种事件类型中，<code>keydown</code>和<code>keyup</code>比较底层，而<code>keypress</code>比较高级。这里所谓的高级是指，当用户按下<code>shift + 1</code>时，<code>keypress</code>是对这个按键事件进行解析后返回一个可打印的“!”字符，而<code>keydown</code>和<code>keyup</code>只是记录了<code>shift + 1</code>这个事件。</p>\n<p>3.但是<code>keypress</code>只能针对一些可以打印出来的字符有效，而对于功能按键，如<code>F1-F12</code>、<code>Backspace</code>、<code>Enter</code>、<code>Escape</code>、<code>PageUP</code>、<code>PageDown</code>和箭头方向等，就不会产生<code>keypress</code>事件，但是可以产生<code>keydown</code>和<code>keyup</code>事件。然而在FireFox中，功能按键是可以产生<code>keypress</code>事件的。</p>\n<p>4.传递给<code>keydown</code>、<code>keypress</code>和<code>keyup</code>事件句柄的事件对象有一些通用的属性。如果<code>Alt</code>、<code>Ctrl</code>或<code>Shift</code>和一个按键一起按下，这通过事件的<code>altKey</code>、<code>ctrlKey</code>和<code>shiftKey</code>属性表示，这些属性在FireFox和IE中是通用的。</p>\n<h2 id=\"第二部分：兼容浏览器\"><a href=\"#第二部分：兼容浏览器\" class=\"headerlink\" title=\"第二部分：兼容浏览器\"></a>第二部分：兼容浏览器</h2><ul>\n<li>凡是涉及浏览器的js，就都要考虑浏览器兼容的问题。</li>\n<li>目前常用的浏览器主要有基于IE和基于Mozilla两大类。Maxthon是基于IE内核的，而FireFox和Opera是基于Mozilla内核的。</li>\n</ul>\n<h3 id=\"2-1-事件的初始化\"><a href=\"#2-1-事件的初始化\" class=\"headerlink\" title=\"2.1 事件的初始化\"></a>2.1 事件的初始化</h3><p>首先需要了解的是如何初始化该事件，基本语句如下：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span>onkeydown <span class=\"token operator\">=</span> keyDown<span class=\"token punctuation\">;</span></code></pre>\n<p><strong><em>react 绑定</em></strong></p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token comment\" spellcheck=\"true\">//直接绑定在原生事件上，这个一般是用来捕捉编辑的时候的事件，用的不多</span>\n    <span class=\"token operator\">&lt;</span>textarea onKeyDown<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>e<span class=\"token operator\">=</span><span class=\"token operator\">></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> e<span class=\"token punctuation\">.</span>keyCode <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token comment\" spellcheck=\"true\">//通过声明周期直接绑定到document的事件上，这个方式一般用来做快捷键比较多</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">KeyBind</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">componentDidMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onKeyDown<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            document<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"keydown\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onKeyDown<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n\n        onKeyDown <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span> e<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">13</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>回车事件\n                <span class=\"token keyword\">break</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<p>当浏览器读到这个语句时，无论按下键盘上的哪个键，都将呼叫KeyDown()函数。</p>\n<h3 id=\"2-2-FireFox和Opera的实现方法\"><a href=\"#2-2-FireFox和Opera的实现方法\" class=\"headerlink\" title=\"2.2 FireFox和Opera的实现方法\"></a>2.2 FireFox和Opera的实现方法</h3><p>FireFox和Opera等程序实现要比IE麻烦，所以这里先描述一下。</p>\n<p><code>keyDown()</code>函数有一个隐藏的变量–一般的，我们使用字母“e”来表示这个变量。  </p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>  </code></pre>\n<p>变量e表示发生击键事件，寻找是哪个键被按下，要使用which这个属性：  </p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    e<span class=\"token punctuation\">.</span>which  </code></pre>\n<p><code>e.which</code>将给出该键的索引值，把索引值转化成该键的字母或数字值的方法需要用到静态函数<code>String.fromCharCode()</code>，如下： </p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>which<span class=\"token punctuation\">)</span></code></pre>\n<p>把上面的语句放在一起，我们可以在FireFox中得到被按下的是哪一个键：  </p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">var</span> keycode <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>which<span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">var</span> realkey <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token function\">　　alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"按键码: \"</span> <span class=\"token operator\">+</span> keycode <span class=\"token operator\">+</span> <span class=\"token string\">\" 字符: \"</span> <span class=\"token operator\">+</span> realkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span>onkeydown <span class=\"token operator\">=</span> keyDown<span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"2-3-IE的实现方法\"><a href=\"#2-3-IE的实现方法\" class=\"headerlink\" title=\"2.3 IE的实现方法\"></a>2.3 IE的实现方法</h3><p>IE的程序不需要e变量，用<code>window.event.keyCode</code>来代替<code>e.which</code>，把键的索引值转化为真实键值方法类似：<code>String.fromCharCode(event.keyCode)</code>，程序如下：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">keyDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n        <span class=\"token keyword\">var</span> keycode <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">;</span>  \n        <span class=\"token keyword\">var</span> realkey <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"按键码: \"</span> <span class=\"token operator\">+</span> keycode <span class=\"token operator\">+</span> <span class=\"token string\">\" 字符: \"</span> <span class=\"token operator\">+</span> realkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    <span class=\"token punctuation\">}</span>  \n    document<span class=\"token punctuation\">.</span>onkeydown <span class=\"token operator\">=</span> keyDown<span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"2-4-判断浏览器类型\"><a href=\"#2-4-判断浏览器类型\" class=\"headerlink\" title=\"2.4 判断浏览器类型\"></a>2.4 判断浏览器类型</h3><p>上面了解了在各种浏览器里是如何实现获取按键事件对象的方法，那么下面需要判断浏览器类型，这个方法很多，有比较方便理解的，也有很巧妙的办法，先说一般的方法：就是利用<code>navigator</code>对象的<code>appName属性</code>，当然也可以用<code>userAgent</code>属性，这里用<code>appName</code>来实现判断浏览器类型，IE和Maxthon的appName是“Microsoft Internet Explorer” ,而FireFox和Opera的appName是“Netscape”，所以一个功能比较简单的代码如下：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">keyUp</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>   \n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>navigator<span class=\"token punctuation\">.</span>appName <span class=\"token operator\">==</span> <span class=\"token string\">\"Microsoft Internet Explorer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> keycode <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">var</span> realkey <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>keyCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> keycode <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>which<span class=\"token punctuation\">;</span>  \n            <span class=\"token keyword\">var</span> realkey <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>which<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"按键码: \"</span> <span class=\"token operator\">+</span> keycode <span class=\"token operator\">+</span> <span class=\"token string\">\" 字符: \"</span> <span class=\"token operator\">+</span> realkey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span>onkeyup <span class=\"token operator\">=</span> keyUp<span class=\"token punctuation\">;</span></code></pre>\n<p>比较简洁的方法是：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">    <span class=\"token keyword\">function</span> <span class=\"token function\">keyUp</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> currKey<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> e<span class=\"token operator\">=</span>e<span class=\"token operator\">||</span>event<span class=\"token punctuation\">;</span>\n        currKey<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>keyCode<span class=\"token operator\">||</span>e<span class=\"token punctuation\">.</span>which<span class=\"token operator\">||</span>e<span class=\"token punctuation\">.</span>charCode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> keyName <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>currKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"按键码: \"</span> <span class=\"token operator\">+</span> currKey <span class=\"token operator\">+</span> <span class=\"token string\">\" 字符: \"</span> <span class=\"token operator\">+</span> keyName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span>onkeyup <span class=\"token operator\">=</span> keyUp<span class=\"token punctuation\">;</span></code></pre>\n<p>上面这种方法比较巧妙，简单地解释一下：</p>\n<blockquote>\n<p>首先，e=e||event;这句代码是为了进行浏览器事件对象获取的兼容。js中这句代码的意思是，如果在FireFox或Opera中，隐藏的变量e是存在的，那么e||event返回e，如果在IE中，隐藏变量e是不存在，则返回event。<br>其次，<code>currKey=e.keyCode||e.which||e.charCode</code>;这句是为了兼容浏览器按键事件对象的按键码属性（详见第三部分），如IE中，只有keyCode属性，而FireFox中有which和charCode属性，Opera中有keyCode和which属性等。<br>上述代码只是兼容了浏览器，获取了keyup事件对象，简单的弹出了按键码和按键的字符，但是问题出现了，当你按键时，字符键都是大写的，而按shift键时，显示的字符很奇怪，所以就需要优化一下代码了。</p>\n</blockquote>\n<h2 id=\"第三部分：代码实现和优化\"><a href=\"#第三部分：代码实现和优化\" class=\"headerlink\" title=\"第三部分：代码实现和优化\"></a>第三部分：代码实现和优化</h2><h3 id=\"3-1-按键事件的按键码和字符码\"><a href=\"#3-1-按键事件的按键码和字符码\" class=\"headerlink\" title=\"3.1 按键事件的按键码和字符码\"></a>3.1 按键事件的按键码和字符码</h3><p>在IE中，只有一个<code>keyCode</code>属性，并且它的解释取决于事件类型。对于<code>keydown</code>来说，<code>keyCode</code>存储的是按键码，对于 <code>keypress</code>事件来说，<code>keyCode</code>存储的是一个字符码。而IE中没有<code>which</code>和<code>charCode</code>属性，所以<code>which和charCode</code>属性始终为<code>undefined</code>。</p>\n<p>FireFox中keyCode始终为0，时间<code>keydown</code>/<code>keyup</code>时，<code>charCode</code>=0，which为按键码。事件<code>keypress</code>时，which和charCode二者的值相同，存储了字符码。</p>\n<p>在Opera中，<code>keyCode</code>和<code>which</code>二者的值始终相同，在<code>keydown/keyup</code>事件中，它们存储按键码，在<code>keypress</code>时间中，它们存储字符码，而charCode没有定义，始终是undefined。</p>\n<h3 id=\"3-2-用keydown-keyup还是keypress\"><a href=\"#3-2-用keydown-keyup还是keypress\" class=\"headerlink\" title=\"3.2 用keydown/keyup还是keypress\"></a>3.2 用keydown/keyup还是keypress</h3><p>第一部分已经介绍了<code>keydown/keyup</code>和<code>keypress</code>的区别，有一条比较通用的规则，<code>keydown</code>事件对于功能按键来说是最有用的，而<code>keypress</code>事件对于可打印按键来说是最有用的。</p>\n<p>键盘记录主要是针对于可打印字符和部分功能按键，所以<code>keypress</code>是首选，然而正如第一部分提到的，IE中<code>keypress</code>不支持功能按键，所以应该用<code>keydown/keyup</code>事件来进行补充。</p>\n<h3 id=\"3-3-代码的实现\"><a href=\"#3-3-代码的实现\" class=\"headerlink\" title=\"3.3 代码的实现\"></a>3.3 代码的实现</h3><p>总体思路，用keypress事件对象获取按键字符，用keydown事件获取功能字符，如<code>Enter</code>，<code>Backspace</code>等。</p>\n<p>代码实现如下所示</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token operator\">!</span>DOCTYPE HTML PUBLIC <span class=\"token string\">\"-//W3C//DTD HTML 4.0Transitional//EN\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>js 按键记录<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"Generator\"</span> CONTENT<span class=\"token operator\">=</span><span class=\"token string\">\"EditPlus\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"Author\"</span> CONTENT<span class=\"token operator\">=</span><span class=\"token string\">\"Duke\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"Keywords\"</span> CONTENT<span class=\"token operator\">=</span><span class=\"token string\">\"js 按键记录\"</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"Description\"</span> CONTENT<span class=\"token operator\">=</span><span class=\"token string\">\"js 按键 记录\"</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script type<span class=\"token operator\">=</span><span class=\"token string\">\"text/javascript\"</span><span class=\"token operator\">></span>\n    <span class=\"token keyword\">var</span> keystring <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//记录按键的字符串</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">$</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByIdx_x</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementByIdx_x</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">keypress</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> currKey<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>CapsLock<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>e<span class=\"token operator\">=</span>e<span class=\"token operator\">||</span>event<span class=\"token punctuation\">;</span>\n　      currKey<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>keyCode<span class=\"token operator\">||</span>e<span class=\"token punctuation\">.</span>which<span class=\"token operator\">||</span>e<span class=\"token punctuation\">.</span>charCode<span class=\"token punctuation\">;</span>\n　      CapsLock<span class=\"token operator\">=</span>currKey<span class=\"token operator\">>=</span><span class=\"token number\">65</span><span class=\"token operator\">&amp;&amp;</span>currKey<span class=\"token operator\">&lt;=</span><span class=\"token number\">90</span><span class=\"token punctuation\">;</span>\n　      \n　      <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>currKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token comment\" spellcheck=\"true\">//屏蔽了退格、制表、回车、空格、方向键、删除键</span>\n            <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">case</span> <span class=\"token number\">13</span><span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">case</span> <span class=\"token number\">32</span><span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">case</span> <span class=\"token number\">37</span><span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">case</span> <span class=\"token number\">38</span><span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">case</span> <span class=\"token number\">39</span><span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">case</span> <span class=\"token number\">40</span><span class=\"token punctuation\">:</span> \n            <span class=\"token keyword\">case</span> <span class=\"token number\">46</span><span class=\"token punctuation\">:</span>\n                keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                keyName <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span>currKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        keystring <span class=\"token operator\">+</span><span class=\"token operator\">=</span> keyName<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">keydown</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> e<span class=\"token operator\">=</span>e<span class=\"token operator\">||</span>event<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">var</span> currKey<span class=\"token operator\">=</span>e<span class=\"token punctuation\">.</span>keyCode<span class=\"token operator\">||</span>e<span class=\"token punctuation\">.</span>which<span class=\"token operator\">||</span>e<span class=\"token punctuation\">.</span>charCode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>currKey<span class=\"token operator\">></span><span class=\"token number\">7</span><span class=\"token operator\">&amp;&amp;</span>currKey<span class=\"token operator\">&lt;</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span><span class=\"token punctuation\">(</span>currKey<span class=\"token operator\">></span><span class=\"token number\">31</span><span class=\"token operator\">&amp;&amp;</span>currKey<span class=\"token operator\">&lt;</span><span class=\"token number\">47</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>currKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">8</span><span class=\"token punctuation\">:</span> keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[退格]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">9</span><span class=\"token punctuation\">:</span> keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[制表]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">13</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[回车]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">32</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[空格]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">33</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[PageUp]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">34</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[PageDown]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">35</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[End]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">36</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[Home]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">37</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[方向键左]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">38</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[方向键上]\"</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">39</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[方向键右]\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">40</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[方向键下]\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> <span class=\"token number\">46</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"[删除]\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>keyName <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            keystring <span class=\"token operator\">+</span><span class=\"token operator\">=</span> keyName<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>keystring<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">keyup</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"content\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>keystring<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    document<span class=\"token punctuation\">.</span>onkeypress<span class=\"token operator\">=</span>keypress<span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>onkeydown <span class=\"token operator\">=</span>keydown<span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span>onkeyup <span class=\"token operator\">=</span>keyup<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"清空记录\"</span> onclick<span class=\"token operator\">=</span><span class=\"token string\">\"$('content').innerHTML = '';keystring = '';\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span>请按下任意键查看键盘响应键值：<span class=\"token operator\">&lt;</span>span id<span class=\"token operator\">=</span><span class=\"token string\">\"content\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></code></pre>\n<p>代码分析：<br><code>$()</code>：根据ID获取dom<br><code>keypress(e)</code>：实现对字符码的截获，由于功能按键要用keydown获取，所以在keypress中屏蔽了这些功能按键。<br><code>keydown(e)</code>：主要是实现了对功能按键的获取。<br><code>keyup(e)</code>：展示截获的字符串。</p>\n<p>代码基本上就算实现完成了！呵呵</p>\n<h2 id=\"第四部分：总结\"><a href=\"#第四部分：总结\" class=\"headerlink\" title=\"第四部分：总结\"></a>第四部分：总结</h2><p>1.H5端键盘keyCode有部分缺失，使用是要特别注意一下<br>2.编写代码的最初目的是能够通过js记录按键，并返回一个字符串。</p>\n<p>上述代码只是用js实现了基本的英文按键记录，对于汉字是无能为力，记录汉字，我能想到的办法，当然是用js，是用keydown和keyup记录底层按键事件，汉字解析当然无能为力。当然你可以用DOM的方式直接获取input中的汉字，但这已经离开了本文讨论的用按键事件实现按键记录的本意。</p>\n<p>本文demo： <a href=\"https://github.com/duanweiqiang/atPerson\" title=\"gitHub\">gitHub地址</a></p>\n<blockquote>\n<p>上述代码还可以实现添加剪切板的功能，监控删除的功能等等。。。</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h1 id=\"页面-功能实现\"><a href=\"#页面-功能实现\" class=\"headerlink\" title=\"页面@功能实现\"></a>页面@功能实现</h1><p>本文demo： <a href=\"https://github.com/duanweiqiang/atPerson\" title=\"gitHub\">gitHub地址</a></p>\n<p>需要用到的知识：</p>\n<h3 id=\"1-将div设置成可输入状态\"><a href=\"#1-将div设置成可输入状态\" class=\"headerlink\" title=\"1.将div设置成可输入状态\"></a>1.将div设置成可输入状态</h3><ul>\n<li>contentEditable 属性用于设置或返回元素的内容是否可编辑。</li>\n<li>这样就可以在div中使用标签来表示@中的人（只是为了可以在输入框中使用标签）</li>\n</ul>\n<pre><code class=\"html\">&lt;div contentEditable=&quot;true&quot;\n    id=&quot;textArea&quot;\n    onInput={this.onChangeAtPerson} \n    className={style.testArea}\n    placeholder=&quot;请输入评论，可以@其他人&quot;\n    /&gt;\n&lt;/div&gt;</code></pre>\n<h3 id=\"2-创建range-对象\"><a href=\"#2-创建range-对象\" class=\"headerlink\" title=\"2.创建range 对象\"></a>2.创建range 对象</h3><ul>\n<li>用来控制光标是否可以进入@的dom</li>\n</ul>\n<pre><code class=\"javascript\">    const range = document.createRange();</code></pre>\n<h3 id=\"3-操作range对象\"><a href=\"#3-操作range对象\" class=\"headerlink\" title=\"3.操作range对象\"></a>3.操作range对象</h3><ul>\n<li>用来控制光标是否可以进入@的dom</li>\n</ul>\n<p><strong>选择节点</strong></p>\n<p><code>selectNode()</code> :选择整个节点，包括子节点</p>\n<p><code>selectNodeContents()</code>  选择节点的子节点</p>\n<ul>\n<li>example:<pre><code class=\"html\">  &lt;!-- html --&gt;\n  &lt;p id=&quot;p1&quot;&gt;\n      &lt;b&gt;Hello&lt;/b&gt; \n      world!\n  &lt;/p&gt;</code></pre>\n<pre><code class=\"javascript\">  var range1 = document.createRange(),\n      range2 = document.createRange(),\n      p1 = document.getElementById(&quot;p1&quot;);\n  range1.selectNode(p1); //&lt;p id=&quot;p1&quot;&gt;&lt;b&gt;Hello&lt;/b&gt; world!&lt;/p&gt;\n  range2.selectNodeContents(p1); //&lt;b&gt;Hello&lt;/b&gt; world!</code></pre>\n</li>\n</ul>\n<p><code>setStart()</code>、<code>setEnd()</code>：这里选择节点和鼠标选中一样，这个是自动选中</p>\n<blockquote>\n<p>方法都接受两个参数：一个参照节点，一个节点偏移量</p>\n</blockquote>\n<ul>\n<li>example<pre><code class=\"html\">  &lt;!-- html --&gt;\n  &lt;p id=&quot;p1&quot;&gt;Hello world!&lt;/p&gt; </code></pre>\n<pre><code class=\"javascript\">  //js\n  range = document.createRange();\n  p1 = document.getElementById(&quot;p1&quot;).childNodes[0];\n  range.setStart(p1,2);\n  range.setEnd(p1,8);\n  //选中的将会是 llo wo（注意！以0为基数，空格也算一个文本字符，占1个偏移量）</code></pre>\n</li>\n</ul>\n<p><strong>操作节点</strong></p>\n<p><code>deleteContents()</code>: 这个方法能够从文档中删除范围缩包含的内容</p>\n<p><code>extractContents()</code>: 会删除并返回文档片段</p>\n<p><code>CloneContents()</code>: 创建范围对象的一个副本，不会影响原来的节点</p>\n<blockquote>\n<p>复制 DOM 范围  ： 可以使用 cloneRange()方法复制范围。这个方法会创建调用它的范围的一个副本。<br><code>var newRange = range.cloneRange();</code></p>\n</blockquote>\n<p><code>insertNode()</code>: 向范围选区的开始处插入一个节点</p>\n<p><code>surroundContents()</code>: 环绕范围插入内容 </p>\n<p>在使用完范围之后，最好是调用 <code>detach()</code> 方法，以便从创建范围的文档中分离出该范围。调用<br><code>detach()</code>之后，就可以放心地解除对范围的引用，从而让垃圾回收机制回收其内存了。来看下面的<br>例子</p>\n<p><code>range.detach();</code> //从文档中分离<br><code>range = null;</code> //解除引用<br>推荐在使用范围的最后再执行这两个步骤。一旦分离范围，就不能再恢复使用了。</p>\n<h3 id=\"4-Selection-对象\"><a href=\"#4-Selection-对象\" class=\"headerlink\" title=\"4.Selection 对象\"></a>4.Selection 对象</h3><ul>\n<li>这是一个window对象</li>\n<li>返回一个 <code>Selection</code> 对象，表示用户选择的文本范围或光标的当前位置。</li>\n<li>这里使用它来获取当前光标所处的dom</li>\n</ul>\n<p>用法:</p>\n<pre><code class=\"javascript\">    const selection = window.getSelection() ;//非react使用\n    const selection = document.getSelection();\n    this.anchorNode = selection.anchorNode;//获取当前贯标所在位置的dom（使用anchorNode子方法）</code></pre>\n<h3 id=\"5-dom中设置-人员的演示\"><a href=\"#5-dom中设置-人员的演示\" class=\"headerlink\" title=\"5.dom中设置@人员的演示\"></a>5.dom中设置@人员的演示</h3><ul>\n<li>本文通过<code>&lt;span&gt;</code>标签来实现</li>\n</ul>\n<pre><code class=\"html\">    &lt;span \n        style=&quot;background-color:#F4F4F6;padding: 3px 5px;border-radius: 3px;&quot; \n        id=${item.id} name=${item.name}&gt; //react方法\n        @${item.name}\n    &lt;/span&gt;</code></pre>\n<h3 id=\"6-通过selection来替换原来的-字符\"><a href=\"#6-通过selection来替换原来的-字符\" class=\"headerlink\" title=\"6.通过selection来替换原来的@字符\"></a>6.通过selection来替换原来的@字符</h3><blockquote>\n<p>1.先获取当前光标的位置<br>2.再获取当前输入框的dom<br>3.分析dom里的结构<br>4.将dom中的光标位置的@替换成<code>atPresonDom</code>中的结构<br>5.将生成的<code>reasonDom</code>插入到dom中<br>6.再将光标置于当前替换的<code>&lt;span&gt;</code>标签之后</p>\n</blockquote>\n<pre><code class=\"javascript\">selectPerson = item =&gt; {\n    const anchorNode = this.anchorNode;\n    const selectStartIndex = this.selectStartIndex;\n    const atPresonDom = `&amp;nbsp;&lt;span style=&quot;background-color:#F4F4F6;padding: 3px 5px;border-radius: 3px;&quot; id=${item.id} name=${item.name}&gt;@${item.name}&lt;/span&gt;&amp;nbsp;`;\n    let reasonDom = &#39;&#39;;\n    const range = document.createRange();\n    let targetDomIndex = 0;\n    [...textDom.childNodes].forEach((each, index) =&gt; {\n      if (each.nodeName === &#39;SPAN&#39;) {\n        reasonDom += each.outerHTML;\n      } else if (anchorNode === each) {\n        targetDomIndex = index;\n        const tempEachDom = each;\n        const dom1 = tempEachDom.data.substring(0, selectStartIndex - 1);\n        const dom2 = atPresonDom;\n        const dom3 = tempEachDom.data.substring(\n          selectStartIndex + this.selectText.length,\n          each.data.length,\n        );\n        reasonDom += dom1 + dom2 + dom3;\n      } else {\n        reasonDom += each.data;\n      }\n    });\n    textDom.innerHTML = reasonDom;//插入dom\n    const textDomChildList = [...textDom.childNodes];\n    const textDomLastIndex =\n      textDomChildList.length - 1 &gt; -1 ? textDomChildList.length - 1 : 0;\n    const targetIndex =\n      targetDomIndex + 2 &gt; textDomLastIndex\n        ? textDomLastIndex\n        : targetDomIndex + 2;\n    const targetAnchorNode = textDomChildList[targetIndex];\n    const selection = document.getSelection();\n    range.setStart(targetAnchorNode, 1);\n    range.setEnd(targetAnchorNode, 1);\n    selection.removeAllRanges();\n    selection.addRange(range);\n    this.selectText = &#39;&#39;;\n    this.setState({ personDataList: [] });\n    this.selectStartIndex = -1;\n};</code></pre>\n<h3 id=\"7-键盘控制选中-后边附录键盘事件\"><a href=\"#7-键盘控制选中-后边附录键盘事件\" class=\"headerlink\" title=\"7.键盘控制选中(后边附录键盘事件)\"></a>7.键盘控制选中(后边附录键盘事件)</h3><ul>\n<li>通过键盘来控制循环选中下拉人员列表</li>\n<li>键盘控制删除整体模块</li>\n<li>键盘控制光标进入空能</li>\n</ul>\n<pre><code class=\"javascript\">keydownEvent = e =&gt; {//键盘事件\n    if (e.keyCode === 8) {\n      const selection = document.getSelection();\n      this.anchorNode = selection.anchorNode;\n      const range = selection.getRangeAt(0);\n\n      // 删除@模块\n      if (selection.focusNode.parentNode.nodeName === &#39;SPAN&#39;) {\n        textDom?.removeChild(range.startContainer.parentElement);\n      }\n    }\n    if ([38, 40].indexOf(e.keyCode) &gt; -1) {\n      //up&amp;down\n      const { personDataList, curSelectItem } = this.state;\n      personDataList.length &gt; 0 &amp;&amp; e.preventDefault(); //有下拉是阻止冒泡\n      let targetIndex = 0;\n      personDataList.forEach((item, index) =&gt; {\n        targetIndex = item.id === curSelectItem.id ? index : targetIndex;\n      });\n      if (e.keyCode === 40) { //down\n        targetIndex = targetIndex === personDataList.length - 1 ? 0 : targetIndex + 1;\n      }\n      if (e.keyCode === 38) { //up\n        targetIndex = targetIndex === 0 ? personDataList.length - 1 : targetIndex - 1;\n      }\n      this.setState({ curSelectItem: personDataList[targetIndex] });\n    }\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      const { curSelectItem } = this.state;\n      curSelectItem &amp;&amp; this.selectPerson(curSelectItem);\n      this.setState({ curSelectItem: null });\n    }\n  };</code></pre>\n<h3 id=\"8-当光标删除到整体模块处理\"><a href=\"#8-当光标删除到整体模块处理\" class=\"headerlink\" title=\"8.当光标删除到整体模块处理\"></a>8.当光标删除到整体模块处理</h3><p>当光标识别到进入@整体模块时，需要整体删除</p>\n<p>这里使用的时<code>&lt;span&gt;</code>标签来表示的</p>\n<pre><code class=\"javascript\">if (selection.focusNode.parentNode.nodeName === &#39;SPAN&#39;) {\n    //不允许编辑@人员\n    textDom?.removeChild(selection.focusNode.parentNode);\n    this.setState({ personDataList: [] });\n    this.selectStartIndex = -1;\n}</code></pre>\n<h3 id=\"9-效果图\"><a href=\"#9-效果图\" class=\"headerlink\" title=\"9.效果图\"></a>9.效果图</h3><p><img src=\"http://ww1.sinaimg.cn/large/987eaf20gy1ge7m81xiq0j21dq0m8n17.jpg\" alt=\"demo2.png\"></p>\n<h1 id=\"附：js键盘事件全面控制详解\"><a href=\"#附：js键盘事件全面控制详解\" class=\"headerlink\" title=\"附：js键盘事件全面控制详解\"></a>附：js键盘事件全面控制详解</h1><p>主要分四个部分<br>第一部分：浏览器的按键事件<br>第二部分：兼容浏览器<br>第三部分：代码实现和优化<br>第四部分：总结</p>\n<h2 id=\"第一部分：浏览器的按键事件\"><a href=\"#第一部分：浏览器的按键事件\" class=\"headerlink\" title=\"第一部分：浏览器的按键事件\"></a>第一部分：浏览器的按键事件</h2><p>1.用js实现键盘记录，要关注浏览器的三种按键事件类型，即<code>keydown</code>，<code>keypress</code>和<code>keyup</code>，它们分别对应<code>onkeydown</code>、<code>onkeypress</code>和<code>onkeyup</code>这三个事件句柄。一个典型的按键会产生所有这三种事件，依次是<code>keydown</code>，<code>keypress</code>，然后是按键释放时候的<code>keyup</code>。</p>\n<p>2.在这3种事件类型中，<code>keydown</code>和<code>keyup</code>比较底层，而<code>keypress</code>比较高级。这里所谓的高级是指，当用户按下<code>shift + 1</code>时，<code>keypress</code>是对这个按键事件进行解析后返回一个可打印的“!”字符，而<code>keydown</code>和<code>keyup</code>只是记录了<code>shift + 1</code>这个事件。</p>\n<p>3.但是<code>keypress</code>只能针对一些可以打印出来的字符有效，而对于功能按键，如<code>F1-F12</code>、<code>Backspace</code>、<code>Enter</code>、<code>Escape</code>、<code>PageUP</code>、<code>PageDown</code>和箭头方向等，就不会产生<code>keypress</code>事件，但是可以产生<code>keydown</code>和<code>keyup</code>事件。然而在FireFox中，功能按键是可以产生<code>keypress</code>事件的。</p>\n<p>4.传递给<code>keydown</code>、<code>keypress</code>和<code>keyup</code>事件句柄的事件对象有一些通用的属性。如果<code>Alt</code>、<code>Ctrl</code>或<code>Shift</code>和一个按键一起按下，这通过事件的<code>altKey</code>、<code>ctrlKey</code>和<code>shiftKey</code>属性表示，这些属性在FireFox和IE中是通用的。</p>\n<h2 id=\"第二部分：兼容浏览器\"><a href=\"#第二部分：兼容浏览器\" class=\"headerlink\" title=\"第二部分：兼容浏览器\"></a>第二部分：兼容浏览器</h2><ul>\n<li>凡是涉及浏览器的js，就都要考虑浏览器兼容的问题。</li>\n<li>目前常用的浏览器主要有基于IE和基于Mozilla两大类。Maxthon是基于IE内核的，而FireFox和Opera是基于Mozilla内核的。</li>\n</ul>\n<h3 id=\"2-1-事件的初始化\"><a href=\"#2-1-事件的初始化\" class=\"headerlink\" title=\"2.1 事件的初始化\"></a>2.1 事件的初始化</h3><p>首先需要了解的是如何初始化该事件，基本语句如下：</p>\n<pre><code class=\"javascript\">    function keyDown(){}\n    document.onkeydown = keyDown;</code></pre>\n<p><strong><em>react 绑定</em></strong></p>\n<pre><code class=\"javascript\">    //直接绑定在原生事件上，这个一般是用来捕捉编辑的时候的事件，用的不多\n    &lt;textarea onKeyDown={e=&gt; console.log( e.keyCode ) } /&gt;\n    //通过声明周期直接绑定到document的事件上，这个方式一般用来做快捷键比较多\n    export class KeyBind extends React.Component {\n        componentDidMount(){\n            document.addEventListener(&quot;keydown&quot;, this.onKeyDown)\n        }\n\n        componentWillUnmount(){\n            document.removeEventListener(&quot;keydown&quot;, this.onKeyDown)\n        }\n\n        onKeyDown = (e) =&gt; {\n            switch( e.keyCode) {\n            case 13://回车事件\n                break\n            }\n        }\n    }</code></pre>\n<p>当浏览器读到这个语句时，无论按下键盘上的哪个键，都将呼叫KeyDown()函数。</p>\n<h3 id=\"2-2-FireFox和Opera的实现方法\"><a href=\"#2-2-FireFox和Opera的实现方法\" class=\"headerlink\" title=\"2.2 FireFox和Opera的实现方法\"></a>2.2 FireFox和Opera的实现方法</h3><p>FireFox和Opera等程序实现要比IE麻烦，所以这里先描述一下。</p>\n<p><code>keyDown()</code>函数有一个隐藏的变量–一般的，我们使用字母“e”来表示这个变量。  </p>\n<pre><code class=\"javascript\">    function keyDown(e)  </code></pre>\n<p>变量e表示发生击键事件，寻找是哪个键被按下，要使用which这个属性：  </p>\n<pre><code class=\"javascript\">    e.which  </code></pre>\n<p><code>e.which</code>将给出该键的索引值，把索引值转化成该键的字母或数字值的方法需要用到静态函数<code>String.fromCharCode()</code>，如下： </p>\n<pre><code class=\"javascript\">    String.fromCharCode(e.which)</code></pre>\n<p>把上面的语句放在一起，我们可以在FireFox中得到被按下的是哪一个键：  </p>\n<pre><code class=\"javascript\">    function keyDown(e) {  \n        var keycode = e.which;  \n        var realkey = String.fromCharCode(e.which);  \n    　　alert(&quot;按键码: &quot; + keycode + &quot; 字符: &quot; + realkey);  \n    }\n    document.onkeydown = keyDown;</code></pre>\n<h3 id=\"2-3-IE的实现方法\"><a href=\"#2-3-IE的实现方法\" class=\"headerlink\" title=\"2.3 IE的实现方法\"></a>2.3 IE的实现方法</h3><p>IE的程序不需要e变量，用<code>window.event.keyCode</code>来代替<code>e.which</code>，把键的索引值转化为真实键值方法类似：<code>String.fromCharCode(event.keyCode)</code>，程序如下：</p>\n<pre><code class=\"javascript\">    function keyDown() {  \n        var keycode = event.keyCode;  \n        var realkey = String.fromCharCode(event.keyCode);  \n        alert(&quot;按键码: &quot; + keycode + &quot; 字符: &quot; + realkey);  \n    }  \n    document.onkeydown = keyDown;</code></pre>\n<h3 id=\"2-4-判断浏览器类型\"><a href=\"#2-4-判断浏览器类型\" class=\"headerlink\" title=\"2.4 判断浏览器类型\"></a>2.4 判断浏览器类型</h3><p>上面了解了在各种浏览器里是如何实现获取按键事件对象的方法，那么下面需要判断浏览器类型，这个方法很多，有比较方便理解的，也有很巧妙的办法，先说一般的方法：就是利用<code>navigator</code>对象的<code>appName属性</code>，当然也可以用<code>userAgent</code>属性，这里用<code>appName</code>来实现判断浏览器类型，IE和Maxthon的appName是“Microsoft Internet Explorer” ,而FireFox和Opera的appName是“Netscape”，所以一个功能比较简单的代码如下：</p>\n<pre><code class=\"javascript\">    function keyUp(e) {   \n        if(navigator.appName == &quot;Microsoft Internet Explorer&quot;){\n            var keycode = event.keyCode;  \n            var realkey = String.fromCharCode(event.keyCode);  \n        }else{\n            var keycode = e.which;  \n            var realkey = String.fromCharCode(e.which);  \n        }\n        alert(&quot;按键码: &quot; + keycode + &quot; 字符: &quot; + realkey);\n    }\n    document.onkeyup = keyUp;</code></pre>\n<p>比较简洁的方法是：</p>\n<pre><code class=\"javascript\">    function keyUp(e) {\n        var currKey=0, e=e||event;\n        currKey=e.keyCode||e.which||e.charCode;\n        var keyName = String.fromCharCode(currKey);\n        alert(&quot;按键码: &quot; + currKey + &quot; 字符: &quot; + keyName);\n    }\n    document.onkeyup = keyUp;</code></pre>\n<p>上面这种方法比较巧妙，简单地解释一下：</p>\n<blockquote>\n<p>首先，e=e||event;这句代码是为了进行浏览器事件对象获取的兼容。js中这句代码的意思是，如果在FireFox或Opera中，隐藏的变量e是存在的，那么e||event返回e，如果在IE中，隐藏变量e是不存在，则返回event。<br>其次，<code>currKey=e.keyCode||e.which||e.charCode</code>;这句是为了兼容浏览器按键事件对象的按键码属性（详见第三部分），如IE中，只有keyCode属性，而FireFox中有which和charCode属性，Opera中有keyCode和which属性等。<br>上述代码只是兼容了浏览器，获取了keyup事件对象，简单的弹出了按键码和按键的字符，但是问题出现了，当你按键时，字符键都是大写的，而按shift键时，显示的字符很奇怪，所以就需要优化一下代码了。</p>\n</blockquote>\n<h2 id=\"第三部分：代码实现和优化\"><a href=\"#第三部分：代码实现和优化\" class=\"headerlink\" title=\"第三部分：代码实现和优化\"></a>第三部分：代码实现和优化</h2><h3 id=\"3-1-按键事件的按键码和字符码\"><a href=\"#3-1-按键事件的按键码和字符码\" class=\"headerlink\" title=\"3.1 按键事件的按键码和字符码\"></a>3.1 按键事件的按键码和字符码</h3><p>在IE中，只有一个<code>keyCode</code>属性，并且它的解释取决于事件类型。对于<code>keydown</code>来说，<code>keyCode</code>存储的是按键码，对于 <code>keypress</code>事件来说，<code>keyCode</code>存储的是一个字符码。而IE中没有<code>which</code>和<code>charCode</code>属性，所以<code>which和charCode</code>属性始终为<code>undefined</code>。</p>\n<p>FireFox中keyCode始终为0，时间<code>keydown</code>/<code>keyup</code>时，<code>charCode</code>=0，which为按键码。事件<code>keypress</code>时，which和charCode二者的值相同，存储了字符码。</p>\n<p>在Opera中，<code>keyCode</code>和<code>which</code>二者的值始终相同，在<code>keydown/keyup</code>事件中，它们存储按键码，在<code>keypress</code>时间中，它们存储字符码，而charCode没有定义，始终是undefined。</p>\n<h3 id=\"3-2-用keydown-keyup还是keypress\"><a href=\"#3-2-用keydown-keyup还是keypress\" class=\"headerlink\" title=\"3.2 用keydown/keyup还是keypress\"></a>3.2 用keydown/keyup还是keypress</h3><p>第一部分已经介绍了<code>keydown/keyup</code>和<code>keypress</code>的区别，有一条比较通用的规则，<code>keydown</code>事件对于功能按键来说是最有用的，而<code>keypress</code>事件对于可打印按键来说是最有用的。</p>\n<p>键盘记录主要是针对于可打印字符和部分功能按键，所以<code>keypress</code>是首选，然而正如第一部分提到的，IE中<code>keypress</code>不支持功能按键，所以应该用<code>keydown/keyup</code>事件来进行补充。</p>\n<h3 id=\"3-3-代码的实现\"><a href=\"#3-3-代码的实现\" class=\"headerlink\" title=\"3.3 代码的实现\"></a>3.3 代码的实现</h3><p>总体思路，用keypress事件对象获取按键字符，用keydown事件获取功能字符，如<code>Enter</code>，<code>Backspace</code>等。</p>\n<p>代码实现如下所示</p>\n<pre><code class=\"javascript\">!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.0Transitional//EN&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;js 按键记录&lt;/title&gt;\n    &lt;meta name=&quot;Generator&quot; CONTENT=&quot;EditPlus&quot;&gt;\n    &lt;meta name=&quot;Author&quot; CONTENT=&quot;Duke&quot;&gt;\n    &lt;meta name=&quot;Keywords&quot; CONTENT=&quot;js 按键记录&quot;&gt;\n    &lt;meta name=&quot;Description&quot; CONTENT=&quot;js 按键 记录&quot;&gt;\n&lt;/head&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n    var keystring = &quot;&quot;;//记录按键的字符串\n\n    function $(s){\n        return document.getElementByIdx_x(s)?document.getElementByIdx_x(s):s;\n    }\n\n    function keypress(e){\n        var currKey=0,CapsLock=0,e=e||event;\n　      currKey=e.keyCode||e.which||e.charCode;\n　      CapsLock=currKey&gt;=65&amp;&amp;currKey&lt;=90;\n　      \n　      switch(currKey){//屏蔽了退格、制表、回车、空格、方向键、删除键\n            case 8: \n            case 9: \n            case 13: \n            case 32: \n            case 37: \n            case 38: \n            case 39: \n            case 40: \n            case 46:\n                keyName = &quot;&quot;;\n                break;\n            default:\n                keyName = String.fromCharCode(currKey); break;\n        }\n        keystring += keyName;\n    }\n\n    function keydown(e){\n        var e=e||event;\n        var currKey=e.keyCode||e.which||e.charCode;\n        if((currKey&gt;7&amp;&amp;currKey&lt;14)||(currKey&gt;31&amp;&amp;currKey&lt;47)){\n            switch(currKey) {\n                case 8: keyName = &quot;[退格]&quot;; break;\n                case 9: keyName = &quot;[制表]&quot;; break;\n                case 13:keyName = &quot;[回车]&quot;; break;\n                case 32:keyName = &quot;[空格]&quot;; break;\n                case 33:keyName = &quot;[PageUp]&quot;; break;\n                case 34:keyName = &quot;[PageDown]&quot;; break;\n                case 35:keyName = &quot;[End]&quot;; break;\n                case 36:keyName = &quot;[Home]&quot;; break;\n                case 37:keyName = &quot;[方向键左]&quot;; break;\n                case 38:keyName = &quot;[方向键上]&quot;; break;\n                case 39:keyName = &quot;[方向键右]&quot;;break;\n                case 40:keyName = &quot;[方向键下]&quot;;break;\n                case 46:keyName = &quot;[删除]&quot;;break;\n                default:keyName = &quot;&quot;;break;\n            }\n            keystring += keyName;\n        }\n        $(&quot;content&quot;).innerHTML=keystring;\n    }\n\n    function keyup(e){\n        $(&quot;content&quot;).innerHTML=keystring;\n    }\n    document.onkeypress=keypress;\n    document.onkeydown =keydown;\n    document.onkeyup =keyup;\n&lt;/script&gt;\n&lt;body&gt;\n    &lt;input type=&quot;text&quot; /&gt;\n    &lt;input type=&quot;button&quot; value=&quot;清空记录&quot; onclick=&quot;$(&#39;content&#39;).innerHTML = &#39;&#39;;keystring = &#39;&#39;;&quot;/&gt;\n    &lt;br/&gt;请按下任意键查看键盘响应键值：&lt;span id=&quot;content&quot;&gt;&lt;/span&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>代码分析：<br><code>$()</code>：根据ID获取dom<br><code>keypress(e)</code>：实现对字符码的截获，由于功能按键要用keydown获取，所以在keypress中屏蔽了这些功能按键。<br><code>keydown(e)</code>：主要是实现了对功能按键的获取。<br><code>keyup(e)</code>：展示截获的字符串。</p>\n<p>代码基本上就算实现完成了！呵呵</p>\n<h2 id=\"第四部分：总结\"><a href=\"#第四部分：总结\" class=\"headerlink\" title=\"第四部分：总结\"></a>第四部分：总结</h2><p>1.H5端键盘keyCode有部分缺失，使用是要特别注意一下<br>2.编写代码的最初目的是能够通过js记录按键，并返回一个字符串。</p>\n<p>上述代码只是用js实现了基本的英文按键记录，对于汉字是无能为力，记录汉字，我能想到的办法，当然是用js，是用keydown和keyup记录底层按键事件，汉字解析当然无能为力。当然你可以用DOM的方式直接获取input中的汉字，但这已经离开了本文讨论的用按键事件实现按键记录的本意。</p>\n<p>本文demo： <a href=\"https://github.com/duanweiqiang/atPerson\" title=\"gitHub\">gitHub地址</a></p>\n<blockquote>\n<p>上述代码还可以实现添加剪切板的功能，监控删除的功能等等。。。</p>\n</blockquote>\n"},{"title":"umi ts 升级","date":"2021-01-22T12:07:17.000Z","img":"/medias/featureimages/2.jpg","top":true,"cover":true,"coverImg":"/medias/featureimages/7.jpg","toc":true,"mathjax":false,"summary":"TypeScript是强类型的语言，可通过编译成纯JS，提高代码的质量，TS编译工具也可运行在任何服务器和系统上。","_content":"\n### umi配置ts的过程\n\n#### 背景（为什么要配置TS）\n\n  1.本来项目是一个老的项目，之前有过升级但是由于大家技术水平的不统一，TS学习成本高，导致一直在搁浅中。\n  2.由于现在ts的普及以及最近代码质量越来越难以把控，所以引入ts是控制质量的一种方式。\n\n##### ts有啥好呢？\n  1.可读性：类型明确，不需要额外注释类型；看到类型就知道怎么用；\n  2.可维护性：在编译间断就可以发现错误，避免认为错误出现；\n  3.兼容性：兼容js语法；可以直接将`*.js`改为`*.ts`使用；完全支持ES6规范；\n  4.第三方库：兼容第三方库，即使第三方库不是用tst写的，也可以编写单独的类型文件供ts读取；\n\n##### ts有啥不好呢？\n  1.从纯js转过来有一定的难度，好多写法类似java；\n  2.类型定义比较繁琐和js相比；\n  3.一些库兼容性不是很好；\n  4.需要额外的构建工作量；\n\n#### umi怎么配置\n\n  - 新的umi 3 create工具包会自动帮你配好。老的项目需要手动配置；我们这里主要介绍老项目的配置；\n\n  - 不管是老项目还是新项目，我们至少都要懂他的配置，这样便于我们后期如果项目变庞大复杂了，这是对项目进行优化；\n  \n##### umi3脚手架配置\n  按umi标准文档配置就可以了；\n  umi `create-app`文档：https://umijs.org/zh-CN/docs\n  ```\n    $ yarn create @umijs/umi-app\n      Copy:  .editorconfig\n      Write: .gitignore\n      Copy:  .prettierignore\n      Copy:  .prettierrc\n      Write: .umirc.ts\n      Copy:  mock/.gitkeep\n      Write: package.json\n      Copy:  README.md\n      Copy:  src/pages/index.less\n      Copy:  src/pages/index.tsx\n      Copy:  tsconfig.json\n      Copy:  typings.d.ts\n      .\n      .\n      .\n  ```\n  目录结构\n  ```\n    .\n    ├── package.json\n    ├── .umirc.ts\n    ├── .env\n    ├── dist\n    ├── mock\n    ├── public\n    └── src\n        ├── .umi\n        ├── layouts/index.tsx\n        ├── pages\n            ├── index.less\n            └── index.tsx\n        └── app.ts\n  balabala ... 这里省略一万字（具体看文档就可以了\n  ```\n\n##### umi老的项目配置\n\n  (1).umirc.ts\n  官方解释： 配置文件，包含 umi 内置功能和插件的配置。\n  话不多说，和老的`.js`一样并且可以共用。即运行时配置。\n\n  (2)tsconfig.json\n  官方解释： TypeScript项目的根目录；\n  我的解释：用来配置编译ts项目的根文件和编译配置；\n  ```\n  {\n    \"compilerOptions\": {\n      \"target\": \"esnext\",\n      \"module\": \"esnext\",\n      \"moduleResolution\": \"node\",\n      \"importHelpers\": true,\n      \"jsx\": \"react\",\n      \"esModuleInterop\": true,\n      \"sourceMap\": true,\n      \"baseUrl\": \".\",\n      \"strict\": true,\n      \"allowUnreachableCode\":false, // 不报告执行不到的代码错误。\n      \"allowJs\": true, //允许编译javascript文件。\n      \"allowSyntheticDefaultImports\": true, //允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。\n      \"experimentalDecorators\": true,\n      \"outDir\": \"dist/\",\n      \"paths\": {\n        \"@/*\": [\"src/*\"],\n        \"@*\": [\"src/*\"],\n        \"@SDVariableJS\": [\"config/variableConfig.js\"],\n      }\n    },\n    \"files\": [\n      \"core.ts\",\n      \"sys.ts\",\n      \"types.ts\",\n    ],\n    \"include\":[],\n    \"exclude\": [\"node_modules\", \"dist\"]\n  }\n  ```\n\n  常用的参数配置：\n\n  `allowUnreachableCode`:默认值-`false` 解释：不报告执行不到的代码错误。\n  `allowJs`:默认值-`true` 解释：允许编译javascript文件。\n  `allowSyntheticDefaultImports`:默认值-`true` 解释：允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。\n  `noImplicitUseStrict`:默认值-`alse` 解释：模块输出中不包含 \"use strict\"指令。\n  `alwaysStrict`:默认值-`false` 解释：以严格模式解析并为每个源文件生成 \"use strict\"语句\n  `checkJs`:默认值-`false` 解释：在`.js`文件中报告错误。与 `allowJs`配合使用。\n\n  更多参数配置见：https://www.tslang.cn/docs/handbook/compiler-options.html\n\n  (3)typings.d.ts\n\n  释义：存放一些声明，类似于C/C++的.h头文件。(不知道大家理解么，写过C的应该懂这个)\n\n  - TypeScript相比JavaScript增加了类型声明。这些类型声明帮助编译器识别类型，从而防止开发者“搬起石头砸自己的脚”。原则上TypeScript 需要开发者做到先声明后使用。这就导致开发者在调用很多原生接口（浏览器、Node.js）或者第三方模块的时候，因为某些全局变量或者对象的方法并没有声明过，导致编译器的类型检查失败。\n\n  - 用ts写的模块在发布的时候仍然是用js发布;\n  这就导致一个问题：ts 那么多类型数据都没了，所以需要一个`*.d.ts`文件来标记某个js库里面对象的类型然后typings就是一个网络上的d.ts数据库;\n  \n  - `*.d.ts`类型定义文件，我感觉现在对我的用处就是编辑器的智能提示\n\n  (4)tslint.json\n\n  释义：保存了要使用的代码检查器的设置。\n  TSLint 对TypeScript 支持得很好，并且如果你使用的是 VsCode IDE，还有出色的插件支持。\n\n  tslint.json\n  ```\n  {\n    \"defaultSeverity\": \"error\",\n    \"extends\": [\n      \"tslint:latest\",\n      \"tslint-react\",\n      \"tslint-config-prettier\" // 安装tslint-config-prettier后，tslint-config-prettier禁用TSLint的所有格式设置规则, TSLint 和 prettier在代码格式化规则上就不会有冲突了\n    ],\n    \"jsRules\": {},\n    \"rules\": {\n      \"object-literal-sort-keys\": false,\n      \"no-console\": true,\n      \"jsx-no-lambda\": false,\n      \"no-submodule-imports\": false,\n      \"no-implicit-dependencies\": false\n    }\n  }\n  ```\n\n  tslint保存时校验配置\n  ```\n  \"editor.codeActionsOnSave\": {\n      \n      \"source.fixAll.eslint\": true, // For ESLint\n      \n      \"source.fixAll.tslint\": true, // For TSLint\n      \n      \"source.fixAll.stylelint\": true， // For Stylelint\n  }\n  ```\n  prettier保存时校验配置\n  ```\n  \"editor.formatOnSave\": true,\n  ```\n  - ps: 使用`tslint-config-prettier`关闭tslint中有关格式的规则，避免tslint与prettier在格式规则上产生冲突。目前我们的项目中（.jsx）中没有开启这一项。\n  \n\n  当按ctrl+s保存代码时，tslint插件会自动按照默认配置文件（项目根目录下的`tslint.json`）检查代码错误，prettier插件会自动按照默认配置文件（项目根目录下的`.prettierrc`）检查代码风格，并自动矫正。(不建议使用)\n\n#### VSCode配置\n  建议安装tsLint 插件插件，vsCode中直接搜索安装；\n  - ps：这个库可`esLint`库可以共存，但是需要进行配置，保证在`.jsx`/`.tsx`文件中只有一个生效，不然错误提示会有误报的情况。\n  具体配置地址：https://github.com/Microsoft/typescript-tslint-plugin；\n\n  ![](https://img.imgdb.cn/item/600ee2ed3ffa7d37b3236844.png)\n\n  到此时，我们的环境就配好了，接下来写一个小的React的demo.tsx吧；\n\n#### React typescript写法 \n  几个概念React.FC：\n  -FC = Functional Component\n  -SFC = Stateless Functional Component (已弃用)\n\n  学习typescript的基本语法,具体ts见：https://www.runoob.com/typescript/ts-variables.html\n  \n  - ps: 我有视频，如有需要可找我要哈😄；\n\n  有了以上typescrt姿势，我们就可以开始写ts代码了。⛽️\n\n  下面是我写的两种常见写法的demo；\n\n##### 泛型组件写法(对标Class写法)\n\n```javascript\n\nimport React from 'react';\nimport UseInfo from \"./UseInfo\"; // 引用其他组件（可以是.tsx，也可以是.jsx）\nimport style from './test.less'; // 引用样式文件\n\nfunction getExclamationMarks(numChars: number) {\n  return Array(numChars + 1).join('!');\n}\n\ninterface Props {\n  name: string;\n  enthusiasmLevel: number;\n}\ninterface State {\n  now: string,\n}\n\nclass Test extends React.Component<Props, State> {\n  constructor(props:Props) {\n    super(props);\n    this.state = {\n      now: \"fff\",\n    };\n  }\n  public clickTest = (x:string) => {\n    console.log(x)\n    this.setState({now: '###'});\n  }\n  render() {\n    const { name, enthusiasmLevel = 1 } = this.props;\n    const { now } = this.state;\n\n    console.log('@@@@@');\n    const hello : string = 111\n    console.log(hello)\n\n    if (enthusiasmLevel <= 0) {\n      throw new Error('You could be a little more enthusiastic. :D');\n    }\n\n    return (\n      <div className=\"hello\">\n        <UseInfo />\n        <div className=\"greeting\">\n          {`Hello ${name + getExclamationMarks(enthusiasmLevel)}`}\n        </div>\n        <div className={style.button} onClick={()=>this.clickTest(now)}></div>\n      </div>\n    );\n  }\n}\nexport default Test;\n\n```\n\n##### Hooks写法\n\n```javascript\nimport React, { Fragment, useState } from 'react';\nimport UseInfo from \"./UseInfo\"; // 引用其他组件（可以是.tsx，也可以是.jsx）\nimport style from './base.less'; // 引用样式文件\n\ninterface IProps {\n    changeTitle?: () => void;\n}\n\nconst Auth = (props: IProps) => {\n    const [houseTitle, setHoueseTitle] = useState<string>('')\n    return (<Fragment>\n      <useInfo />\n      <div>\n        <input\n            type=\"text\"\n            className={style.demo1}\n            placeholder={'please input'}\n            value={houseTitle}\n            onChange={changeTitle}\n        />\n    </div>\n    </Fragment>)\n    function changeTitle(e:any) { // 房屋标题\n        setHoueseTitle(e.target.value)\n    }\n}\nexport default Auth\n```\n好了，我们的一个完整的`umi`支持`ts`写法到这里就结束了，希望大家都学会了。\n\n#### 结语\n随着前端技术的发展。弱类型基本不能满足我们日益复杂的业务，强类型语言是未来的趋势。\nFramework - Angular2、UI - ant-design、library - RxJS等项目已经都迁移到typescript了，我们还不跟进吗。。。","source":"_posts/umi-ts-升级.md","raw":"---\ntitle: umi ts 升级\ndate: 2021-01-22 20:07:17\nimg: /medias/featureimages/2.jpg\ntop: true\ncover: true\ncoverImg: /medias/featureimages/7.jpg\ntoc: true\nmathjax: false\nsummary: TypeScript是强类型的语言，可通过编译成纯JS，提高代码的质量，TS编译工具也可运行在任何服务器和系统上。\ncategories: 全站\ntags:\n- ts\n- umi\n---\n\n### umi配置ts的过程\n\n#### 背景（为什么要配置TS）\n\n  1.本来项目是一个老的项目，之前有过升级但是由于大家技术水平的不统一，TS学习成本高，导致一直在搁浅中。\n  2.由于现在ts的普及以及最近代码质量越来越难以把控，所以引入ts是控制质量的一种方式。\n\n##### ts有啥好呢？\n  1.可读性：类型明确，不需要额外注释类型；看到类型就知道怎么用；\n  2.可维护性：在编译间断就可以发现错误，避免认为错误出现；\n  3.兼容性：兼容js语法；可以直接将`*.js`改为`*.ts`使用；完全支持ES6规范；\n  4.第三方库：兼容第三方库，即使第三方库不是用tst写的，也可以编写单独的类型文件供ts读取；\n\n##### ts有啥不好呢？\n  1.从纯js转过来有一定的难度，好多写法类似java；\n  2.类型定义比较繁琐和js相比；\n  3.一些库兼容性不是很好；\n  4.需要额外的构建工作量；\n\n#### umi怎么配置\n\n  - 新的umi 3 create工具包会自动帮你配好。老的项目需要手动配置；我们这里主要介绍老项目的配置；\n\n  - 不管是老项目还是新项目，我们至少都要懂他的配置，这样便于我们后期如果项目变庞大复杂了，这是对项目进行优化；\n  \n##### umi3脚手架配置\n  按umi标准文档配置就可以了；\n  umi `create-app`文档：https://umijs.org/zh-CN/docs\n  ```\n    $ yarn create @umijs/umi-app\n      Copy:  .editorconfig\n      Write: .gitignore\n      Copy:  .prettierignore\n      Copy:  .prettierrc\n      Write: .umirc.ts\n      Copy:  mock/.gitkeep\n      Write: package.json\n      Copy:  README.md\n      Copy:  src/pages/index.less\n      Copy:  src/pages/index.tsx\n      Copy:  tsconfig.json\n      Copy:  typings.d.ts\n      .\n      .\n      .\n  ```\n  目录结构\n  ```\n    .\n    ├── package.json\n    ├── .umirc.ts\n    ├── .env\n    ├── dist\n    ├── mock\n    ├── public\n    └── src\n        ├── .umi\n        ├── layouts/index.tsx\n        ├── pages\n            ├── index.less\n            └── index.tsx\n        └── app.ts\n  balabala ... 这里省略一万字（具体看文档就可以了\n  ```\n\n##### umi老的项目配置\n\n  (1).umirc.ts\n  官方解释： 配置文件，包含 umi 内置功能和插件的配置。\n  话不多说，和老的`.js`一样并且可以共用。即运行时配置。\n\n  (2)tsconfig.json\n  官方解释： TypeScript项目的根目录；\n  我的解释：用来配置编译ts项目的根文件和编译配置；\n  ```\n  {\n    \"compilerOptions\": {\n      \"target\": \"esnext\",\n      \"module\": \"esnext\",\n      \"moduleResolution\": \"node\",\n      \"importHelpers\": true,\n      \"jsx\": \"react\",\n      \"esModuleInterop\": true,\n      \"sourceMap\": true,\n      \"baseUrl\": \".\",\n      \"strict\": true,\n      \"allowUnreachableCode\":false, // 不报告执行不到的代码错误。\n      \"allowJs\": true, //允许编译javascript文件。\n      \"allowSyntheticDefaultImports\": true, //允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。\n      \"experimentalDecorators\": true,\n      \"outDir\": \"dist/\",\n      \"paths\": {\n        \"@/*\": [\"src/*\"],\n        \"@*\": [\"src/*\"],\n        \"@SDVariableJS\": [\"config/variableConfig.js\"],\n      }\n    },\n    \"files\": [\n      \"core.ts\",\n      \"sys.ts\",\n      \"types.ts\",\n    ],\n    \"include\":[],\n    \"exclude\": [\"node_modules\", \"dist\"]\n  }\n  ```\n\n  常用的参数配置：\n\n  `allowUnreachableCode`:默认值-`false` 解释：不报告执行不到的代码错误。\n  `allowJs`:默认值-`true` 解释：允许编译javascript文件。\n  `allowSyntheticDefaultImports`:默认值-`true` 解释：允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。\n  `noImplicitUseStrict`:默认值-`alse` 解释：模块输出中不包含 \"use strict\"指令。\n  `alwaysStrict`:默认值-`false` 解释：以严格模式解析并为每个源文件生成 \"use strict\"语句\n  `checkJs`:默认值-`false` 解释：在`.js`文件中报告错误。与 `allowJs`配合使用。\n\n  更多参数配置见：https://www.tslang.cn/docs/handbook/compiler-options.html\n\n  (3)typings.d.ts\n\n  释义：存放一些声明，类似于C/C++的.h头文件。(不知道大家理解么，写过C的应该懂这个)\n\n  - TypeScript相比JavaScript增加了类型声明。这些类型声明帮助编译器识别类型，从而防止开发者“搬起石头砸自己的脚”。原则上TypeScript 需要开发者做到先声明后使用。这就导致开发者在调用很多原生接口（浏览器、Node.js）或者第三方模块的时候，因为某些全局变量或者对象的方法并没有声明过，导致编译器的类型检查失败。\n\n  - 用ts写的模块在发布的时候仍然是用js发布;\n  这就导致一个问题：ts 那么多类型数据都没了，所以需要一个`*.d.ts`文件来标记某个js库里面对象的类型然后typings就是一个网络上的d.ts数据库;\n  \n  - `*.d.ts`类型定义文件，我感觉现在对我的用处就是编辑器的智能提示\n\n  (4)tslint.json\n\n  释义：保存了要使用的代码检查器的设置。\n  TSLint 对TypeScript 支持得很好，并且如果你使用的是 VsCode IDE，还有出色的插件支持。\n\n  tslint.json\n  ```\n  {\n    \"defaultSeverity\": \"error\",\n    \"extends\": [\n      \"tslint:latest\",\n      \"tslint-react\",\n      \"tslint-config-prettier\" // 安装tslint-config-prettier后，tslint-config-prettier禁用TSLint的所有格式设置规则, TSLint 和 prettier在代码格式化规则上就不会有冲突了\n    ],\n    \"jsRules\": {},\n    \"rules\": {\n      \"object-literal-sort-keys\": false,\n      \"no-console\": true,\n      \"jsx-no-lambda\": false,\n      \"no-submodule-imports\": false,\n      \"no-implicit-dependencies\": false\n    }\n  }\n  ```\n\n  tslint保存时校验配置\n  ```\n  \"editor.codeActionsOnSave\": {\n      \n      \"source.fixAll.eslint\": true, // For ESLint\n      \n      \"source.fixAll.tslint\": true, // For TSLint\n      \n      \"source.fixAll.stylelint\": true， // For Stylelint\n  }\n  ```\n  prettier保存时校验配置\n  ```\n  \"editor.formatOnSave\": true,\n  ```\n  - ps: 使用`tslint-config-prettier`关闭tslint中有关格式的规则，避免tslint与prettier在格式规则上产生冲突。目前我们的项目中（.jsx）中没有开启这一项。\n  \n\n  当按ctrl+s保存代码时，tslint插件会自动按照默认配置文件（项目根目录下的`tslint.json`）检查代码错误，prettier插件会自动按照默认配置文件（项目根目录下的`.prettierrc`）检查代码风格，并自动矫正。(不建议使用)\n\n#### VSCode配置\n  建议安装tsLint 插件插件，vsCode中直接搜索安装；\n  - ps：这个库可`esLint`库可以共存，但是需要进行配置，保证在`.jsx`/`.tsx`文件中只有一个生效，不然错误提示会有误报的情况。\n  具体配置地址：https://github.com/Microsoft/typescript-tslint-plugin；\n\n  ![](https://img.imgdb.cn/item/600ee2ed3ffa7d37b3236844.png)\n\n  到此时，我们的环境就配好了，接下来写一个小的React的demo.tsx吧；\n\n#### React typescript写法 \n  几个概念React.FC：\n  -FC = Functional Component\n  -SFC = Stateless Functional Component (已弃用)\n\n  学习typescript的基本语法,具体ts见：https://www.runoob.com/typescript/ts-variables.html\n  \n  - ps: 我有视频，如有需要可找我要哈😄；\n\n  有了以上typescrt姿势，我们就可以开始写ts代码了。⛽️\n\n  下面是我写的两种常见写法的demo；\n\n##### 泛型组件写法(对标Class写法)\n\n```javascript\n\nimport React from 'react';\nimport UseInfo from \"./UseInfo\"; // 引用其他组件（可以是.tsx，也可以是.jsx）\nimport style from './test.less'; // 引用样式文件\n\nfunction getExclamationMarks(numChars: number) {\n  return Array(numChars + 1).join('!');\n}\n\ninterface Props {\n  name: string;\n  enthusiasmLevel: number;\n}\ninterface State {\n  now: string,\n}\n\nclass Test extends React.Component<Props, State> {\n  constructor(props:Props) {\n    super(props);\n    this.state = {\n      now: \"fff\",\n    };\n  }\n  public clickTest = (x:string) => {\n    console.log(x)\n    this.setState({now: '###'});\n  }\n  render() {\n    const { name, enthusiasmLevel = 1 } = this.props;\n    const { now } = this.state;\n\n    console.log('@@@@@');\n    const hello : string = 111\n    console.log(hello)\n\n    if (enthusiasmLevel <= 0) {\n      throw new Error('You could be a little more enthusiastic. :D');\n    }\n\n    return (\n      <div className=\"hello\">\n        <UseInfo />\n        <div className=\"greeting\">\n          {`Hello ${name + getExclamationMarks(enthusiasmLevel)}`}\n        </div>\n        <div className={style.button} onClick={()=>this.clickTest(now)}></div>\n      </div>\n    );\n  }\n}\nexport default Test;\n\n```\n\n##### Hooks写法\n\n```javascript\nimport React, { Fragment, useState } from 'react';\nimport UseInfo from \"./UseInfo\"; // 引用其他组件（可以是.tsx，也可以是.jsx）\nimport style from './base.less'; // 引用样式文件\n\ninterface IProps {\n    changeTitle?: () => void;\n}\n\nconst Auth = (props: IProps) => {\n    const [houseTitle, setHoueseTitle] = useState<string>('')\n    return (<Fragment>\n      <useInfo />\n      <div>\n        <input\n            type=\"text\"\n            className={style.demo1}\n            placeholder={'please input'}\n            value={houseTitle}\n            onChange={changeTitle}\n        />\n    </div>\n    </Fragment>)\n    function changeTitle(e:any) { // 房屋标题\n        setHoueseTitle(e.target.value)\n    }\n}\nexport default Auth\n```\n好了，我们的一个完整的`umi`支持`ts`写法到这里就结束了，希望大家都学会了。\n\n#### 结语\n随着前端技术的发展。弱类型基本不能满足我们日益复杂的业务，强类型语言是未来的趋势。\nFramework - Angular2、UI - ant-design、library - RxJS等项目已经都迁移到typescript了，我们还不跟进吗。。。","slug":"umi-ts-升级","published":1,"updated":"2021-01-25T16:26:46.649Z","_id":"ckkcj023m0000gx60363qb4yw","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"umi配置ts的过程\"><a href=\"#umi配置ts的过程\" class=\"headerlink\" title=\"umi配置ts的过程\"></a>umi配置ts的过程</h3><h4 id=\"背景（为什么要配置TS）\"><a href=\"#背景（为什么要配置TS）\" class=\"headerlink\" title=\"背景（为什么要配置TS）\"></a>背景（为什么要配置TS）</h4><p>  1.本来项目是一个老的项目，之前有过升级但是由于大家技术水平的不统一，TS学习成本高，导致一直在搁浅中。<br>  2.由于现在ts的普及以及最近代码质量越来越难以把控，所以引入ts是控制质量的一种方式。</p>\n<h5 id=\"ts有啥好呢？\"><a href=\"#ts有啥好呢？\" class=\"headerlink\" title=\"ts有啥好呢？\"></a>ts有啥好呢？</h5><p>  1.可读性：类型明确，不需要额外注释类型；看到类型就知道怎么用；<br>  2.可维护性：在编译间断就可以发现错误，避免认为错误出现；<br>  3.兼容性：兼容js语法；可以直接将<code>*.js</code>改为<code>*.ts</code>使用；完全支持ES6规范；<br>  4.第三方库：兼容第三方库，即使第三方库不是用tst写的，也可以编写单独的类型文件供ts读取；</p>\n<h5 id=\"ts有啥不好呢？\"><a href=\"#ts有啥不好呢？\" class=\"headerlink\" title=\"ts有啥不好呢？\"></a>ts有啥不好呢？</h5><p>  1.从纯js转过来有一定的难度，好多写法类似java；<br>  2.类型定义比较繁琐和js相比；<br>  3.一些库兼容性不是很好；<br>  4.需要额外的构建工作量；</p>\n<h4 id=\"umi怎么配置\"><a href=\"#umi怎么配置\" class=\"headerlink\" title=\"umi怎么配置\"></a>umi怎么配置</h4><ul>\n<li><p>新的umi 3 create工具包会自动帮你配好。老的项目需要手动配置；我们这里主要介绍老项目的配置；</p>\n</li>\n<li><p>不管是老项目还是新项目，我们至少都要懂他的配置，这样便于我们后期如果项目变庞大复杂了，这是对项目进行优化；</p>\n</li>\n</ul>\n<h5 id=\"umi3脚手架配置\"><a href=\"#umi3脚手架配置\" class=\"headerlink\" title=\"umi3脚手架配置\"></a>umi3脚手架配置</h5><p>  按umi标准文档配置就可以了；<br>  umi <code>create-app</code>文档：<a href=\"https://umijs.org/zh-CN/docs\">https://umijs.org/zh-CN/docs</a></p>\n<pre><code>    $ yarn create @umijs/umi-app\n      Copy:  .editorconfig\n      Write: .gitignore\n      Copy:  .prettierignore\n      Copy:  .prettierrc\n      Write: .umirc.ts\n      Copy:  mock/.gitkeep\n      Write: package.json\n      Copy:  README.md\n      Copy:  src/pages/index.less\n      Copy:  src/pages/index.tsx\n      Copy:  tsconfig.json\n      Copy:  typings.d.ts\n      .\n      .\n      .</code></pre><p>  目录结构</p>\n<pre><code>    .\n    ├── package.json\n    ├── .umirc.ts\n    ├── .env\n    ├── dist\n    ├── mock\n    ├── public\n    └── src\n        ├── .umi\n        ├── layouts/index.tsx\n        ├── pages\n            ├── index.less\n            └── index.tsx\n        └── app.ts\n  balabala ... 这里省略一万字（具体看文档就可以了</code></pre><h5 id=\"umi老的项目配置\"><a href=\"#umi老的项目配置\" class=\"headerlink\" title=\"umi老的项目配置\"></a>umi老的项目配置</h5><p>  (1).umirc.ts<br>  官方解释： 配置文件，包含 umi 内置功能和插件的配置。<br>  话不多说，和老的<code>.js</code>一样并且可以共用。即运行时配置。</p>\n<p>  (2)tsconfig.json<br>  官方解释： TypeScript项目的根目录；<br>  我的解释：用来配置编译ts项目的根文件和编译配置；</p>\n<pre><code>  {\n    &quot;compilerOptions&quot;: {\n      &quot;target&quot;: &quot;esnext&quot;,\n      &quot;module&quot;: &quot;esnext&quot;,\n      &quot;moduleResolution&quot;: &quot;node&quot;,\n      &quot;importHelpers&quot;: true,\n      &quot;jsx&quot;: &quot;react&quot;,\n      &quot;esModuleInterop&quot;: true,\n      &quot;sourceMap&quot;: true,\n      &quot;baseUrl&quot;: &quot;.&quot;,\n      &quot;strict&quot;: true,\n      &quot;allowUnreachableCode&quot;:false, // 不报告执行不到的代码错误。\n      &quot;allowJs&quot;: true, //允许编译javascript文件。\n      &quot;allowSyntheticDefaultImports&quot;: true, //允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。\n      &quot;experimentalDecorators&quot;: true,\n      &quot;outDir&quot;: &quot;dist/&quot;,\n      &quot;paths&quot;: {\n        &quot;@/*&quot;: [&quot;src/*&quot;],\n        &quot;@*&quot;: [&quot;src/*&quot;],\n        &quot;@SDVariableJS&quot;: [&quot;config/variableConfig.js&quot;],\n      }\n    },\n    &quot;files&quot;: [\n      &quot;core.ts&quot;,\n      &quot;sys.ts&quot;,\n      &quot;types.ts&quot;,\n    ],\n    &quot;include&quot;:[],\n    &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]\n  }</code></pre><p>  常用的参数配置：</p>\n<p>  <code>allowUnreachableCode</code>:默认值-<code>false</code> 解释：不报告执行不到的代码错误。<br>  <code>allowJs</code>:默认值-<code>true</code> 解释：允许编译javascript文件。<br>  <code>allowSyntheticDefaultImports</code>:默认值-<code>true</code> 解释：允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。<br>  <code>noImplicitUseStrict</code>:默认值-<code>alse</code> 解释：模块输出中不包含 “use strict”指令。<br>  <code>alwaysStrict</code>:默认值-<code>false</code> 解释：以严格模式解析并为每个源文件生成 “use strict”语句<br>  <code>checkJs</code>:默认值-<code>false</code> 解释：在<code>.js</code>文件中报告错误。与 <code>allowJs</code>配合使用。</p>\n<p>  更多参数配置见：<a href=\"https://www.tslang.cn/docs/handbook/compiler-options.html\">https://www.tslang.cn/docs/handbook/compiler-options.html</a></p>\n<p>  (3)typings.d.ts</p>\n<p>  释义：存放一些声明，类似于C/C++的.h头文件。(不知道大家理解么，写过C的应该懂这个)</p>\n<ul>\n<li><p>TypeScript相比JavaScript增加了类型声明。这些类型声明帮助编译器识别类型，从而防止开发者“搬起石头砸自己的脚”。原则上TypeScript 需要开发者做到先声明后使用。这就导致开发者在调用很多原生接口（浏览器、Node.js）或者第三方模块的时候，因为某些全局变量或者对象的方法并没有声明过，导致编译器的类型检查失败。</p>\n</li>\n<li><p>用ts写的模块在发布的时候仍然是用js发布;<br>这就导致一个问题：ts 那么多类型数据都没了，所以需要一个<code>*.d.ts</code>文件来标记某个js库里面对象的类型然后typings就是一个网络上的d.ts数据库;</p>\n</li>\n<li><p><code>*.d.ts</code>类型定义文件，我感觉现在对我的用处就是编辑器的智能提示</p>\n<p>(4)tslint.json</p>\n<p>释义：保存了要使用的代码检查器的设置。<br>TSLint 对TypeScript 支持得很好，并且如果你使用的是 VsCode IDE，还有出色的插件支持。</p>\n<p>tslint.json</p>\n<pre><code>{\n&quot;defaultSeverity&quot;: &quot;error&quot;,\n&quot;extends&quot;: [\n  &quot;tslint:latest&quot;,\n  &quot;tslint-react&quot;,\n  &quot;tslint-config-prettier&quot; // 安装tslint-config-prettier后，tslint-config-prettier禁用TSLint的所有格式设置规则, TSLint 和 prettier在代码格式化规则上就不会有冲突了\n],\n&quot;jsRules&quot;: {},\n&quot;rules&quot;: {\n  &quot;object-literal-sort-keys&quot;: false,\n  &quot;no-console&quot;: true,\n  &quot;jsx-no-lambda&quot;: false,\n  &quot;no-submodule-imports&quot;: false,\n  &quot;no-implicit-dependencies&quot;: false\n}\n}</code></pre><p>tslint保存时校验配置</p>\n<pre><code>&quot;editor.codeActionsOnSave&quot;: {\n\n  &quot;source.fixAll.eslint&quot;: true, // For ESLint\n\n  &quot;source.fixAll.tslint&quot;: true, // For TSLint\n\n  &quot;source.fixAll.stylelint&quot;: true， // For Stylelint\n}</code></pre><p>prettier保存时校验配置</p>\n<pre><code>&quot;editor.formatOnSave&quot;: true,</code></pre></li>\n<li><p>ps: 使用<code>tslint-config-prettier</code>关闭tslint中有关格式的规则，避免tslint与prettier在格式规则上产生冲突。目前我们的项目中（.jsx）中没有开启这一项。</p>\n</li>\n</ul>\n<p>  当按ctrl+s保存代码时，tslint插件会自动按照默认配置文件（项目根目录下的<code>tslint.json</code>）检查代码错误，prettier插件会自动按照默认配置文件（项目根目录下的<code>.prettierrc</code>）检查代码风格，并自动矫正。(不建议使用)</p>\n<h4 id=\"VSCode配置\"><a href=\"#VSCode配置\" class=\"headerlink\" title=\"VSCode配置\"></a>VSCode配置</h4><p>  建议安装tsLint 插件插件，vsCode中直接搜索安装；</p>\n<ul>\n<li><p>ps：这个库可<code>esLint</code>库可以共存，但是需要进行配置，保证在<code>.jsx</code>/<code>.tsx</code>文件中只有一个生效，不然错误提示会有误报的情况。<br>具体配置地址：<a href=\"https://github.com/Microsoft/typescript-tslint-plugin；\">https://github.com/Microsoft/typescript-tslint-plugin；</a></p>\n<p><img src=\"https://img.imgdb.cn/item/600ee2ed3ffa7d37b3236844.png\" alt=\"\"></p>\n<p>到此时，我们的环境就配好了，接下来写一个小的React的demo.tsx吧；</p>\n</li>\n</ul>\n<h4 id=\"React-typescript写法\"><a href=\"#React-typescript写法\" class=\"headerlink\" title=\"React typescript写法\"></a>React typescript写法</h4><p>  几个概念React.FC：<br>  -FC = Functional Component<br>  -SFC = Stateless Functional Component (已弃用)</p>\n<p>  学习typescript的基本语法,具体ts见：<a href=\"https://www.runoob.com/typescript/ts-variables.html\">https://www.runoob.com/typescript/ts-variables.html</a></p>\n<ul>\n<li><p>ps: 我有视频，如有需要可找我要哈😄；</p>\n<p>有了以上typescrt姿势，我们就可以开始写ts代码了。⛽️</p>\n<p>下面是我写的两种常见写法的demo；</p>\n</li>\n</ul>\n<h5 id=\"泛型组件写法-对标Class写法\"><a href=\"#泛型组件写法-对标Class写法\" class=\"headerlink\" title=\"泛型组件写法(对标Class写法)\"></a>泛型组件写法(对标Class写法)</h5><pre class=\" language-javascript\"><code class=\"language-javascript\">\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> UseInfo <span class=\"token keyword\">from</span> <span class=\"token string\">\"./UseInfo\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 引用其他组件（可以是.tsx，也可以是.jsx）</span>\n<span class=\"token keyword\">import</span> style <span class=\"token keyword\">from</span> <span class=\"token string\">'./test.less'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 引用样式文件</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getExclamationMarks</span><span class=\"token punctuation\">(</span>numChars<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span>numChars <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">;</span>\n  enthusiasmLevel<span class=\"token punctuation\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  now<span class=\"token punctuation\">:</span> string<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span><span class=\"token operator\">&lt;</span>Props<span class=\"token punctuation\">,</span> State<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span>Props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      now<span class=\"token punctuation\">:</span> <span class=\"token string\">\"fff\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">public</span> clickTest <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">:</span>string<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>now<span class=\"token punctuation\">:</span> <span class=\"token string\">'###'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> enthusiasmLevel <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> now <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@@@@@'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> hello <span class=\"token punctuation\">:</span> string <span class=\"token operator\">=</span> <span class=\"token number\">111</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hello<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>enthusiasmLevel <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You could be a little more enthusiastic. :D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>UseInfo <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"greeting\"</span><span class=\"token operator\">></span>\n          <span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name <span class=\"token operator\">+</span> <span class=\"token function\">getExclamationMarks</span><span class=\"token punctuation\">(</span>enthusiasmLevel<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">.</span>button<span class=\"token punctuation\">}</span> onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token operator\">></span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clickTest</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Test<span class=\"token punctuation\">;</span>\n</code></pre>\n<h5 id=\"Hooks写法\"><a href=\"#Hooks写法\" class=\"headerlink\" title=\"Hooks写法\"></a>Hooks写法</h5><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Fragment<span class=\"token punctuation\">,</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> UseInfo <span class=\"token keyword\">from</span> <span class=\"token string\">\"./UseInfo\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 引用其他组件（可以是.tsx，也可以是.jsx）</span>\n<span class=\"token keyword\">import</span> style <span class=\"token keyword\">from</span> <span class=\"token string\">'./base.less'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 引用样式文件</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">IProps</span> <span class=\"token punctuation\">{</span>\n    changeTitle<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Auth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">:</span> IProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>houseTitle<span class=\"token punctuation\">,</span> setHoueseTitle<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Fragment<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>useInfo <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>input\n            type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span>\n            className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>style<span class=\"token punctuation\">.</span>demo1<span class=\"token punctuation\">}</span>\n            placeholder<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string\">'please input'</span><span class=\"token punctuation\">}</span>\n            value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>houseTitle<span class=\"token punctuation\">}</span>\n            onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>changeTitle<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Fragment<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">changeTitle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">:</span>any<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\" spellcheck=\"true\">// 房屋标题</span>\n        <span class=\"token function\">setHoueseTitle</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Auth</code></pre>\n<p>好了，我们的一个完整的<code>umi</code>支持<code>ts</code>写法到这里就结束了，希望大家都学会了。</p>\n<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4><p>随着前端技术的发展。弱类型基本不能满足我们日益复杂的业务，强类型语言是未来的趋势。<br>Framework - Angular2、UI - ant-design、library - RxJS等项目已经都迁移到typescript了，我们还不跟进吗。。。</p>\n","site":{"data":{"friends":[{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geariccemmj20c80c8dfz.jpg","name":"Duke2009","introduction":"技术·学习","url":"https://juejin.im/user/5e781ee56fb9a07cdf53695c","title":"掘金"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1geargxnzy8j20ia0iaglq.jpg","name":"duanweiqiang","introduction":"理论·社科·人文","url":"https://www.zhihu.com/people/duanweiqiang","title":"知乎"},{"avatar":"https://cambrian-images.cdn.bcebos.com/a487b054820191e8e7a2fcf136b925b9_1551320091220.jpeg","name":"蜡笔小新SX","introduction":"有趣·新鲜事·生活","url":"https://weibo.com/2558439200/profile?topnav=1&wvr=6","title":"微博"},{"avatar":"http://ww1.sinaimg.cn/large/987eaf20ly1gearj8zt01j20dw0dwjrf.jpg","name":"duanweiqiang","introduction":"项目·技术·demo","url":"https://github.com/duanweiqiang","title":"GitHub"}]}},"excerpt":"","more":"<h3 id=\"umi配置ts的过程\"><a href=\"#umi配置ts的过程\" class=\"headerlink\" title=\"umi配置ts的过程\"></a>umi配置ts的过程</h3><h4 id=\"背景（为什么要配置TS）\"><a href=\"#背景（为什么要配置TS）\" class=\"headerlink\" title=\"背景（为什么要配置TS）\"></a>背景（为什么要配置TS）</h4><p>  1.本来项目是一个老的项目，之前有过升级但是由于大家技术水平的不统一，TS学习成本高，导致一直在搁浅中。<br>  2.由于现在ts的普及以及最近代码质量越来越难以把控，所以引入ts是控制质量的一种方式。</p>\n<h5 id=\"ts有啥好呢？\"><a href=\"#ts有啥好呢？\" class=\"headerlink\" title=\"ts有啥好呢？\"></a>ts有啥好呢？</h5><p>  1.可读性：类型明确，不需要额外注释类型；看到类型就知道怎么用；<br>  2.可维护性：在编译间断就可以发现错误，避免认为错误出现；<br>  3.兼容性：兼容js语法；可以直接将<code>*.js</code>改为<code>*.ts</code>使用；完全支持ES6规范；<br>  4.第三方库：兼容第三方库，即使第三方库不是用tst写的，也可以编写单独的类型文件供ts读取；</p>\n<h5 id=\"ts有啥不好呢？\"><a href=\"#ts有啥不好呢？\" class=\"headerlink\" title=\"ts有啥不好呢？\"></a>ts有啥不好呢？</h5><p>  1.从纯js转过来有一定的难度，好多写法类似java；<br>  2.类型定义比较繁琐和js相比；<br>  3.一些库兼容性不是很好；<br>  4.需要额外的构建工作量；</p>\n<h4 id=\"umi怎么配置\"><a href=\"#umi怎么配置\" class=\"headerlink\" title=\"umi怎么配置\"></a>umi怎么配置</h4><ul>\n<li><p>新的umi 3 create工具包会自动帮你配好。老的项目需要手动配置；我们这里主要介绍老项目的配置；</p>\n</li>\n<li><p>不管是老项目还是新项目，我们至少都要懂他的配置，这样便于我们后期如果项目变庞大复杂了，这是对项目进行优化；</p>\n</li>\n</ul>\n<h5 id=\"umi3脚手架配置\"><a href=\"#umi3脚手架配置\" class=\"headerlink\" title=\"umi3脚手架配置\"></a>umi3脚手架配置</h5><p>  按umi标准文档配置就可以了；<br>  umi <code>create-app</code>文档：<a href=\"https://umijs.org/zh-CN/docs\">https://umijs.org/zh-CN/docs</a></p>\n<pre><code>    $ yarn create @umijs/umi-app\n      Copy:  .editorconfig\n      Write: .gitignore\n      Copy:  .prettierignore\n      Copy:  .prettierrc\n      Write: .umirc.ts\n      Copy:  mock/.gitkeep\n      Write: package.json\n      Copy:  README.md\n      Copy:  src/pages/index.less\n      Copy:  src/pages/index.tsx\n      Copy:  tsconfig.json\n      Copy:  typings.d.ts\n      .\n      .\n      .</code></pre><p>  目录结构</p>\n<pre><code>    .\n    ├── package.json\n    ├── .umirc.ts\n    ├── .env\n    ├── dist\n    ├── mock\n    ├── public\n    └── src\n        ├── .umi\n        ├── layouts/index.tsx\n        ├── pages\n            ├── index.less\n            └── index.tsx\n        └── app.ts\n  balabala ... 这里省略一万字（具体看文档就可以了</code></pre><h5 id=\"umi老的项目配置\"><a href=\"#umi老的项目配置\" class=\"headerlink\" title=\"umi老的项目配置\"></a>umi老的项目配置</h5><p>  (1).umirc.ts<br>  官方解释： 配置文件，包含 umi 内置功能和插件的配置。<br>  话不多说，和老的<code>.js</code>一样并且可以共用。即运行时配置。</p>\n<p>  (2)tsconfig.json<br>  官方解释： TypeScript项目的根目录；<br>  我的解释：用来配置编译ts项目的根文件和编译配置；</p>\n<pre><code>  {\n    &quot;compilerOptions&quot;: {\n      &quot;target&quot;: &quot;esnext&quot;,\n      &quot;module&quot;: &quot;esnext&quot;,\n      &quot;moduleResolution&quot;: &quot;node&quot;,\n      &quot;importHelpers&quot;: true,\n      &quot;jsx&quot;: &quot;react&quot;,\n      &quot;esModuleInterop&quot;: true,\n      &quot;sourceMap&quot;: true,\n      &quot;baseUrl&quot;: &quot;.&quot;,\n      &quot;strict&quot;: true,\n      &quot;allowUnreachableCode&quot;:false, // 不报告执行不到的代码错误。\n      &quot;allowJs&quot;: true, //允许编译javascript文件。\n      &quot;allowSyntheticDefaultImports&quot;: true, //允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。\n      &quot;experimentalDecorators&quot;: true,\n      &quot;outDir&quot;: &quot;dist/&quot;,\n      &quot;paths&quot;: {\n        &quot;@/*&quot;: [&quot;src/*&quot;],\n        &quot;@*&quot;: [&quot;src/*&quot;],\n        &quot;@SDVariableJS&quot;: [&quot;config/variableConfig.js&quot;],\n      }\n    },\n    &quot;files&quot;: [\n      &quot;core.ts&quot;,\n      &quot;sys.ts&quot;,\n      &quot;types.ts&quot;,\n    ],\n    &quot;include&quot;:[],\n    &quot;exclude&quot;: [&quot;node_modules&quot;, &quot;dist&quot;]\n  }</code></pre><p>  常用的参数配置：</p>\n<p>  <code>allowUnreachableCode</code>:默认值-<code>false</code> 解释：不报告执行不到的代码错误。<br>  <code>allowJs</code>:默认值-<code>true</code> 解释：允许编译javascript文件。<br>  <code>allowSyntheticDefaultImports</code>:默认值-<code>true</code> 解释：允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。<br>  <code>noImplicitUseStrict</code>:默认值-<code>alse</code> 解释：模块输出中不包含 “use strict”指令。<br>  <code>alwaysStrict</code>:默认值-<code>false</code> 解释：以严格模式解析并为每个源文件生成 “use strict”语句<br>  <code>checkJs</code>:默认值-<code>false</code> 解释：在<code>.js</code>文件中报告错误。与 <code>allowJs</code>配合使用。</p>\n<p>  更多参数配置见：<a href=\"https://www.tslang.cn/docs/handbook/compiler-options.html\">https://www.tslang.cn/docs/handbook/compiler-options.html</a></p>\n<p>  (3)typings.d.ts</p>\n<p>  释义：存放一些声明，类似于C/C++的.h头文件。(不知道大家理解么，写过C的应该懂这个)</p>\n<ul>\n<li><p>TypeScript相比JavaScript增加了类型声明。这些类型声明帮助编译器识别类型，从而防止开发者“搬起石头砸自己的脚”。原则上TypeScript 需要开发者做到先声明后使用。这就导致开发者在调用很多原生接口（浏览器、Node.js）或者第三方模块的时候，因为某些全局变量或者对象的方法并没有声明过，导致编译器的类型检查失败。</p>\n</li>\n<li><p>用ts写的模块在发布的时候仍然是用js发布;<br>这就导致一个问题：ts 那么多类型数据都没了，所以需要一个<code>*.d.ts</code>文件来标记某个js库里面对象的类型然后typings就是一个网络上的d.ts数据库;</p>\n</li>\n<li><p><code>*.d.ts</code>类型定义文件，我感觉现在对我的用处就是编辑器的智能提示</p>\n<p>(4)tslint.json</p>\n<p>释义：保存了要使用的代码检查器的设置。<br>TSLint 对TypeScript 支持得很好，并且如果你使用的是 VsCode IDE，还有出色的插件支持。</p>\n<p>tslint.json</p>\n<pre><code>{\n&quot;defaultSeverity&quot;: &quot;error&quot;,\n&quot;extends&quot;: [\n  &quot;tslint:latest&quot;,\n  &quot;tslint-react&quot;,\n  &quot;tslint-config-prettier&quot; // 安装tslint-config-prettier后，tslint-config-prettier禁用TSLint的所有格式设置规则, TSLint 和 prettier在代码格式化规则上就不会有冲突了\n],\n&quot;jsRules&quot;: {},\n&quot;rules&quot;: {\n  &quot;object-literal-sort-keys&quot;: false,\n  &quot;no-console&quot;: true,\n  &quot;jsx-no-lambda&quot;: false,\n  &quot;no-submodule-imports&quot;: false,\n  &quot;no-implicit-dependencies&quot;: false\n}\n}</code></pre><p>tslint保存时校验配置</p>\n<pre><code>&quot;editor.codeActionsOnSave&quot;: {\n\n  &quot;source.fixAll.eslint&quot;: true, // For ESLint\n\n  &quot;source.fixAll.tslint&quot;: true, // For TSLint\n\n  &quot;source.fixAll.stylelint&quot;: true， // For Stylelint\n}</code></pre><p>prettier保存时校验配置</p>\n<pre><code>&quot;editor.formatOnSave&quot;: true,</code></pre></li>\n<li><p>ps: 使用<code>tslint-config-prettier</code>关闭tslint中有关格式的规则，避免tslint与prettier在格式规则上产生冲突。目前我们的项目中（.jsx）中没有开启这一项。</p>\n</li>\n</ul>\n<p>  当按ctrl+s保存代码时，tslint插件会自动按照默认配置文件（项目根目录下的<code>tslint.json</code>）检查代码错误，prettier插件会自动按照默认配置文件（项目根目录下的<code>.prettierrc</code>）检查代码风格，并自动矫正。(不建议使用)</p>\n<h4 id=\"VSCode配置\"><a href=\"#VSCode配置\" class=\"headerlink\" title=\"VSCode配置\"></a>VSCode配置</h4><p>  建议安装tsLint 插件插件，vsCode中直接搜索安装；</p>\n<ul>\n<li><p>ps：这个库可<code>esLint</code>库可以共存，但是需要进行配置，保证在<code>.jsx</code>/<code>.tsx</code>文件中只有一个生效，不然错误提示会有误报的情况。<br>具体配置地址：<a href=\"https://github.com/Microsoft/typescript-tslint-plugin；\">https://github.com/Microsoft/typescript-tslint-plugin；</a></p>\n<p><img src=\"https://img.imgdb.cn/item/600ee2ed3ffa7d37b3236844.png\" alt=\"\"></p>\n<p>到此时，我们的环境就配好了，接下来写一个小的React的demo.tsx吧；</p>\n</li>\n</ul>\n<h4 id=\"React-typescript写法\"><a href=\"#React-typescript写法\" class=\"headerlink\" title=\"React typescript写法\"></a>React typescript写法</h4><p>  几个概念React.FC：<br>  -FC = Functional Component<br>  -SFC = Stateless Functional Component (已弃用)</p>\n<p>  学习typescript的基本语法,具体ts见：<a href=\"https://www.runoob.com/typescript/ts-variables.html\">https://www.runoob.com/typescript/ts-variables.html</a></p>\n<ul>\n<li><p>ps: 我有视频，如有需要可找我要哈😄；</p>\n<p>有了以上typescrt姿势，我们就可以开始写ts代码了。⛽️</p>\n<p>下面是我写的两种常见写法的demo；</p>\n</li>\n</ul>\n<h5 id=\"泛型组件写法-对标Class写法\"><a href=\"#泛型组件写法-对标Class写法\" class=\"headerlink\" title=\"泛型组件写法(对标Class写法)\"></a>泛型组件写法(对标Class写法)</h5><pre><code class=\"javascript\">\nimport React from &#39;react&#39;;\nimport UseInfo from &quot;./UseInfo&quot;; // 引用其他组件（可以是.tsx，也可以是.jsx）\nimport style from &#39;./test.less&#39;; // 引用样式文件\n\nfunction getExclamationMarks(numChars: number) {\n  return Array(numChars + 1).join(&#39;!&#39;);\n}\n\ninterface Props {\n  name: string;\n  enthusiasmLevel: number;\n}\ninterface State {\n  now: string,\n}\n\nclass Test extends React.Component&lt;Props, State&gt; {\n  constructor(props:Props) {\n    super(props);\n    this.state = {\n      now: &quot;fff&quot;,\n    };\n  }\n  public clickTest = (x:string) =&gt; {\n    console.log(x)\n    this.setState({now: &#39;###&#39;});\n  }\n  render() {\n    const { name, enthusiasmLevel = 1 } = this.props;\n    const { now } = this.state;\n\n    console.log(&#39;@@@@@&#39;);\n    const hello : string = 111\n    console.log(hello)\n\n    if (enthusiasmLevel &lt;= 0) {\n      throw new Error(&#39;You could be a little more enthusiastic. :D&#39;);\n    }\n\n    return (\n      &lt;div className=&quot;hello&quot;&gt;\n        &lt;UseInfo /&gt;\n        &lt;div className=&quot;greeting&quot;&gt;\n          {`Hello ${name + getExclamationMarks(enthusiasmLevel)}`}\n        &lt;/div&gt;\n        &lt;div className={style.button} onClick={()=&gt;this.clickTest(now)}&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\nexport default Test;\n</code></pre>\n<h5 id=\"Hooks写法\"><a href=\"#Hooks写法\" class=\"headerlink\" title=\"Hooks写法\"></a>Hooks写法</h5><pre><code class=\"javascript\">import React, { Fragment, useState } from &#39;react&#39;;\nimport UseInfo from &quot;./UseInfo&quot;; // 引用其他组件（可以是.tsx，也可以是.jsx）\nimport style from &#39;./base.less&#39;; // 引用样式文件\n\ninterface IProps {\n    changeTitle?: () =&gt; void;\n}\n\nconst Auth = (props: IProps) =&gt; {\n    const [houseTitle, setHoueseTitle] = useState&lt;string&gt;(&#39;&#39;)\n    return (&lt;Fragment&gt;\n      &lt;useInfo /&gt;\n      &lt;div&gt;\n        &lt;input\n            type=&quot;text&quot;\n            className={style.demo1}\n            placeholder={&#39;please input&#39;}\n            value={houseTitle}\n            onChange={changeTitle}\n        /&gt;\n    &lt;/div&gt;\n    &lt;/Fragment&gt;)\n    function changeTitle(e:any) { // 房屋标题\n        setHoueseTitle(e.target.value)\n    }\n}\nexport default Auth</code></pre>\n<p>好了，我们的一个完整的<code>umi</code>支持<code>ts</code>写法到这里就结束了，希望大家都学会了。</p>\n<h4 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h4><p>随着前端技术的发展。弱类型基本不能满足我们日益复杂的业务，强类型语言是未来的趋势。<br>Framework - Angular2、UI - ant-design、library - RxJS等项目已经都迁移到typescript了，我们还不跟进吗。。。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckj8txcko0000hi60aiu23bpp","category_id":"ckj8txcla0004hi60bcg679zq","_id":"ckj8txclz000ihi60ao403a9c"},{"post_id":"ckj8txcls000fhi607ef27n3j","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcm3000lhi60eqlvbdbj"},{"post_id":"ckj8txcl40002hi60dlls8rg3","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcm9000ohi60au0q1zw2"},{"post_id":"ckj8txcly000hhi602qj35boh","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcma000qhi600bgi5vpt"},{"post_id":"ckj8txclh0006hi600x61ecms","category_id":"ckj8txclz000jhi607wzk0ata","_id":"ckj8txcmd000uhi6062n8ecav"},{"post_id":"ckj8txclj0008hi606tj66zdo","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcme000vhi60ddnk4sxo"},{"post_id":"ckj8txclm000ahi606dsx6fd4","category_id":"ckj8txclz000jhi607wzk0ata","_id":"ckj8txcme000yhi60aanx9wcj"},{"post_id":"ckj8txcpk001dhi60dqoefmsl","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcpz001ihi605vfs5qka"},{"post_id":"ckj8txcpn001ehi60avyh8glc","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcqe001lhi60br1waqa0"},{"post_id":"ckj8txcpx001hhi600cvf731o","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcql001qhi603wj4hit9"},{"post_id":"ckj8txcqb001khi603mik9pe8","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcqm001thi6088gtg8zb"},{"post_id":"ckj8txcqg001ohi60bz458k4u","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcqm001vhi603bungfly"},{"post_id":"ckj8txcpr001ghi60aktz721r","category_id":"ckj8txcq0001jhi604y7i2pnj","_id":"ckj8txcqp001yhi60hasrgeiq"},{"post_id":"ckj8txcs1002hhi60a1ft74te","category_id":"ckj8txclp000bhi60bcb52ifp","_id":"ckj8txcs7002jhi609ex2cn6r"},{"post_id":"ckkcj023m0000gx60363qb4yw","category_id":"ckj8txcq0001jhi604y7i2pnj","_id":"ckkcj2ujw0002gx60ho8k1bk7"}],"PostTag":[{"post_id":"ckj8txcko0000hi60aiu23bpp","tag_id":"ckj8txclf0005hi607cnv2ccq","_id":"ckj8txcls000ehi603ipu1upc"},{"post_id":"ckj8txcl40002hi60dlls8rg3","tag_id":"ckj8txclq000chi607wqy63ec","_id":"ckj8txcm9000phi604cez1ra6"},{"post_id":"ckj8txcl40002hi60dlls8rg3","tag_id":"ckj8txcm0000khi60ch0a5n5x","_id":"ckj8txcma000rhi60f3jecrld"},{"post_id":"ckj8txclh0006hi600x61ecms","tag_id":"ckj8txcm6000nhi6043cgegsk","_id":"ckj8txcme000xhi60cs9t9a9e"},{"post_id":"ckj8txclh0006hi600x61ecms","tag_id":"ckj8txcmc000thi606lm1d9np","_id":"ckj8txcmf000zhi60dbfqctdv"},{"post_id":"ckj8txclj0008hi606tj66zdo","tag_id":"ckj8txcme000whi60bojb8il3","_id":"ckj8txcmf0012hi603uk02is3"},{"post_id":"ckj8txclj0008hi606tj66zdo","tag_id":"ckj8txcmf0010hi60eoen0omt","_id":"ckj8txcmf0013hi60947cdomb"},{"post_id":"ckj8txclm000ahi606dsx6fd4","tag_id":"ckj8txcmc000thi606lm1d9np","_id":"ckj8txcmh0015hi605qwyc1e4"},{"post_id":"ckj8txcls000fhi607ef27n3j","tag_id":"ckj8txcmg0014hi6090mm3n0x","_id":"ckj8txcmt0018hi60g59yhquk"},{"post_id":"ckj8txcls000fhi607ef27n3j","tag_id":"ckj8txcmh0016hi6060v7b90l","_id":"ckj8txcmt0019hi608mcy9eos"},{"post_id":"ckj8txcly000hhi602qj35boh","tag_id":"ckj8txcmi0017hi601tad2nb5","_id":"ckj8txcmu001bhi60elq0c189"},{"post_id":"ckj8txcly000hhi602qj35boh","tag_id":"ckj8txcmt001ahi60awr71p09","_id":"ckj8txcmv001chi60791nhosm"},{"post_id":"ckj8txcpk001dhi60dqoefmsl","tag_id":"ckj8txcme000whi60bojb8il3","_id":"ckj8txcqg001nhi6076cih5ku"},{"post_id":"ckj8txcpk001dhi60dqoefmsl","tag_id":"ckj8txcpr001fhi603nwf2oah","_id":"ckj8txcqk001phi609xti14h6"},{"post_id":"ckj8txcpk001dhi60dqoefmsl","tag_id":"ckj8txcmi0017hi601tad2nb5","_id":"ckj8txcqm001shi60hvbl4j5m"},{"post_id":"ckj8txcpn001ehi60avyh8glc","tag_id":"ckj8txcmg0014hi6090mm3n0x","_id":"ckj8txcqm001uhi606eul3h6x"},{"post_id":"ckj8txcpn001ehi60avyh8glc","tag_id":"ckj8txcqe001mhi60dm8l0tj8","_id":"ckj8txcqo001xhi60awr63lct"},{"post_id":"ckj8txcpr001ghi60aktz721r","tag_id":"ckj8txcql001rhi604tn9fl4q","_id":"ckj8txcqx0021hi60ed9s5ufg"},{"post_id":"ckj8txcpr001ghi60aktz721r","tag_id":"ckj8txcqo001whi607rud9w37","_id":"ckj8txcqz0022hi60185qgqa6"},{"post_id":"ckj8txcpr001ghi60aktz721r","tag_id":"ckj8txcqu001zhi608bam3jtz","_id":"ckj8txcr10024hi60e7ly93k2"},{"post_id":"ckj8txcpx001hhi600cvf731o","tag_id":"ckj8txcmg0014hi6090mm3n0x","_id":"ckj8txcr30026hi608f6t73zr"},{"post_id":"ckj8txcpx001hhi600cvf731o","tag_id":"ckj8txcqw0020hi603v4ya04h","_id":"ckj8txcr50027hi60fpxjg08l"},{"post_id":"ckj8txcpx001hhi600cvf731o","tag_id":"ckj8txcr00023hi60b5p4fwkn","_id":"ckj8txcr90029hi60abz86o47"},{"post_id":"ckj8txcqb001khi603mik9pe8","tag_id":"ckj8txcmg0014hi6090mm3n0x","_id":"ckj8txcrf002bhi60a6au73px"},{"post_id":"ckj8txcqb001khi603mik9pe8","tag_id":"ckj8txcr20025hi60a6tt5crf","_id":"ckj8txcrg002chi6027iaax0a"},{"post_id":"ckj8txcqb001khi603mik9pe8","tag_id":"ckj8txcr50028hi60csh9falv","_id":"ckj8txcrh002dhi608zwldznl"},{"post_id":"ckj8txcqg001ohi60bz458k4u","tag_id":"ckj8txcmi0017hi601tad2nb5","_id":"ckj8txcri002ehi60d7n54is8"},{"post_id":"ckj8txcqg001ohi60bz458k4u","tag_id":"ckj8txcmf0010hi60eoen0omt","_id":"ckj8txcri002fhi608ttr82ul"},{"post_id":"ckj8txcqg001ohi60bz458k4u","tag_id":"ckj8txcrc002ahi60df8z8nni","_id":"ckj8txcri002ghi60eaod5hix"},{"post_id":"ckj8txcs1002hhi60a1ft74te","tag_id":"ckj8txcmg0014hi6090mm3n0x","_id":"ckj8txcsa002khi603n1z2vec"},{"post_id":"ckj8txcs1002hhi60a1ft74te","tag_id":"ckj8txcs6002ihi6085v60dr4","_id":"ckj8txcsa002lhi60hwgjggpl"},{"post_id":"ckkcj023m0000gx60363qb4yw","tag_id":"ckkcj2ujw0003gx60a6tz5e5r","_id":"ckkcj2ujx0005gx60hggn2lgu"},{"post_id":"ckkcj023m0000gx60363qb4yw","tag_id":"ckkcrrfqa0006gx605d63an21","_id":"ckkcrrfqd0007gx60ddldhl6t"}],"Tag":[{"name":"git","_id":"ckj8txclf0005hi607cnv2ccq"},{"name":"hexo","_id":"ckj8txclq000chi607wqy63ec"},{"name":"blog","_id":"ckj8txcm0000khi60ch0a5n5x"},{"name":"生活","_id":"ckj8txcm6000nhi6043cgegsk"},{"name":"常识","_id":"ckj8txcmc000thi606lm1d9np"},{"name":"debug","_id":"ckj8txcme000whi60bojb8il3"},{"name":"chrome","_id":"ckj8txcmf0010hi60eoen0omt"},{"name":"React","_id":"ckj8txcmg0014hi6090mm3n0x"},{"name":"dom","_id":"ckj8txcmh0016hi6060v7b90l"},{"name":"web","_id":"ckj8txcmi0017hi601tad2nb5"},{"name":"token","_id":"ckj8txcmt001ahi60awr71p09"},{"name":"Safari","_id":"ckj8txcpr001fhi603nwf2oah"},{"name":"性能优化","_id":"ckj8txcqe001mhi60dm8l0tj8"},{"name":"nodeJS","_id":"ckj8txcql001rhi604tn9fl4q"},{"name":"express","_id":"ckj8txcqo001whi607rud9w37"},{"name":"swig","_id":"ckj8txcqu001zhi608bam3jtz"},{"name":"拖动","_id":"ckj8txcqw0020hi603v4ya04h"},{"name":"drag","_id":"ckj8txcr00023hi60b5p4fwkn"},{"name":"储存","_id":"ckj8txcr20025hi60a6tt5crf"},{"name":"数据隔离","_id":"ckj8txcr50028hi60csh9falv"},{"name":"Storage","_id":"ckj8txcrc002ahi60df8z8nni"},{"name":"keyEvent","_id":"ckj8txcs6002ihi6085v60dr4"},{"name":"TS","_id":"ckkcj2ujv0001gx60e3iw7ma0"},{"name":"umi","_id":"ckkcj2ujw0003gx60a6tz5e5r"},{"name":"ts","_id":"ckkcrrfqa0006gx605d63an21"}]}}